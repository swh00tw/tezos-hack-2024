"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/blakejs";
exports.ids = ["vendor-chunks/blakejs"];
exports.modules = {

/***/ "(ssr)/./node_modules/blakejs/blake2b.js":
/*!*****************************************!*\
  !*** ./node_modules/blakejs/blake2b.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/blakejs/util.js\");\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA(v, a, b) {\n    const o0 = v[a] + v[b];\n    let o1 = v[a + 1] + v[b + 1];\n    if (o0 >= 0x100000000) {\n        o1++;\n    }\n    v[a] = o0;\n    v[a + 1] = o1;\n}\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC(v, a, b0, b1) {\n    let o0 = v[a] + b0;\n    if (b0 < 0) {\n        o0 += 0x100000000;\n    }\n    let o1 = v[a + 1] + b1;\n    if (o0 >= 0x100000000) {\n        o1++;\n    }\n    v[a] = o0;\n    v[a + 1] = o1;\n}\n// Little-endian byte access\nfunction B2B_GET32(arr, i) {\n    return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n}\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G(a, b, c, d, ix, iy) {\n    const x0 = m[ix];\n    const x1 = m[ix + 1];\n    const y0 = m[iy];\n    const y1 = m[iy + 1];\n    ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n    ;\n    ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n    ;\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n    let xor0 = v[d] ^ v[a];\n    let xor1 = v[d + 1] ^ v[a + 1];\n    v[d] = xor1;\n    v[d + 1] = xor0;\n    ADD64AA(v, c, d);\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n    xor0 = v[b] ^ v[c];\n    xor1 = v[b + 1] ^ v[c + 1];\n    v[b] = xor0 >>> 24 ^ xor1 << 8;\n    v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n    ADD64AA(v, a, b);\n    ADD64AC(v, a, y0, y1);\n    // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n    xor0 = v[d] ^ v[a];\n    xor1 = v[d + 1] ^ v[a + 1];\n    v[d] = xor0 >>> 16 ^ xor1 << 16;\n    v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n    ADD64AA(v, c, d);\n    // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n    xor0 = v[b] ^ v[c];\n    xor1 = v[b + 1] ^ v[c + 1];\n    v[b] = xor1 >>> 31 ^ xor0 << 1;\n    v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n}\n// Initialization Vector\nconst BLAKE2B_IV32 = new Uint32Array([\n    0xf3bcc908,\n    0x6a09e667,\n    0x84caa73b,\n    0xbb67ae85,\n    0xfe94f82b,\n    0x3c6ef372,\n    0x5f1d36f1,\n    0xa54ff53a,\n    0xade682d1,\n    0x510e527f,\n    0x2b3e6c1f,\n    0x9b05688c,\n    0xfb41bd6b,\n    0x1f83d9ab,\n    0x137e2179,\n    0x5be0cd19\n]);\nconst SIGMA8 = [\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3,\n    11,\n    8,\n    12,\n    0,\n    5,\n    2,\n    15,\n    13,\n    10,\n    14,\n    3,\n    6,\n    7,\n    1,\n    9,\n    4,\n    7,\n    9,\n    3,\n    1,\n    13,\n    12,\n    11,\n    14,\n    2,\n    6,\n    5,\n    10,\n    4,\n    0,\n    15,\n    8,\n    9,\n    0,\n    5,\n    7,\n    2,\n    4,\n    10,\n    15,\n    14,\n    1,\n    11,\n    12,\n    6,\n    8,\n    3,\n    13,\n    2,\n    12,\n    6,\n    10,\n    0,\n    11,\n    8,\n    3,\n    4,\n    13,\n    7,\n    5,\n    15,\n    14,\n    1,\n    9,\n    12,\n    5,\n    1,\n    15,\n    14,\n    13,\n    4,\n    10,\n    0,\n    7,\n    6,\n    3,\n    9,\n    2,\n    8,\n    11,\n    13,\n    11,\n    7,\n    14,\n    12,\n    1,\n    3,\n    9,\n    5,\n    0,\n    15,\n    4,\n    8,\n    6,\n    2,\n    10,\n    6,\n    15,\n    14,\n    9,\n    11,\n    3,\n    0,\n    8,\n    12,\n    2,\n    13,\n    7,\n    1,\n    4,\n    10,\n    5,\n    10,\n    2,\n    8,\n    4,\n    7,\n    6,\n    1,\n    5,\n    15,\n    11,\n    9,\n    14,\n    3,\n    12,\n    13,\n    0,\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3\n];\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nconst SIGMA82 = new Uint8Array(SIGMA8.map(function(x) {\n    return x * 2;\n}));\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nconst v = new Uint32Array(32);\nconst m = new Uint32Array(32);\nfunction blake2bCompress(ctx, last) {\n    let i = 0;\n    // init work variables\n    for(i = 0; i < 16; i++){\n        v[i] = ctx.h[i];\n        v[i + 16] = BLAKE2B_IV32[i];\n    }\n    // low 64 bits of offset\n    v[24] = v[24] ^ ctx.t;\n    v[25] = v[25] ^ ctx.t / 0x100000000;\n    // high 64 bits not supported, offset may not be higher than 2**53-1\n    // last block flag set ?\n    if (last) {\n        v[28] = ~v[28];\n        v[29] = ~v[29];\n    }\n    // get little-endian words\n    for(i = 0; i < 32; i++){\n        m[i] = B2B_GET32(ctx.b, 4 * i);\n    }\n    // twelve rounds of mixing\n    // uncomment the DebugPrint calls to log the computation\n    // and match the RFC sample documentation\n    // util.debugPrint('          m[16]', m, 64)\n    for(i = 0; i < 12; i++){\n        // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n        B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n        B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n        B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n        B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n        B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n        B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n        B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n        B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n    }\n    // util.debugPrint('   (i=12) v[16]', v, 64)\n    for(i = 0; i < 16; i++){\n        ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n    }\n// util.debugPrint('h[8]', ctx.h, 64)\n}\n// reusable parameterBlock\nconst parameterBlock = new Uint8Array([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0 // 60: personal\n]);\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n// Takes an optinal Uint8Array salt\n// Takes an optinal Uint8Array personal\nfunction blake2bInit(outlen, key, salt, personal) {\n    if (outlen === 0 || outlen > 64) {\n        throw new Error(\"Illegal output length, expected 0 < length <= 64\");\n    }\n    if (key && key.length > 64) {\n        throw new Error(\"Illegal key, expected Uint8Array with 0 < length <= 64\");\n    }\n    if (salt && salt.length !== 16) {\n        throw new Error(\"Illegal salt, expected Uint8Array with length is 16\");\n    }\n    if (personal && personal.length !== 16) {\n        throw new Error(\"Illegal personal, expected Uint8Array with length is 16\");\n    }\n    // state, 'param block'\n    const ctx = {\n        b: new Uint8Array(128),\n        h: new Uint32Array(16),\n        t: 0,\n        c: 0,\n        outlen: outlen // output length in bytes\n    };\n    // initialize parameterBlock before usage\n    parameterBlock.fill(0);\n    parameterBlock[0] = outlen;\n    if (key) parameterBlock[1] = key.length;\n    parameterBlock[2] = 1 // fanout\n    ;\n    parameterBlock[3] = 1 // depth\n    ;\n    if (salt) parameterBlock.set(salt, 32);\n    if (personal) parameterBlock.set(personal, 48);\n    // initialize hash state\n    for(let i = 0; i < 16; i++){\n        ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);\n    }\n    // key the hash, if applicable\n    if (key) {\n        blake2bUpdate(ctx, key);\n        // at the end\n        ctx.c = 128;\n    }\n    return ctx;\n}\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate(ctx, input) {\n    for(let i = 0; i < input.length; i++){\n        if (ctx.c === 128) {\n            // buffer full ?\n            ctx.t += ctx.c // add counters\n            ;\n            blake2bCompress(ctx, false) // compress (not last)\n            ;\n            ctx.c = 0 // counter to zero\n            ;\n        }\n        ctx.b[ctx.c++] = input[i];\n    }\n}\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal(ctx) {\n    ctx.t += ctx.c // mark last block offset\n    ;\n    while(ctx.c < 128){\n        // fill up with zeros\n        ctx.b[ctx.c++] = 0;\n    }\n    blake2bCompress(ctx, true) // final block flag = 1\n    ;\n    // little endian convert and store\n    const out = new Uint8Array(ctx.outlen);\n    for(let i = 0; i < ctx.outlen; i++){\n        out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n    }\n    return out;\n}\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2b(input, key, outlen, salt, personal) {\n    // preprocess inputs\n    outlen = outlen || 64;\n    input = util.normalizeInput(input);\n    if (salt) {\n        salt = util.normalizeInput(salt);\n    }\n    if (personal) {\n        personal = util.normalizeInput(personal);\n    }\n    // do the math\n    const ctx = blake2bInit(outlen, key, salt, personal);\n    blake2bUpdate(ctx, input);\n    return blake2bFinal(ctx);\n}\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2bHex(input, key, outlen, salt, personal) {\n    const output = blake2b(input, key, outlen, salt, personal);\n    return util.toHex(output);\n}\nmodule.exports = {\n    blake2b: blake2b,\n    blake2bHex: blake2bHex,\n    blake2bInit: blake2bInit,\n    blake2bUpdate: blake2bUpdate,\n    blake2bFinal: blake2bFinal\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmxha2Vqcy9ibGFrZTJiLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QjtBQUM3Qix1REFBdUQ7QUFDdkQsMERBQTBEOztBQUUxRCxNQUFNQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVyQiwyQkFBMkI7QUFDM0IsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QixTQUFTQyxRQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQztJQUN2QixNQUFNQyxLQUFLSCxDQUFDLENBQUNDLEVBQUUsR0FBR0QsQ0FBQyxDQUFDRSxFQUFFO0lBQ3RCLElBQUlFLEtBQUtKLENBQUMsQ0FBQ0MsSUFBSSxFQUFFLEdBQUdELENBQUMsQ0FBQ0UsSUFBSSxFQUFFO0lBQzVCLElBQUlDLE1BQU0sYUFBYTtRQUNyQkM7SUFDRjtJQUNBSixDQUFDLENBQUNDLEVBQUUsR0FBR0U7SUFDUEgsQ0FBQyxDQUFDQyxJQUFJLEVBQUUsR0FBR0c7QUFDYjtBQUVBLDJCQUEyQjtBQUMzQixxQkFBcUI7QUFDckIsNkRBQTZEO0FBQzdELFNBQVNDLFFBQVNMLENBQUMsRUFBRUMsQ0FBQyxFQUFFSyxFQUFFLEVBQUVDLEVBQUU7SUFDNUIsSUFBSUosS0FBS0gsQ0FBQyxDQUFDQyxFQUFFLEdBQUdLO0lBQ2hCLElBQUlBLEtBQUssR0FBRztRQUNWSCxNQUFNO0lBQ1I7SUFDQSxJQUFJQyxLQUFLSixDQUFDLENBQUNDLElBQUksRUFBRSxHQUFHTTtJQUNwQixJQUFJSixNQUFNLGFBQWE7UUFDckJDO0lBQ0Y7SUFDQUosQ0FBQyxDQUFDQyxFQUFFLEdBQUdFO0lBQ1BILENBQUMsQ0FBQ0MsSUFBSSxFQUFFLEdBQUdHO0FBQ2I7QUFFQSw0QkFBNEI7QUFDNUIsU0FBU0ksVUFBV0MsR0FBRyxFQUFFQyxDQUFDO0lBQ3hCLE9BQU9ELEdBQUcsQ0FBQ0MsRUFBRSxHQUFJRCxHQUFHLENBQUNDLElBQUksRUFBRSxJQUFJLElBQU1ELEdBQUcsQ0FBQ0MsSUFBSSxFQUFFLElB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UTtJQUNyRCxNQUFNWSxTQUFTSCxRQUFRSCxPQUFPUixLQUFLRCxRQUFRRSxNQUFNQztJQUNqRCxPQUFPM0MsS0FBS3dELEtBQUssQ0FBQ0Q7QUFDcEI7QUFFQUUsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZOLFNBQVNBO0lBQ1RFLFlBQVlBO0lBQ1pmLGFBQWFBO0lBQ2JTLGVBQWVBO0lBQ2ZFLGNBQWNBO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHdycGVya3MvLi9ub2RlX21vZHVsZXMvYmxha2Vqcy9ibGFrZTJiLmpzP2RkODYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQmxha2UyQiBpbiBwdXJlIEphdmFzY3JpcHRcbi8vIEFkYXB0ZWQgZnJvbSB0aGUgcmVmZXJlbmNlIGltcGxlbWVudGF0aW9uIGluIFJGQzc2OTNcbi8vIFBvcnRlZCB0byBKYXZhc2NyaXB0IGJ5IERDIC0gaHR0cHM6Ly9naXRodWIuY29tL2RjcG9zY2hcblxuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpXG5cbi8vIDY0LWJpdCB1bnNpZ25lZCBhZGRpdGlvblxuLy8gU2V0cyB2W2EsYSsxXSArPSB2W2IsYisxXVxuLy8gdiBzaG91bGQgYmUgYSBVaW50MzJBcnJheVxuZnVuY3Rpb24gQURENjRBQSAodiwgYSwgYikge1xuICBjb25zdCBvMCA9IHZbYV0gKyB2W2JdXG4gIGxldCBvMSA9IHZbYSArIDFdICsgdltiICsgMV1cbiAgaWYgKG8wID49IDB4MTAwMDAwMDAwKSB7XG4gICAgbzErK1xuICB9XG4gIHZbYV0gPSBvMFxuICB2W2EgKyAxXSA9IG8xXG59XG5cbi8vIDY0LWJpdCB1bnNpZ25lZCBhZGRpdGlvblxuLy8gU2V0cyB2W2EsYSsxXSArPSBiXG4vLyBiMCBpcyB0aGUgbG93IDMyIGJpdHMgb2YgYiwgYjEgcmVwcmVzZW50cyB0aGUgaGlnaCAzMiBiaXRzXG5mdW5jdGlvbiBBREQ2NEFDICh2LCBhLCBiMCwgYjEpIHtcbiAgbGV0IG8wID0gdlthXSArIGIwXG4gIGlmIChiMCA8IDApIHtcbiAgICBvMCArPSAweDEwMDAwMDAwMFxuICB9XG4gIGxldCBvMSA9IHZbYSArIDFdICsgYjFcbiAgaWYgKG8wID49IDB4MTAwMDAwMDAwKSB7XG4gICAgbzErK1xuICB9XG4gIHZbYV0gPSBvMFxuICB2W2EgKyAxXSA9IG8xXG59XG5cbi8vIExpdHRsZS1lbmRpYW4gYnl0ZSBhY2Nlc3NcbmZ1bmN0aW9uIEIyQl9HRVQzMiAoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJbaV0gXiAoYXJyW2kgKyAxXSA8PCA4KSBeIChhcnJbaSArIDJdIDw8IDE2KSBeIChhcnJbaSArIDNdIDw8IDI0KVxufVxuXG4vLyBHIE1peGluZyBmdW5jdGlvblxuLy8gVGhlIFJPVFJzIGFyZSBpbmxpbmVkIGZvciBzcGVlZFxuZnVuY3Rpb24gQjJCX0cgKGEsIGIsIGMsIGQsIGl4LCBpeSkge1xuICBjb25zdCB4MCA9IG1baXhdXG4gIGNvbnN0IHgxID0gbVtpeCArIDFdXG4gIGNvbnN0IHkwID0gbVtpeV1cbiAgY29uc3QgeTEgPSBtW2l5ICsgMV1cblxuICBBREQ2NEFBKHYsIGEsIGIpIC8vIHZbYSxhKzFdICs9IHZbYixiKzFdIC4uLiBpbiBKUyB3ZSBtdXN0IHN0b3JlIGEgdWludDY0IGFzIHR3byB1aW50MzJzXG4gIEFERDY0QUModiwgYSwgeDAsIHgxKSAvLyB2W2EsIGErMV0gKz0geCAuLi4geDAgaXMgdGhlIGxvdyAzMiBiaXRzIG9mIHgsIHgxIGlzIHRoZSBoaWdoIDMyIGJpdHNcblxuICAvLyB2W2QsZCsxXSA9ICh2W2QsZCsxXSB4b3IgdlthLGErMV0pIHJvdGF0ZWQgdG8gdGhlIHJpZ2h0IGJ5IDMyIGJpdHNcbiAgbGV0IHhvcjAgPSB2W2RdIF4gdlthXVxuICBsZXQgeG9yMSA9IHZbZCArIDFdIF4gdlthICsgMV1cbiAgdltkXSA9IHhvcjFcbiAgdltkICsgMV0gPSB4b3IwXG5cbiAgQURENjRBQSh2LCBjLCBkKVxuXG4gIC8vIHZbYixiKzFdID0gKHZbYixiKzFdIHhvciB2W2MsYysxXSkgcm90YXRlZCByaWdodCBieSAyNCBiaXRzXG4gIHhvcjAgPSB2W2JdIF4gdltjXVxuICB4b3IxID0gdltiICsgMV0gXiB2W2MgKyAxXVxuICB2W2JdID0gKHhvcjAgPj4+IDI0KSBeICh4b3IxIDw8IDgpXG4gIHZbYiArIDFdID0gKHhvcjEgPj4+IDI0KSBeICh4b3IwIDw8IDgpXG5cbiAgQURENjRBQSh2LCBhLCBiKVxuICBBREQ2NEFDKHYsIGEsIHkwLCB5MSlcblxuICAvLyB2W2QsZCsxXSA9ICh2W2QsZCsxXSB4b3IgdlthLGErMV0pIHJvdGF0ZWQgcmlnaHQgYnkgMTYgYml0c1xuICB4b3IwID0gdltkXSBeIHZbYV1cbiAgeG9yMSA9IHZbZCArIDFdIF4gdlthICsgMV1cbiAgdltkXSA9ICh4b3IwID4+PiAxNikgXiAoeG9yMSA8PCAxNilcbiAgdltkICsgMV0gPSAoeG9yMSA+Pj4gMTYpIF4gKHhvcjAgPDwgMTYpXG5cbiAgQURENjRBQSh2LCBjLCBkKVxuXG4gIC8vIHZbYixiKzFdID0gKHZbYixiKzFdIHhvciB2W2MsYysxXSkgcm90YXRlZCByaWdodCBieSA2MyBiaXRzXG4gIHhvcjAgPSB2W2JdIF4gdltjXVxuICB4b3IxID0gdltiICsgMV0gXiB2W2MgKyAxXVxuICB2W2JdID0gKHhvcjEgPj4+IDMxKSBeICh4b3IwIDw8IDEpXG4gIHZbYiArIDFdID0gKHhvcjAgPj4+IDMxKSBeICh4b3IxIDw8IDEpXG59XG5cbi8vIEluaXRpYWxpemF0aW9uIFZlY3RvclxuY29uc3QgQkxBS0UyQl9JVjMyID0gbmV3IFVpbnQzMkFycmF5KFtcbiAgMHhmM2JjYzkwOCwgMHg2YTA5ZTY2NywgMHg4NGNhYTczYiwgMHhiYjY3YWU4NSwgMHhmZTk0ZjgyYiwgMHgzYzZlZjM3MixcbiAgMHg1ZjFkMzZmMSwgMHhhNTRmZjUzYSwgMHhhZGU2ODJkMSwgMHg1MTBlNTI3ZiwgMHgyYjNlNmMxZiwgMHg5YjA1Njg4YyxcbiAgMHhmYjQxYmQ2YiwgMHgxZjgzZDlhYiwgMHgxMzdlMjE3OSwgMHg1YmUwY2QxOVxuXSlcblxuY29uc3QgU0lHTUE4ID0gW1xuICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNCwgMTAsIDQsIDgsIDksIDE1LCAxMyxcbiAgNiwgMSwgMTIsIDAsIDIsIDExLCA3LCA1LCAzLCAxMSwgOCwgMTIsIDAsIDUsIDIsIDE1LCAxMywgMTAsIDE0LCAzLCA2LCA3LCAxLFxuICA5LCA0LCA3LCA5LCAzLCAxLCAxMywgMTIsIDExLCAxNCwgMiwgNiwgNSwgMTAsIDQsIDAsIDE1LCA4LCA5LCAwLCA1LCA3LCAyLCA0LFxuICAxMCwgMTUsIDE0LCAxLCAxMSwgMTIsIDYsIDgsIDMsIDEzLCAyLCAxMiwgNiwgMTAsIDAsIDExLCA4LCAzLCA0LCAxMywgNywgNSxcbiAgMTUsIDE0LCAxLCA5LCAxMiwgNSwgMSwgMTUsIDE0LCAxMywgNCwgMTAsIDAsIDcsIDYsIDMsIDksIDIsIDgsIDExLCAxMywgMTEsIDcsXG4gIDE0LCAxMiwgMSwgMywgOSwgNSwgMCwgMTUsIDQsIDgsIDYsIDIsIDEwLCA2LCAxNSwgMTQsIDksIDExLCAzLCAwLCA4LCAxMiwgMixcbiAgMTMsIDcsIDEsIDQsIDEwLCA1LCAxMCwgMiwgOCwgNCwgNywgNiwgMSwgNSwgMTUsIDExLCA5LCAxNCwgMywgMTIsIDEzLCAwLCAwLFxuICAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LCAxNCwgMTAsIDQsIDgsIDksIDE1LCAxMywgNixcbiAgMSwgMTIsIDAsIDIsIDExLCA3LCA1LCAzXG5dXG5cbi8vIFRoZXNlIGFyZSBvZmZzZXRzIGludG8gYSB1aW50NjQgYnVmZmVyLlxuLy8gTXVsdGlwbHkgdGhlbSBhbGwgYnkgMiB0byBtYWtlIHRoZW0gb2Zmc2V0cyBpbnRvIGEgdWludDMyIGJ1ZmZlcixcbi8vIGJlY2F1c2UgdGhpcyBpcyBKYXZhc2NyaXB0IGFuZCB3ZSBkb24ndCBoYXZlIHVpbnQ2NHNcbmNvbnN0IFNJR01BODIgPSBuZXcgVWludDhBcnJheShcbiAgU0lHTUE4Lm1hcChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4ICogMlxuICB9KVxuKVxuXG4vLyBDb21wcmVzc2lvbiBmdW5jdGlvbi4gJ2xhc3QnIGZsYWcgaW5kaWNhdGVzIGxhc3QgYmxvY2suXG4vLyBOb3RlIHdlJ3JlIHJlcHJlc2VudGluZyAxNiB1aW50NjRzIGFzIDMyIHVpbnQzMnNcbmNvbnN0IHYgPSBuZXcgVWludDMyQXJyYXkoMzIpXG5jb25zdCBtID0gbmV3IFVpbnQzMkFycmF5KDMyKVxuZnVuY3Rpb24gYmxha2UyYkNvbXByZXNzIChjdHgsIGxhc3QpIHtcbiAgbGV0IGkgPSAwXG5cbiAgLy8gaW5pdCB3b3JrIHZhcmlhYmxlc1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIHZbaV0gPSBjdHguaFtpXVxuICAgIHZbaSArIDE2XSA9IEJMQUtFMkJfSVYzMltpXVxuICB9XG5cbiAgLy8gbG93IDY0IGJpdHMgb2Ygb2Zmc2V0XG4gIHZbMjRdID0gdlsyNF0gXiBjdHgudFxuICB2WzI1XSA9IHZbMjVdIF4gKGN0eC50IC8gMHgxMDAwMDAwMDApXG4gIC8vIGhpZ2ggNjQgYml0cyBub3Qgc3VwcG9ydGVkLCBvZmZzZXQgbWF5IG5vdCBiZSBoaWdoZXIgdGhhbiAyKio1My0xXG5cbiAgLy8gbGFzdCBibG9jayBmbGFnIHNldCA/XG4gIGlmIChsYXN0KSB7XG4gICAgdlsyOF0gPSB+dlsyOF1cbiAgICB2WzI5XSA9IH52WzI5XVxuICB9XG5cbiAgLy8gZ2V0IGxpdHRsZS1lbmRpYW4gd29yZHNcbiAgZm9yIChpID0gMDsgaSA8IDMyOyBpKyspIHtcbiAgICBtW2ldID0gQjJCX0dFVDMyKGN0eC5iLCA0ICogaSlcbiAgfVxuXG4gIC8vIHR3ZWx2ZSByb3VuZHMgb2YgbWl4aW5nXG4gIC8vIHVuY29tbWVudCB0aGUgRGVidWdQcmludCBjYWxscyB0byBsb2cgdGhlIGNvbXB1dGF0aW9uXG4gIC8vIGFuZCBtYXRjaCB0aGUgUkZDIHNhbXBsZSBkb2N1bWVudGF0aW9uXG4gIC8vIHV0aWwuZGVidWdQcmludCgnICAgICAgICAgIG1bMTZdJywgbSwgNjQpXG4gIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgLy8gdXRpbC5kZWJ1Z1ByaW50KCcgICAoaT0nICsgKGkgPCAxMCA/ICcgJyA6ICcnKSArIGkgKyAnKSB2WzE2XScsIHYsIDY0KVxuICAgIEIyQl9HKDAsIDgsIDE2LCAyNCwgU0lHTUE4MltpICogMTYgKyAwXSwgU0lHTUE4MltpICogMTYgKyAxXSlcbiAgICBCMkJfRygyLCAxMCwgMTgsIDI2LCBTSUdNQTgyW2kgKiAxNiArIDJdLCBTSUdNQTgyW2kgKiAxNiArIDNdKVxuICAgIEIyQl9HKDQsIDEyLCAyMCwgMjgsIFNJR01BODJbaSAqIDE2ICsgNF0sIFNJR01BODJbaSAqIDE2ICsgNV0pXG4gICAgQjJCX0coNiwgMTQsIDIyLCAzMCwgU0lHTUE4MltpICogMTYgKyA2XSwgU0lHTUE4MltpICogMTYgKyA3XSlcbiAgICBCMkJfRygwLCAxMCwgMjAsIDMwLCBTSUdNQTgyW2kgKiAxNiArIDhdLCBTSUdNQTgyW2kgKiAxNiArIDldKVxuICAgIEIyQl9HKDIsIDEyLCAyMiwgMjQsIFNJR01BODJbaSAqIDE2ICsgMTBdLCBTSUdNQTgyW2kgKiAxNiArIDExXSlcbiAgICBCMkJfRyg0LCAxNCwgMTYsIDI2LCBTSUdNQTgyW2kgKiAxNiArIDEyXSwgU0lHTUE4MltpICogMTYgKyAxM10pXG4gICAgQjJCX0coNiwgOCwgMTgsIDI4LCBTSUdNQTgyW2kgKiAxNiArIDE0XSwgU0lHTUE4MltpICogMTYgKyAxNV0pXG4gIH1cbiAgLy8gdXRpbC5kZWJ1Z1ByaW50KCcgICAoaT0xMikgdlsxNl0nLCB2LCA2NClcblxuICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIGN0eC5oW2ldID0gY3R4LmhbaV0gXiB2W2ldIF4gdltpICsgMTZdXG4gIH1cbiAgLy8gdXRpbC5kZWJ1Z1ByaW50KCdoWzhdJywgY3R4LmgsIDY0KVxufVxuXG4vLyByZXVzYWJsZSBwYXJhbWV0ZXJCbG9ja1xuY29uc3QgcGFyYW1ldGVyQmxvY2sgPSBuZXcgVWludDhBcnJheShbXG4gIDAsXG4gIDAsXG4gIDAsXG4gIDAsIC8vICAwOiBvdXRsZW4sIGtleWxlbiwgZmFub3V0LCBkZXB0aFxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyAgNDogbGVhZiBsZW5ndGgsIHNlcXVlbnRpYWwgbW9kZVxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyAgODogbm9kZSBvZmZzZXRcbiAgMCxcbiAgMCxcbiAgMCxcbiAgMCwgLy8gMTI6IG5vZGUgb2Zmc2V0XG4gIDAsXG4gIDAsXG4gIDAsXG4gIDAsIC8vIDE2OiBub2RlIGRlcHRoLCBpbm5lciBsZW5ndGgsIHJmdVxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyAyMDogcmZ1XG4gIDAsXG4gIDAsXG4gIDAsXG4gIDAsIC8vIDI0OiByZnVcbiAgMCxcbiAgMCxcbiAgMCxcbiAgMCwgLy8gMjg6IHJmdVxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyAzMjogc2FsdFxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyAzNjogc2FsdFxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyA0MDogc2FsdFxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyA0NDogc2FsdFxuICAwLFxuICAwLFxuICAwLFxuICAwLCAvLyA0ODogcGVyc29uYWxcbiAgMCxcbiAgMCxcbiAgMCxcbiAgMCwgLy8gNTI6IHBlcnNvbmFsXG4gIDAsXG4gIDAsXG4gIDAsXG4gIDAsIC8vIDU2OiBwZXJzb25hbFxuICAwLFxuICAwLFxuICAwLFxuICAwIC8vIDYwOiBwZXJzb25hbFxuXSlcblxuLy8gQ3JlYXRlcyBhIEJMQUtFMmIgaGFzaGluZyBjb250ZXh0XG4vLyBSZXF1aXJlcyBhbiBvdXRwdXQgbGVuZ3RoIGJldHdlZW4gMSBhbmQgNjQgYnl0ZXNcbi8vIFRha2VzIGFuIG9wdGlvbmFsIFVpbnQ4QXJyYXkga2V5XG4vLyBUYWtlcyBhbiBvcHRpbmFsIFVpbnQ4QXJyYXkgc2FsdFxuLy8gVGFrZXMgYW4gb3B0aW5hbCBVaW50OEFycmF5IHBlcnNvbmFsXG5mdW5jdGlvbiBibGFrZTJiSW5pdCAob3V0bGVuLCBrZXksIHNhbHQsIHBlcnNvbmFsKSB7XG4gIGlmIChvdXRsZW4gPT09IDAgfHwgb3V0bGVuID4gNjQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgb3V0cHV0IGxlbmd0aCwgZXhwZWN0ZWQgMCA8IGxlbmd0aCA8PSA2NCcpXG4gIH1cbiAgaWYgKGtleSAmJiBrZXkubGVuZ3RoID4gNjQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwga2V5LCBleHBlY3RlZCBVaW50OEFycmF5IHdpdGggMCA8IGxlbmd0aCA8PSA2NCcpXG4gIH1cbiAgaWYgKHNhbHQgJiYgc2FsdC5sZW5ndGggIT09IDE2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHNhbHQsIGV4cGVjdGVkIFVpbnQ4QXJyYXkgd2l0aCBsZW5ndGggaXMgMTYnKVxuICB9XG4gIGlmIChwZXJzb25hbCAmJiBwZXJzb25hbC5sZW5ndGggIT09IDE2KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIHBlcnNvbmFsLCBleHBlY3RlZCBVaW50OEFycmF5IHdpdGggbGVuZ3RoIGlzIDE2JylcbiAgfVxuXG4gIC8vIHN0YXRlLCAncGFyYW0gYmxvY2snXG4gIGNvbnN0IGN0eCA9IHtcbiAgICBiOiBuZXcgVWludDhBcnJheSgxMjgpLFxuICAgIGg6IG5ldyBVaW50MzJBcnJheSgxNiksXG4gICAgdDogMCwgLy8gaW5wdXQgY291bnRcbiAgICBjOiAwLCAvLyBwb2ludGVyIHdpdGhpbiBidWZmZXJcbiAgICBvdXRsZW46IG91dGxlbiAvLyBvdXRwdXQgbGVuZ3RoIGluIGJ5dGVzXG4gIH1cblxuICAvLyBpbml0aWFsaXplIHBhcmFtZXRlckJsb2NrIGJlZm9yZSB1c2FnZVxuICBwYXJhbWV0ZXJCbG9jay5maWxsKDApXG4gIHBhcmFtZXRlckJsb2NrWzBdID0gb3V0bGVuXG4gIGlmIChrZXkpIHBhcmFtZXRlckJsb2NrWzFdID0ga2V5Lmxlbmd0aFxuICBwYXJhbWV0ZXJCbG9ja1syXSA9IDEgLy8gZmFub3V0XG4gIHBhcmFtZXRlckJsb2NrWzNdID0gMSAvLyBkZXB0aFxuICBpZiAoc2FsdCkgcGFyYW1ldGVyQmxvY2suc2V0KHNhbHQsIDMyKVxuICBpZiAocGVyc29uYWwpIHBhcmFtZXRlckJsb2NrLnNldChwZXJzb25hbCwgNDgpXG5cbiAgLy8gaW5pdGlhbGl6ZSBoYXNoIHN0YXRlXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgIGN0eC5oW2ldID0gQkxBS0UyQl9JVjMyW2ldIF4gQjJCX0dFVDMyKHBhcmFtZXRlckJsb2NrLCBpICogNClcbiAgfVxuXG4gIC8vIGtleSB0aGUgaGFzaCwgaWYgYXBwbGljYWJsZVxuICBpZiAoa2V5KSB7XG4gICAgYmxha2UyYlVwZGF0ZShjdHgsIGtleSlcbiAgICAvLyBhdCB0aGUgZW5kXG4gICAgY3R4LmMgPSAxMjhcbiAgfVxuXG4gIHJldHVybiBjdHhcbn1cblxuLy8gVXBkYXRlcyBhIEJMQUtFMmIgc3RyZWFtaW5nIGhhc2hcbi8vIFJlcXVpcmVzIGhhc2ggY29udGV4dCBhbmQgVWludDhBcnJheSAoYnl0ZSBhcnJheSlcbmZ1bmN0aW9uIGJsYWtlMmJVcGRhdGUgKGN0eCwgaW5wdXQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjdHguYyA9PT0gMTI4KSB7XG4gICAgICAvLyBidWZmZXIgZnVsbCA/XG4gICAgICBjdHgudCArPSBjdHguYyAvLyBhZGQgY291bnRlcnNcbiAgICAgIGJsYWtlMmJDb21wcmVzcyhjdHgsIGZhbHNlKSAvLyBjb21wcmVzcyAobm90IGxhc3QpXG4gICAgICBjdHguYyA9IDAgLy8gY291bnRlciB0byB6ZXJvXG4gICAgfVxuICAgIGN0eC5iW2N0eC5jKytdID0gaW5wdXRbaV1cbiAgfVxufVxuXG4vLyBDb21wbGV0ZXMgYSBCTEFLRTJiIHN0cmVhbWluZyBoYXNoXG4vLyBSZXR1cm5zIGEgVWludDhBcnJheSBjb250YWluaW5nIHRoZSBtZXNzYWdlIGRpZ2VzdFxuZnVuY3Rpb24gYmxha2UyYkZpbmFsIChjdHgpIHtcbiAgY3R4LnQgKz0gY3R4LmMgLy8gbWFyayBsYXN0IGJsb2NrIG9mZnNldFxuXG4gIHdoaWxlIChjdHguYyA8IDEyOCkge1xuICAgIC8vIGZpbGwgdXAgd2l0aCB6ZXJvc1xuICAgIGN0eC5iW2N0eC5jKytdID0gMFxuICB9XG4gIGJsYWtlMmJDb21wcmVzcyhjdHgsIHRydWUpIC8vIGZpbmFsIGJsb2NrIGZsYWcgPSAxXG5cbiAgLy8gbGl0dGxlIGVuZGlhbiBjb252ZXJ0IGFuZCBzdG9yZVxuICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShjdHgub3V0bGVuKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGN0eC5vdXRsZW47IGkrKykge1xuICAgIG91dFtpXSA9IGN0eC5oW2kgPj4gMl0gPj4gKDggKiAoaSAmIDMpKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIEJMQUtFMkIgaGFzaCBvZiBhIHN0cmluZyBvciBieXRlIGFycmF5LCBhbmQgcmV0dXJucyBhIFVpbnQ4QXJyYXlcbi8vXG4vLyBSZXR1cm5zIGEgbi1ieXRlIFVpbnQ4QXJyYXlcbi8vXG4vLyBQYXJhbWV0ZXJzOlxuLy8gLSBpbnB1dCAtIHRoZSBpbnB1dCBieXRlcywgYXMgYSBzdHJpbmcsIEJ1ZmZlciBvciBVaW50OEFycmF5XG4vLyAtIGtleSAtIG9wdGlvbmFsIGtleSBVaW50OEFycmF5LCB1cCB0byA2NCBieXRlc1xuLy8gLSBvdXRsZW4gLSBvcHRpb25hbCBvdXRwdXQgbGVuZ3RoIGluIGJ5dGVzLCBkZWZhdWx0IDY0XG4vLyAtIHNhbHQgLSBvcHRpb25hbCBzYWx0IGJ5dGVzLCBzdHJpbmcsIEJ1ZmZlciBvciBVaW50OEFycmF5XG4vLyAtIHBlcnNvbmFsIC0gb3B0aW9uYWwgcGVyc29uYWwgYnl0ZXMsIHN0cmluZywgQnVmZmVyIG9yIFVpbnQ4QXJyYXlcbmZ1bmN0aW9uIGJsYWtlMmIgKGlucHV0LCBrZXksIG91dGxlbiwgc2FsdCwgcGVyc29uYWwpIHtcbiAgLy8gcHJlcHJvY2VzcyBpbnB1dHNcbiAgb3V0bGVuID0gb3V0bGVuIHx8IDY0XG4gIGlucHV0ID0gdXRpbC5ub3JtYWxpemVJbnB1dChpbnB1dClcbiAgaWYgKHNhbHQpIHtcbiAgICBzYWx0ID0gdXRpbC5ub3JtYWxpemVJbnB1dChzYWx0KVxuICB9XG4gIGlmIChwZXJzb25hbCkge1xuICAgIHBlcnNvbmFsID0gdXRpbC5ub3JtYWxpemVJbnB1dChwZXJzb25hbClcbiAgfVxuXG4gIC8vIGRvIHRoZSBtYXRoXG4gIGNvbnN0IGN0eCA9IGJsYWtlMmJJbml0KG91dGxlbiwga2V5LCBzYWx0LCBwZXJzb25hbClcbiAgYmxha2UyYlVwZGF0ZShjdHgsIGlucHV0KVxuICByZXR1cm4gYmxha2UyYkZpbmFsKGN0eClcbn1cblxuLy8gQ29tcHV0ZXMgdGhlIEJMQUtFMkIgaGFzaCBvZiBhIHN0cmluZyBvciBieXRlIGFycmF5XG4vL1xuLy8gUmV0dXJucyBhbiBuLWJ5dGUgaGFzaCBpbiBoZXgsIGFsbCBsb3dlcmNhc2Vcbi8vXG4vLyBQYXJhbWV0ZXJzOlxuLy8gLSBpbnB1dCAtIHRoZSBpbnB1dCBieXRlcywgYXMgYSBzdHJpbmcsIEJ1ZmZlciwgb3IgVWludDhBcnJheVxuLy8gLSBrZXkgLSBvcHRpb25hbCBrZXkgVWludDhBcnJheSwgdXAgdG8gNjQgYnl0ZXNcbi8vIC0gb3V0bGVuIC0gb3B0aW9uYWwgb3V0cHV0IGxlbmd0aCBpbiBieXRlcywgZGVmYXVsdCA2NFxuLy8gLSBzYWx0IC0gb3B0aW9uYWwgc2FsdCBieXRlcywgc3RyaW5nLCBCdWZmZXIgb3IgVWludDhBcnJheVxuLy8gLSBwZXJzb25hbCAtIG9wdGlvbmFsIHBlcnNvbmFsIGJ5dGVzLCBzdHJpbmcsIEJ1ZmZlciBvciBVaW50OEFycmF5XG5mdW5jdGlvbiBibGFrZTJiSGV4IChpbnB1dCwga2V5LCBvdXRsZW4sIHNhbHQsIHBlcnNvbmFsKSB7XG4gIGNvbnN0IG91dHB1dCA9IGJsYWtlMmIoaW5wdXQsIGtleSwgb3V0bGVuLCBzYWx0LCBwZXJzb25hbClcbiAgcmV0dXJuIHV0aWwudG9IZXgob3V0cHV0KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYmxha2UyYjogYmxha2UyYixcbiAgYmxha2UyYkhleDogYmxha2UyYkhleCxcbiAgYmxha2UyYkluaXQ6IGJsYWtlMmJJbml0LFxuICBibGFrZTJiVXBkYXRlOiBibGFrZTJiVXBkYXRlLFxuICBibGFrZTJiRmluYWw6IGJsYWtlMmJGaW5hbFxufVxuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiQURENjRBQSIsInYiLCJhIiwiYiIsIm8wIiwibzEiLCJBREQ2NEFDIiwiYjAiLCJiMSIsIkIyQl9HRVQzMiIsImFyciIsImkiLCJCMkJfRyIsImMiLCJkIiwiaXgiLCJpeSIsIngwIiwibSIsIngxIiwieTAiLCJ5MSIsInhvcjAiLCJ4b3IxIiwiQkxBS0UyQl9JVjMyIiwiVWludDMyQXJyYXkiLCJTSUdNQTgiLCJTSUdNQTgyIiwiVWludDhBcnJheSIsIm1hcCIsIngiLCJibGFrZTJiQ29tcHJlc3MiLCJjdHgiLCJsYXN0IiwiaCIsInQiLCJwYXJhbWV0ZXJCbG9jayIsImJsYWtlMmJJbml0Iiwib3V0bGVuIiwia2V5Iiwic2FsdCIsInBlcnNvbmFsIiwiRXJyb3IiLCJsZW5ndGgiLCJmaWxsIiwic2V0IiwiYmxha2UyYlVwZGF0ZSIsImlucHV0IiwiYmxha2UyYkZpbmFsIiwib3V0IiwiYmxha2UyYiIsIm5vcm1hbGl6ZUlucHV0IiwiYmxha2UyYkhleCIsIm91dHB1dCIsInRvSGV4IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/blakejs/blake2b.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/blakejs/blake2s.js":
/*!*****************************************!*\
  !*** ./node_modules/blakejs/blake2s.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// BLAKE2s hash function in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/blakejs/util.js\");\n// Little-endian byte access.\n// Expects a Uint8Array and an index\n// Returns the little-endian uint32 at v[i..i+3]\nfunction B2S_GET32(v, i) {\n    return v[i] ^ v[i + 1] << 8 ^ v[i + 2] << 16 ^ v[i + 3] << 24;\n}\n// Mixing function G.\nfunction B2S_G(a, b, c, d, x, y) {\n    v[a] = v[a] + v[b] + x;\n    v[d] = ROTR32(v[d] ^ v[a], 16);\n    v[c] = v[c] + v[d];\n    v[b] = ROTR32(v[b] ^ v[c], 12);\n    v[a] = v[a] + v[b] + y;\n    v[d] = ROTR32(v[d] ^ v[a], 8);\n    v[c] = v[c] + v[d];\n    v[b] = ROTR32(v[b] ^ v[c], 7);\n}\n// 32-bit right rotation\n// x should be a uint32\n// y must be between 1 and 31, inclusive\nfunction ROTR32(x, y) {\n    return x >>> y ^ x << 32 - y;\n}\n// Initialization Vector.\nconst BLAKE2S_IV = new Uint32Array([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\nconst SIGMA = new Uint8Array([\n    0,\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    14,\n    10,\n    4,\n    8,\n    9,\n    15,\n    13,\n    6,\n    1,\n    12,\n    0,\n    2,\n    11,\n    7,\n    5,\n    3,\n    11,\n    8,\n    12,\n    0,\n    5,\n    2,\n    15,\n    13,\n    10,\n    14,\n    3,\n    6,\n    7,\n    1,\n    9,\n    4,\n    7,\n    9,\n    3,\n    1,\n    13,\n    12,\n    11,\n    14,\n    2,\n    6,\n    5,\n    10,\n    4,\n    0,\n    15,\n    8,\n    9,\n    0,\n    5,\n    7,\n    2,\n    4,\n    10,\n    15,\n    14,\n    1,\n    11,\n    12,\n    6,\n    8,\n    3,\n    13,\n    2,\n    12,\n    6,\n    10,\n    0,\n    11,\n    8,\n    3,\n    4,\n    13,\n    7,\n    5,\n    15,\n    14,\n    1,\n    9,\n    12,\n    5,\n    1,\n    15,\n    14,\n    13,\n    4,\n    10,\n    0,\n    7,\n    6,\n    3,\n    9,\n    2,\n    8,\n    11,\n    13,\n    11,\n    7,\n    14,\n    12,\n    1,\n    3,\n    9,\n    5,\n    0,\n    15,\n    4,\n    8,\n    6,\n    2,\n    10,\n    6,\n    15,\n    14,\n    9,\n    11,\n    3,\n    0,\n    8,\n    12,\n    2,\n    13,\n    7,\n    1,\n    4,\n    10,\n    5,\n    10,\n    2,\n    8,\n    4,\n    7,\n    6,\n    1,\n    5,\n    15,\n    11,\n    9,\n    14,\n    3,\n    12,\n    13,\n    0\n]);\n// Compression function. \"last\" flag indicates last block\nconst v = new Uint32Array(16);\nconst m = new Uint32Array(16);\nfunction blake2sCompress(ctx, last) {\n    let i = 0;\n    for(i = 0; i < 8; i++){\n        // init work variables\n        v[i] = ctx.h[i];\n        v[i + 8] = BLAKE2S_IV[i];\n    }\n    v[12] ^= ctx.t // low 32 bits of offset\n    ;\n    v[13] ^= ctx.t / 0x100000000 // high 32 bits\n    ;\n    if (last) {\n        // last block flag set ?\n        v[14] = ~v[14];\n    }\n    for(i = 0; i < 16; i++){\n        // get little-endian words\n        m[i] = B2S_GET32(ctx.b, 4 * i);\n    }\n    // ten rounds of mixing\n    // uncomment the DebugPrint calls to log the computation\n    // and match the RFC sample documentation\n    // util.debugPrint('          m[16]', m, 32)\n    for(i = 0; i < 10; i++){\n        // util.debugPrint('   (i=' + i + ')  v[16]', v, 32)\n        B2S_G(0, 4, 8, 12, m[SIGMA[i * 16 + 0]], m[SIGMA[i * 16 + 1]]);\n        B2S_G(1, 5, 9, 13, m[SIGMA[i * 16 + 2]], m[SIGMA[i * 16 + 3]]);\n        B2S_G(2, 6, 10, 14, m[SIGMA[i * 16 + 4]], m[SIGMA[i * 16 + 5]]);\n        B2S_G(3, 7, 11, 15, m[SIGMA[i * 16 + 6]], m[SIGMA[i * 16 + 7]]);\n        B2S_G(0, 5, 10, 15, m[SIGMA[i * 16 + 8]], m[SIGMA[i * 16 + 9]]);\n        B2S_G(1, 6, 11, 12, m[SIGMA[i * 16 + 10]], m[SIGMA[i * 16 + 11]]);\n        B2S_G(2, 7, 8, 13, m[SIGMA[i * 16 + 12]], m[SIGMA[i * 16 + 13]]);\n        B2S_G(3, 4, 9, 14, m[SIGMA[i * 16 + 14]], m[SIGMA[i * 16 + 15]]);\n    }\n    // util.debugPrint('   (i=10) v[16]', v, 32)\n    for(i = 0; i < 8; i++){\n        ctx.h[i] ^= v[i] ^ v[i + 8];\n    }\n// util.debugPrint('h[8]', ctx.h, 32)\n}\n// Creates a BLAKE2s hashing context\n// Requires an output length between 1 and 32 bytes\n// Takes an optional Uint8Array key\nfunction blake2sInit(outlen, key) {\n    if (!(outlen > 0 && outlen <= 32)) {\n        throw new Error(\"Incorrect output length, should be in [1, 32]\");\n    }\n    const keylen = key ? key.length : 0;\n    if (key && !(keylen > 0 && keylen <= 32)) {\n        throw new Error(\"Incorrect key length, should be in [1, 32]\");\n    }\n    const ctx = {\n        h: new Uint32Array(BLAKE2S_IV),\n        b: new Uint8Array(64),\n        c: 0,\n        t: 0,\n        outlen: outlen // output length in bytes\n    };\n    ctx.h[0] ^= 0x01010000 ^ keylen << 8 ^ outlen;\n    if (keylen > 0) {\n        blake2sUpdate(ctx, key);\n        ctx.c = 64 // at the end\n        ;\n    }\n    return ctx;\n}\n// Updates a BLAKE2s streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2sUpdate(ctx, input) {\n    for(let i = 0; i < input.length; i++){\n        if (ctx.c === 64) {\n            // buffer full ?\n            ctx.t += ctx.c // add counters\n            ;\n            blake2sCompress(ctx, false) // compress (not last)\n            ;\n            ctx.c = 0 // counter to zero\n            ;\n        }\n        ctx.b[ctx.c++] = input[i];\n    }\n}\n// Completes a BLAKE2s streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2sFinal(ctx) {\n    ctx.t += ctx.c // mark last block offset\n    ;\n    while(ctx.c < 64){\n        // fill up with zeros\n        ctx.b[ctx.c++] = 0;\n    }\n    blake2sCompress(ctx, true) // final block flag = 1\n    ;\n    // little endian convert and store\n    const out = new Uint8Array(ctx.outlen);\n    for(let i = 0; i < ctx.outlen; i++){\n        out[i] = ctx.h[i >> 2] >> 8 * (i & 3) & 0xff;\n    }\n    return out;\n}\n// Computes the BLAKE2S hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2s(input, key, outlen) {\n    // preprocess inputs\n    outlen = outlen || 32;\n    input = util.normalizeInput(input);\n    // do the math\n    const ctx = blake2sInit(outlen, key);\n    blake2sUpdate(ctx, input);\n    return blake2sFinal(ctx);\n}\n// Computes the BLAKE2S hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 32 bytes\n// - outlen - optional output length in bytes, default 64\nfunction blake2sHex(input, key, outlen) {\n    const output = blake2s(input, key, outlen);\n    return util.toHex(output);\n}\nmodule.exports = {\n    blake2s: blake2s,\n    blake2sHex: blake2sHex,\n    blake2sInit: blake2sInit,\n    blake2sUpdate: blake2sUpdate,\n    blake2sFinal: blake2sFinal\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/blakejs/blake2s.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/blakejs/index.js":
/*!***************************************!*\
  !*** ./node_modules/blakejs/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst b2b = __webpack_require__(/*! ./blake2b */ \"(ssr)/./node_modules/blakejs/blake2b.js\");\nconst b2s = __webpack_require__(/*! ./blake2s */ \"(ssr)/./node_modules/blakejs/blake2s.js\");\nmodule.exports = {\n    blake2b: b2b.blake2b,\n    blake2bHex: b2b.blake2bHex,\n    blake2bInit: b2b.blake2bInit,\n    blake2bUpdate: b2b.blake2bUpdate,\n    blake2bFinal: b2b.blake2bFinal,\n    blake2s: b2s.blake2s,\n    blake2sHex: b2s.blake2sHex,\n    blake2sInit: b2s.blake2sInit,\n    blake2sUpdate: b2s.blake2sUpdate,\n    blake2sFinal: b2s.blake2sFinal\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYmxha2Vqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsTUFBTUMsbUJBQU9BLENBQUM7QUFDcEIsTUFBTUMsTUFBTUQsbUJBQU9BLENBQUM7QUFFcEJFLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxTQUFTTCxJQUFJSyxPQUFPO0lBQ3BCQyxZQUFZTixJQUFJTSxVQUFVO0lBQzFCQyxhQUFhUCxJQUFJTyxXQUFXO0lBQzVCQyxlQUFlUixJQUFJUSxhQUFhO0lBQ2hDQyxjQUFjVCxJQUFJUyxZQUFZO0lBQzlCQyxTQUFTUixJQUFJUSxPQUFPO0lBQ3BCQyxZQUFZVCxJQUFJUyxVQUFVO0lBQzFCQyxhQUFhVixJQUFJVSxXQUFXO0lBQzVCQyxlQUFlWCxJQUFJVyxhQUFhO0lBQ2hDQyxjQUFjWixJQUFJWSxZQUFZO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHdycGVya3MvLi9ub2RlX21vZHVsZXMvYmxha2Vqcy9pbmRleC5qcz85MDU1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGIyYiA9IHJlcXVpcmUoJy4vYmxha2UyYicpXG5jb25zdCBiMnMgPSByZXF1aXJlKCcuL2JsYWtlMnMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYmxha2UyYjogYjJiLmJsYWtlMmIsXG4gIGJsYWtlMmJIZXg6IGIyYi5ibGFrZTJiSGV4LFxuICBibGFrZTJiSW5pdDogYjJiLmJsYWtlMmJJbml0LFxuICBibGFrZTJiVXBkYXRlOiBiMmIuYmxha2UyYlVwZGF0ZSxcbiAgYmxha2UyYkZpbmFsOiBiMmIuYmxha2UyYkZpbmFsLFxuICBibGFrZTJzOiBiMnMuYmxha2UycyxcbiAgYmxha2Uyc0hleDogYjJzLmJsYWtlMnNIZXgsXG4gIGJsYWtlMnNJbml0OiBiMnMuYmxha2Uyc0luaXQsXG4gIGJsYWtlMnNVcGRhdGU6IGIycy5ibGFrZTJzVXBkYXRlLFxuICBibGFrZTJzRmluYWw6IGIycy5ibGFrZTJzRmluYWxcbn1cbiJdLCJuYW1lcyI6WyJiMmIiLCJyZXF1aXJlIiwiYjJzIiwibW9kdWxlIiwiZXhwb3J0cyIsImJsYWtlMmIiLCJibGFrZTJiSGV4IiwiYmxha2UyYkluaXQiLCJibGFrZTJiVXBkYXRlIiwiYmxha2UyYkZpbmFsIiwiYmxha2UycyIsImJsYWtlMnNIZXgiLCJibGFrZTJzSW5pdCIsImJsYWtlMnNVcGRhdGUiLCJibGFrZTJzRmluYWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/blakejs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/blakejs/util.js":
/*!**************************************!*\
  !*** ./node_modules/blakejs/util.js ***!
  \**************************************/
/***/ ((module) => {

eval("\nconst ERROR_MSG_INPUT = \"Input must be an string, Buffer or Uint8Array\";\n// For convenience, let people hash a string, not just a Uint8Array\nfunction normalizeInput(input) {\n    let ret;\n    if (input instanceof Uint8Array) {\n        ret = input;\n    } else if (typeof input === \"string\") {\n        const encoder = new TextEncoder();\n        ret = encoder.encode(input);\n    } else {\n        throw new Error(ERROR_MSG_INPUT);\n    }\n    return ret;\n}\n// Converts a Uint8Array to a hexadecimal string\n// For example, toHex([255, 0, 255]) returns \"ff00ff\"\nfunction toHex(bytes) {\n    return Array.prototype.map.call(bytes, function(n) {\n        return (n < 16 ? \"0\" : \"\") + n.toString(16);\n    }).join(\"\");\n}\n// Converts any value in [0...2^32-1] to an 8-character hex string\nfunction uint32ToHex(val) {\n    return (0x100000000 + val).toString(16).substring(1);\n}\n// For debugging: prints out hash state in the same format as the RFC\n// sample computation exactly, so that you can diff\nfunction debugPrint(label, arr, size) {\n    let msg = \"\\n\" + label + \" = \";\n    for(let i = 0; i < arr.length; i += 2){\n        if (size === 32) {\n            msg += uint32ToHex(arr[i]).toUpperCase();\n            msg += \" \";\n            msg += uint32ToHex(arr[i + 1]).toUpperCase();\n        } else if (size === 64) {\n            msg += uint32ToHex(arr[i + 1]).toUpperCase();\n            msg += uint32ToHex(arr[i]).toUpperCase();\n        } else throw new Error(\"Invalid size \" + size);\n        if (i % 6 === 4) {\n            msg += \"\\n\" + new Array(label.length + 4).join(\" \");\n        } else if (i < arr.length - 2) {\n            msg += \" \";\n        }\n    }\n    console.log(msg);\n}\n// For performance testing: generates N bytes of input, hashes M times\n// Measures and prints MB/second hash performance each time\nfunction testSpeed(hashFn, N, M) {\n    let startMs = new Date().getTime();\n    const input = new Uint8Array(N);\n    for(let i = 0; i < N; i++){\n        input[i] = i % 256;\n    }\n    const genMs = new Date().getTime();\n    console.log(\"Generated random input in \" + (genMs - startMs) + \"ms\");\n    startMs = genMs;\n    for(let i = 0; i < M; i++){\n        const hashHex = hashFn(input);\n        const hashMs = new Date().getTime();\n        const ms = hashMs - startMs;\n        startMs = hashMs;\n        console.log(\"Hashed in \" + ms + \"ms: \" + hashHex.substring(0, 20) + \"...\");\n        console.log(Math.round(N / (1 << 20) / (ms / 1000) * 100) / 100 + \" MB PER SECOND\");\n    }\n}\nmodule.exports = {\n    normalizeInput: normalizeInput,\n    toHex: toHex,\n    debugPrint: debugPrint,\n    testSpeed: testSpeed\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLQyxLQUFLLENBQUMsSUFBTSxNQUFLLEVBQUMsSUFBTUYsQ0FBQUEsS0FBSyxJQUFHLElBQU0sT0FBTyxNQUFNO0lBRTVEO0FBQ0Y7QUFFQUcsT0FBT0MsT0FBTyxHQUFHO0lBQ2Y1QyxnQkFBZ0JBO0lBQ2hCUSxPQUFPQTtJQUNQWSxZQUFZQTtJQUNaVSxXQUFXQTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHdycGVya3MvLi9ub2RlX21vZHVsZXMvYmxha2Vqcy91dGlsLmpzP2JkYjMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRVJST1JfTVNHX0lOUFVUID0gJ0lucHV0IG11c3QgYmUgYW4gc3RyaW5nLCBCdWZmZXIgb3IgVWludDhBcnJheSdcblxuLy8gRm9yIGNvbnZlbmllbmNlLCBsZXQgcGVvcGxlIGhhc2ggYSBzdHJpbmcsIG5vdCBqdXN0IGEgVWludDhBcnJheVxuZnVuY3Rpb24gbm9ybWFsaXplSW5wdXQgKGlucHV0KSB7XG4gIGxldCByZXRcbiAgaWYgKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldCA9IGlucHV0XG4gIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKVxuICAgIHJldCA9IGVuY29kZXIuZW5jb2RlKGlucHV0KVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihFUlJPUl9NU0dfSU5QVVQpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG4vLyBDb252ZXJ0cyBhIFVpbnQ4QXJyYXkgdG8gYSBoZXhhZGVjaW1hbCBzdHJpbmdcbi8vIEZvciBleGFtcGxlLCB0b0hleChbMjU1LCAwLCAyNTVdKSByZXR1cm5zIFwiZmYwMGZmXCJcbmZ1bmN0aW9uIHRvSGV4IChieXRlcykge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcFxuICAgIC5jYWxsKGJ5dGVzLCBmdW5jdGlvbiAobikge1xuICAgICAgcmV0dXJuIChuIDwgMTYgPyAnMCcgOiAnJykgKyBuLnRvU3RyaW5nKDE2KVxuICAgIH0pXG4gICAgLmpvaW4oJycpXG59XG5cbi8vIENvbnZlcnRzIGFueSB2YWx1ZSBpbiBbMC4uLjJeMzItMV0gdG8gYW4gOC1jaGFyYWN0ZXIgaGV4IHN0cmluZ1xuZnVuY3Rpb24gdWludDMyVG9IZXggKHZhbCkge1xuICByZXR1cm4gKDB4MTAwMDAwMDAwICsgdmFsKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpXG59XG5cbi8vIEZvciBkZWJ1Z2dpbmc6IHByaW50cyBvdXQgaGFzaCBzdGF0ZSBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIFJGQ1xuLy8gc2FtcGxlIGNvbXB1dGF0aW9uIGV4YWN0bHksIHNvIHRoYXQgeW91IGNhbiBkaWZmXG5mdW5jdGlvbiBkZWJ1Z1ByaW50IChsYWJlbCwgYXJyLCBzaXplKSB7XG4gIGxldCBtc2cgPSAnXFxuJyArIGxhYmVsICsgJyA9ICdcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBpZiAoc2l6ZSA9PT0gMzIpIHtcbiAgICAgIG1zZyArPSB1aW50MzJUb0hleChhcnJbaV0pLnRvVXBwZXJDYXNlKClcbiAgICAgIG1zZyArPSAnICdcbiAgICAgIG1zZyArPSB1aW50MzJUb0hleChhcnJbaSArIDFdKS50b1VwcGVyQ2FzZSgpXG4gICAgfSBlbHNlIGlmIChzaXplID09PSA2NCkge1xuICAgICAgbXNnICs9IHVpbnQzMlRvSGV4KGFycltpICsgMV0pLnRvVXBwZXJDYXNlKClcbiAgICAgIG1zZyArPSB1aW50MzJUb0hleChhcnJbaV0pLnRvVXBwZXJDYXNlKClcbiAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpemUgJyArIHNpemUpXG4gICAgaWYgKGkgJSA2ID09PSA0KSB7XG4gICAgICBtc2cgKz0gJ1xcbicgKyBuZXcgQXJyYXkobGFiZWwubGVuZ3RoICsgNCkuam9pbignICcpXG4gICAgfSBlbHNlIGlmIChpIDwgYXJyLmxlbmd0aCAtIDIpIHtcbiAgICAgIG1zZyArPSAnICdcbiAgICB9XG4gIH1cbiAgY29uc29sZS5sb2cobXNnKVxufVxuXG4vLyBGb3IgcGVyZm9ybWFuY2UgdGVzdGluZzogZ2VuZXJhdGVzIE4gYnl0ZXMgb2YgaW5wdXQsIGhhc2hlcyBNIHRpbWVzXG4vLyBNZWFzdXJlcyBhbmQgcHJpbnRzIE1CL3NlY29uZCBoYXNoIHBlcmZvcm1hbmNlIGVhY2ggdGltZVxuZnVuY3Rpb24gdGVzdFNwZWVkIChoYXNoRm4sIE4sIE0pIHtcbiAgbGV0IHN0YXJ0TXMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuXG4gIGNvbnN0IGlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoTilcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICBpbnB1dFtpXSA9IGkgJSAyNTZcbiAgfVxuICBjb25zdCBnZW5NcyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXG4gIGNvbnNvbGUubG9nKCdHZW5lcmF0ZWQgcmFuZG9tIGlucHV0IGluICcgKyAoZ2VuTXMgLSBzdGFydE1zKSArICdtcycpXG4gIHN0YXJ0TXMgPSBnZW5Nc1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgTTsgaSsrKSB7XG4gICAgY29uc3QgaGFzaEhleCA9IGhhc2hGbihpbnB1dClcbiAgICBjb25zdCBoYXNoTXMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgIGNvbnN0IG1zID0gaGFzaE1zIC0gc3RhcnRNc1xuICAgIHN0YXJ0TXMgPSBoYXNoTXNcbiAgICBjb25zb2xlLmxvZygnSGFzaGVkIGluICcgKyBtcyArICdtczogJyArIGhhc2hIZXguc3Vic3RyaW5nKDAsIDIwKSArICcuLi4nKVxuICAgIGNvbnNvbGUubG9nKFxuICAgICAgTWF0aC5yb3VuZCgoTiAvICgxIDw8IDIwKSAvIChtcyAvIDEwMDApKSAqIDEwMCkgLyAxMDAgKyAnIE1CIFBFUiBTRUNPTkQnXG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBub3JtYWxpemVJbnB1dDogbm9ybWFsaXplSW5wdXQsXG4gIHRvSGV4OiB0b0hleCxcbiAgZGVidWdQcmludDogZGVidWdQcmludCxcbiAgdGVzdFNwZWVkOiB0ZXN0U3BlZWRcbn1cbiJdLCJuYW1lcyI6WyJFUlJPUl9NU0dfSU5QVVQiLCJub3JtYWxpemVJbnB1dCIsImlucHV0IiwicmV0IiwiVWludDhBcnJheSIsImVuY29kZXIiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIkVycm9yIiwidG9IZXgiLCJieXRlcyIsIkFycmF5IiwicHJvdG90eXBlIiwibWFwIiwiY2FsbCIsIm4iLCJ0b1N0cmluZyIsImpvaW4iLCJ1aW50MzJUb0hleCIsInZhbCIsInN1YnN0cmluZyIsImRlYnVnUHJpbnQiLCJsYWJlbCIsImFyciIsInNpemUiLCJtc2ciLCJpIiwibGVuZ3RoIiwidG9VcHBlckNhc2UiLCJjb25zb2xlIiwibG9nIiwidGVzdFNwZWVkIiwiaGFzaEZuIiwiTiIsIk0iLCJzdGFydE1zIiwiRGF0ZSIsImdldFRpbWUiLCJnZW5NcyIsImhhc2hIZXgiLCJoYXNoTXMiLCJtcyIsIk1hdGgiLCJyb3VuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/blakejs/util.js\n");

/***/ })

};
;