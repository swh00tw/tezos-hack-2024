"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/solid-js";
exports.ids = ["vendor-chunks/solid-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/solid-js/dist/server.js":
/*!**********************************************!*\
  !*** ./node_modules/solid-js/dist/server.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $DEVCOMP: () => (/* binding */ $DEVCOMP),\n/* harmony export */   $PROXY: () => (/* binding */ $PROXY),\n/* harmony export */   $TRACK: () => (/* binding */ $TRACK),\n/* harmony export */   DEV: () => (/* binding */ DEV),\n/* harmony export */   ErrorBoundary: () => (/* binding */ ErrorBoundary),\n/* harmony export */   For: () => (/* binding */ For),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   Match: () => (/* binding */ Match),\n/* harmony export */   Show: () => (/* binding */ Show),\n/* harmony export */   Suspense: () => (/* binding */ Suspense),\n/* harmony export */   SuspenseList: () => (/* binding */ SuspenseList),\n/* harmony export */   Switch: () => (/* binding */ Switch),\n/* harmony export */   batch: () => (/* binding */ batch),\n/* harmony export */   catchError: () => (/* binding */ catchError),\n/* harmony export */   children: () => (/* binding */ children),\n/* harmony export */   createComponent: () => (/* binding */ createComponent),\n/* harmony export */   createComputed: () => (/* binding */ createComputed),\n/* harmony export */   createContext: () => (/* binding */ createContext),\n/* harmony export */   createDeferred: () => (/* binding */ createDeferred),\n/* harmony export */   createEffect: () => (/* binding */ createEffect),\n/* harmony export */   createMemo: () => (/* binding */ createMemo),\n/* harmony export */   createReaction: () => (/* binding */ createReaction),\n/* harmony export */   createRenderEffect: () => (/* binding */ createRenderEffect),\n/* harmony export */   createResource: () => (/* binding */ createResource),\n/* harmony export */   createRoot: () => (/* binding */ createRoot),\n/* harmony export */   createSelector: () => (/* binding */ createSelector),\n/* harmony export */   createSignal: () => (/* binding */ createSignal),\n/* harmony export */   createUniqueId: () => (/* binding */ createUniqueId),\n/* harmony export */   enableExternalSource: () => (/* binding */ enableExternalSource),\n/* harmony export */   enableHydration: () => (/* binding */ enableHydration),\n/* harmony export */   enableScheduling: () => (/* binding */ enableScheduling),\n/* harmony export */   equalFn: () => (/* binding */ equalFn),\n/* harmony export */   from: () => (/* binding */ from),\n/* harmony export */   getListener: () => (/* binding */ getListener),\n/* harmony export */   getOwner: () => (/* binding */ getOwner),\n/* harmony export */   indexArray: () => (/* binding */ indexArray),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mapArray: () => (/* binding */ mapArray),\n/* harmony export */   mergeProps: () => (/* binding */ mergeProps),\n/* harmony export */   observable: () => (/* binding */ observable),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   onCleanup: () => (/* binding */ onCleanup),\n/* harmony export */   onError: () => (/* binding */ onError),\n/* harmony export */   onMount: () => (/* binding */ onMount),\n/* harmony export */   requestCallback: () => (/* binding */ requestCallback),\n/* harmony export */   resetErrorBoundaries: () => (/* binding */ resetErrorBoundaries),\n/* harmony export */   runWithOwner: () => (/* binding */ runWithOwner),\n/* harmony export */   sharedConfig: () => (/* binding */ sharedConfig),\n/* harmony export */   splitProps: () => (/* binding */ splitProps),\n/* harmony export */   startTransition: () => (/* binding */ startTransition),\n/* harmony export */   untrack: () => (/* binding */ untrack),\n/* harmony export */   useContext: () => (/* binding */ useContext),\n/* harmony export */   useTransition: () => (/* binding */ useTransition)\n/* harmony export */ });\nconst equalFn = (a, b)=>a === b;\nconst $PROXY = Symbol(\"solid-proxy\");\nconst $TRACK = Symbol(\"solid-track\");\nconst $DEVCOMP = Symbol(\"solid-dev-component\");\nconst DEV = undefined;\nconst ERROR = Symbol(\"error\");\nfunction castError(err) {\n    if (err instanceof Error) return err;\n    return new Error(typeof err === \"string\" ? err : \"Unknown error\", {\n        cause: err\n    });\n}\nfunction handleError(err, owner = Owner) {\n    const fns = owner && owner.context && owner.context[ERROR];\n    const error = castError(err);\n    if (!fns) throw error;\n    try {\n        for (const f of fns)f(error);\n    } catch (e) {\n        handleError(e, owner && owner.owner || null);\n    }\n}\nconst UNOWNED = {\n    context: null,\n    owner: null,\n    owned: null,\n    cleanups: null\n};\nlet Owner = null;\nfunction createOwner() {\n    const o = {\n        owner: Owner,\n        context: Owner ? Owner.context : null,\n        owned: null,\n        cleanups: null\n    };\n    if (Owner) {\n        if (!Owner.owned) Owner.owned = [\n            o\n        ];\n        else Owner.owned.push(o);\n    }\n    return o;\n}\nfunction createRoot(fn, detachedOwner) {\n    const owner = Owner, current = detachedOwner === undefined ? owner : detachedOwner, root = fn.length === 0 ? UNOWNED : {\n        context: current ? current.context : null,\n        owner: current,\n        owned: null,\n        cleanups: null\n    };\n    Owner = root;\n    let result;\n    try {\n        result = fn(fn.length === 0 ? ()=>{} : ()=>cleanNode(root));\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = owner;\n    }\n    return result;\n}\nfunction createSignal(value, options) {\n    return [\n        ()=>value,\n        (v)=>{\n            return value = typeof v === \"function\" ? v(value) : v;\n        }\n    ];\n}\nfunction createComputed(fn, value) {\n    Owner = createOwner();\n    try {\n        fn(value);\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = Owner.owner;\n    }\n}\nconst createRenderEffect = createComputed;\nfunction createEffect(fn, value) {}\nfunction createReaction(fn) {\n    return (fn)=>{\n        fn();\n    };\n}\nfunction createMemo(fn, value) {\n    Owner = createOwner();\n    let v;\n    try {\n        v = fn(value);\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = Owner.owner;\n    }\n    return ()=>v;\n}\nfunction createDeferred(source) {\n    return source;\n}\nfunction createSelector(source, fn = equalFn) {\n    return (k)=>fn(k, source());\n}\nfunction batch(fn) {\n    return fn();\n}\nconst untrack = batch;\nfunction on(deps, fn, options = {}) {\n    const isArray = Array.isArray(deps);\n    const defer = options.defer;\n    return ()=>{\n        if (defer) return undefined;\n        let value;\n        if (isArray) {\n            value = [];\n            for(let i = 0; i < deps.length; i++)value.push(deps[i]());\n        } else value = deps();\n        return fn(value);\n    };\n}\nfunction onMount(fn) {}\nfunction onCleanup(fn) {\n    if (Owner) {\n        if (!Owner.cleanups) Owner.cleanups = [\n            fn\n        ];\n        else Owner.cleanups.push(fn);\n    }\n    return fn;\n}\nfunction cleanNode(node) {\n    if (node.owned) {\n        for(let i = 0; i < node.owned.length; i++)cleanNode(node.owned[i]);\n        node.owned = null;\n    }\n    if (node.cleanups) {\n        for(let i = 0; i < node.cleanups.length; i++)node.cleanups[i]();\n        node.cleanups = null;\n    }\n}\nfunction catchError(fn, handler) {\n    const owner = createOwner();\n    owner.context = {\n        ...owner.context,\n        [ERROR]: [\n            handler\n        ]\n    };\n    Owner = owner;\n    try {\n        return fn();\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = Owner.owner;\n    }\n}\nfunction getListener() {\n    return null;\n}\nfunction createContext(defaultValue) {\n    const id = Symbol(\"context\");\n    return {\n        id,\n        Provider: createProvider(id),\n        defaultValue\n    };\n}\nfunction useContext(context) {\n    return Owner && Owner.context && Owner.context[context.id] !== undefined ? Owner.context[context.id] : context.defaultValue;\n}\nfunction getOwner() {\n    return Owner;\n}\nfunction children(fn) {\n    const memo = createMemo(()=>resolveChildren(fn()));\n    memo.toArray = ()=>{\n        const c = memo();\n        return Array.isArray(c) ? c : c != null ? [\n            c\n        ] : [];\n    };\n    return memo;\n}\nfunction runWithOwner(o, fn) {\n    const prev = Owner;\n    Owner = o;\n    try {\n        return fn();\n    } catch (err) {\n        handleError(err);\n    } finally{\n        Owner = prev;\n    }\n}\nfunction resolveChildren(children) {\n    if (typeof children === \"function\" && !children.length) return resolveChildren(children());\n    if (Array.isArray(children)) {\n        const results = [];\n        for(let i = 0; i < children.length; i++){\n            const result = resolveChildren(children[i]);\n            Array.isArray(result) ? results.push.apply(results, result) : results.push(result);\n        }\n        return results;\n    }\n    return children;\n}\nfunction createProvider(id) {\n    return function provider(props) {\n        return createMemo(()=>{\n            Owner.context = {\n                ...Owner.context,\n                [id]: props.value\n            };\n            return children(()=>props.children);\n        });\n    };\n}\nfunction requestCallback(fn, options) {\n    return {\n        id: 0,\n        fn: ()=>{},\n        startTime: 0,\n        expirationTime: 0\n    };\n}\nfunction mapArray(list, mapFn, options = {}) {\n    const items = list();\n    let s = [];\n    if (items && items.length) {\n        for(let i = 0, len = items.length; i < len; i++)s.push(mapFn(items[i], ()=>i));\n    } else if (options.fallback) s = [\n        options.fallback()\n    ];\n    return ()=>s;\n}\nfunction indexArray(list, mapFn, options = {}) {\n    const items = list();\n    let s = [];\n    if (items && items.length) {\n        for(let i = 0, len = items.length; i < len; i++)s.push(mapFn(()=>items[i], i));\n    } else if (options.fallback) s = [\n        options.fallback()\n    ];\n    return ()=>s;\n}\nfunction observable(input) {\n    return {\n        subscribe (observer) {\n            if (!(observer instanceof Object) || observer == null) {\n                throw new TypeError(\"Expected the observer to be an object.\");\n            }\n            const handler = typeof observer === \"function\" ? observer : observer.next && observer.next.bind(observer);\n            if (!handler) {\n                return {\n                    unsubscribe () {}\n                };\n            }\n            const dispose = createRoot((disposer)=>{\n                createEffect(()=>{\n                    const v = input();\n                    untrack(()=>handler(v));\n                });\n                return disposer;\n            });\n            if (getOwner()) onCleanup(dispose);\n            return {\n                unsubscribe () {\n                    dispose();\n                }\n            };\n        },\n        [Symbol.observable || \"@@observable\"] () {\n            return this;\n        }\n    };\n}\nfunction from(producer) {\n    const [s, set] = createSignal(undefined);\n    if (\"subscribe\" in producer) {\n        const unsub = producer.subscribe((v)=>set(()=>v));\n        onCleanup(()=>\"unsubscribe\" in unsub ? unsub.unsubscribe() : unsub());\n    } else {\n        const clean = producer(set);\n        onCleanup(clean);\n    }\n    return s;\n}\nfunction enableExternalSource(factory) {}\nfunction onError(fn) {\n    if (Owner) {\n        if (Owner.context === null || !Owner.context[ERROR]) {\n            Owner.context = {\n                ...Owner.context,\n                [ERROR]: [\n                    fn\n                ]\n            };\n            mutateContext(Owner, ERROR, [\n                fn\n            ]);\n        } else Owner.context[ERROR].push(fn);\n    }\n}\nfunction mutateContext(o, key, value) {\n    if (o.owned) {\n        for(let i = 0; i < o.owned.length; i++){\n            if (o.owned[i].context === o.context) mutateContext(o.owned[i], key, value);\n            if (!o.owned[i].context) {\n                o.owned[i].context = o.context;\n                mutateContext(o.owned[i], key, value);\n            } else if (!o.owned[i].context[key]) {\n                o.owned[i].context[key] = value;\n                mutateContext(o.owned[i], key, value);\n            }\n        }\n    }\n}\nfunction resolveSSRNode(node) {\n    const t = typeof node;\n    if (t === \"string\") return node;\n    if (node == null || t === \"boolean\") return \"\";\n    if (Array.isArray(node)) {\n        let mapped = \"\";\n        for(let i = 0, len = node.length; i < len; i++)mapped += resolveSSRNode(node[i]);\n        return mapped;\n    }\n    if (t === \"object\") return node.t;\n    if (t === \"function\") return resolveSSRNode(node());\n    return String(node);\n}\nconst sharedConfig = {};\nfunction setHydrateContext(context) {\n    sharedConfig.context = context;\n}\nfunction nextHydrateContext() {\n    return sharedConfig.context ? {\n        ...sharedConfig.context,\n        id: `${sharedConfig.context.id}${sharedConfig.context.count++}-`,\n        count: 0\n    } : undefined;\n}\nfunction createUniqueId() {\n    const ctx = sharedConfig.context;\n    if (!ctx) throw new Error(`createUniqueId cannot be used under non-hydrating context`);\n    return `${ctx.id}${ctx.count++}`;\n}\nfunction createComponent(Comp, props) {\n    if (sharedConfig.context && !sharedConfig.context.noHydrate) {\n        const c = sharedConfig.context;\n        setHydrateContext(nextHydrateContext());\n        const r = Comp(props || {});\n        setHydrateContext(c);\n        return r;\n    }\n    return Comp(props || {});\n}\nfunction mergeProps(...sources) {\n    const target = {};\n    for(let i = 0; i < sources.length; i++){\n        let source = sources[i];\n        if (typeof source === \"function\") source = source();\n        if (source) {\n            const descriptors = Object.getOwnPropertyDescriptors(source);\n            for(const key in descriptors){\n                if (key in target) continue;\n                Object.defineProperty(target, key, {\n                    enumerable: true,\n                    get () {\n                        for(let i = sources.length - 1; i >= 0; i--){\n                            let v, s = sources[i];\n                            if (typeof s === \"function\") s = s();\n                            v = (s || {})[key];\n                            if (v !== undefined) return v;\n                        }\n                    }\n                });\n            }\n        }\n    }\n    return target;\n}\nfunction splitProps(props, ...keys) {\n    const descriptors = Object.getOwnPropertyDescriptors(props), split = (k)=>{\n        const clone = {};\n        for(let i = 0; i < k.length; i++){\n            const key = k[i];\n            if (descriptors[key]) {\n                Object.defineProperty(clone, key, descriptors[key]);\n                delete descriptors[key];\n            }\n        }\n        return clone;\n    };\n    return keys.map(split).concat(split(Object.keys(descriptors)));\n}\nfunction simpleMap(props, wrap) {\n    const list = props.each || [], len = list.length, fn = props.children;\n    if (len) {\n        let mapped = Array(len);\n        for(let i = 0; i < len; i++)mapped[i] = wrap(fn, list[i], i);\n        return mapped;\n    }\n    return props.fallback;\n}\nfunction For(props) {\n    return simpleMap(props, (fn, item, i)=>fn(item, ()=>i));\n}\nfunction Index(props) {\n    return simpleMap(props, (fn, item, i)=>fn(()=>item, i));\n}\nfunction Show(props) {\n    let c;\n    return props.when ? typeof (c = props.children) === \"function\" ? c(props.keyed ? props.when : ()=>props.when) : c : props.fallback || \"\";\n}\nfunction Switch(props) {\n    let conditions = props.children;\n    Array.isArray(conditions) || (conditions = [\n        conditions\n    ]);\n    for(let i = 0; i < conditions.length; i++){\n        const w = conditions[i].when;\n        if (w) {\n            const c = conditions[i].children;\n            return typeof c === \"function\" ? c(conditions[i].keyed ? w : ()=>w) : c;\n        }\n    }\n    return props.fallback || \"\";\n}\nfunction Match(props) {\n    return props;\n}\nfunction resetErrorBoundaries() {}\nfunction ErrorBoundary(props) {\n    let error, res, clean, sync = true;\n    const ctx = sharedConfig.context;\n    const id = ctx.id + ctx.count;\n    function displayFallback() {\n        cleanNode(clean);\n        ctx.serialize(id, error);\n        setHydrateContext({\n            ...ctx,\n            count: 0\n        });\n        const f = props.fallback;\n        return typeof f === \"function\" && f.length ? f(error, ()=>{}) : f;\n    }\n    createMemo(()=>{\n        clean = Owner;\n        return catchError(()=>res = props.children, (err)=>{\n            error = err;\n            !sync && ctx.replace(\"e\" + id, displayFallback);\n            sync = true;\n        });\n    });\n    if (error) return displayFallback();\n    sync = false;\n    return {\n        t: `<!--!$e${id}-->${resolveSSRNode(res)}<!--!$/e${id}-->`\n    };\n}\nconst SuspenseContext = createContext();\nlet resourceContext = null;\nfunction createResource(source, fetcher, options = {}) {\n    if (arguments.length === 2) {\n        if (typeof fetcher === \"object\") {\n            options = fetcher;\n            fetcher = source;\n            source = true;\n        }\n    } else if (arguments.length === 1) {\n        fetcher = source;\n        source = true;\n    }\n    const contexts = new Set();\n    const id = sharedConfig.context.id + sharedConfig.context.count++;\n    let resource = {};\n    let value = options.storage ? options.storage(options.initialValue)[0]() : options.initialValue;\n    let p;\n    let error;\n    if (sharedConfig.context.async && options.ssrLoadFrom !== \"initial\") {\n        resource = sharedConfig.context.resources[id] || (sharedConfig.context.resources[id] = {});\n        if (resource.ref) {\n            if (!resource.data && !resource.ref[0].loading && !resource.ref[0].error) resource.ref[1].refetch();\n            return resource.ref;\n        }\n    }\n    const read = ()=>{\n        if (error) throw error;\n        if (resourceContext && p) resourceContext.push(p);\n        const resolved = options.ssrLoadFrom !== \"initial\" && sharedConfig.context.async && \"data\" in sharedConfig.context.resources[id];\n        if (!resolved && read.loading) {\n            const ctx = useContext(SuspenseContext);\n            if (ctx) {\n                ctx.resources.set(id, read);\n                contexts.add(ctx);\n            }\n        }\n        return resolved ? sharedConfig.context.resources[id].data : value;\n    };\n    read.loading = false;\n    read.error = undefined;\n    read.state = \"initialValue\" in options ? \"ready\" : \"unresolved\";\n    Object.defineProperty(read, \"latest\", {\n        get () {\n            return read();\n        }\n    });\n    function load() {\n        const ctx = sharedConfig.context;\n        if (!ctx.async) return read.loading = !!(typeof source === \"function\" ? source() : source);\n        if (ctx.resources && id in ctx.resources && \"data\" in ctx.resources[id]) {\n            value = ctx.resources[id].data;\n            return;\n        }\n        resourceContext = [];\n        const lookup = typeof source === \"function\" ? source() : source;\n        if (resourceContext.length) {\n            p = Promise.all(resourceContext).then(()=>fetcher(source(), {\n                    value\n                }));\n        }\n        resourceContext = null;\n        if (!p) {\n            if (lookup == null || lookup === false) return;\n            p = fetcher(lookup, {\n                value\n            });\n        }\n        if (p != undefined && typeof p === \"object\" && \"then\" in p) {\n            read.loading = true;\n            read.state = \"pending\";\n            p = p.then((res)=>{\n                read.loading = false;\n                read.state = \"ready\";\n                ctx.resources[id].data = res;\n                p = null;\n                notifySuspense(contexts);\n                return res;\n            }).catch((err)=>{\n                read.loading = false;\n                read.state = \"errored\";\n                read.error = error = castError(err);\n                p = null;\n                notifySuspense(contexts);\n                throw error;\n            });\n            if (ctx.serialize) ctx.serialize(id, p, options.deferStream);\n            return p;\n        }\n        ctx.resources[id].data = p;\n        if (ctx.serialize) ctx.serialize(id, p);\n        p = null;\n        return ctx.resources[id].data;\n    }\n    if (options.ssrLoadFrom !== \"initial\") load();\n    return resource.ref = [\n        read,\n        {\n            refetch: load,\n            mutate: (v)=>value = v\n        }\n    ];\n}\nfunction lazy(fn) {\n    let p;\n    let load = (id)=>{\n        if (!p) {\n            p = fn();\n            p.then((mod)=>p.resolved = mod.default);\n            if (id) sharedConfig.context.lazy[id] = p;\n        }\n        return p;\n    };\n    const contexts = new Set();\n    const wrap = (props)=>{\n        const id = sharedConfig.context.id.slice(0, -1);\n        let ref = sharedConfig.context.lazy[id];\n        if (ref) p = ref;\n        else load(id);\n        if (p.resolved) return p.resolved(props);\n        const ctx = useContext(SuspenseContext);\n        const track = {\n            loading: true,\n            error: undefined\n        };\n        if (ctx) {\n            ctx.resources.set(id, track);\n            contexts.add(ctx);\n        }\n        if (sharedConfig.context.async) {\n            sharedConfig.context.block(p.then(()=>{\n                track.loading = false;\n                notifySuspense(contexts);\n            }));\n        }\n        return \"\";\n    };\n    wrap.preload = load;\n    return wrap;\n}\nfunction suspenseComplete(c) {\n    for (const r of c.resources.values()){\n        if (r.loading) return false;\n    }\n    return true;\n}\nfunction notifySuspense(contexts) {\n    for (const c of contexts){\n        if (!suspenseComplete(c)) {\n            continue;\n        }\n        c.completed();\n        contexts.delete(c);\n    }\n}\nfunction enableScheduling() {}\nfunction enableHydration() {}\nfunction startTransition(fn) {\n    fn();\n}\nfunction useTransition() {\n    return [\n        ()=>false,\n        (fn)=>{\n            fn();\n        }\n    ];\n}\nfunction SuspenseList(props) {\n    return props.children;\n}\nfunction Suspense(props) {\n    let done;\n    const ctx = sharedConfig.context;\n    const id = ctx.id + ctx.count;\n    const o = createOwner();\n    const value = ctx.suspense[id] || (ctx.suspense[id] = {\n        resources: new Map(),\n        completed: ()=>{\n            const res = runSuspense();\n            if (suspenseComplete(value)) {\n                done(resolveSSRNode(res));\n            }\n        }\n    });\n    function suspenseError(err) {\n        if (!done || !done(undefined, err)) {\n            runWithOwner(o.owner, ()=>{\n                throw err;\n            });\n        }\n    }\n    function runSuspense() {\n        setHydrateContext({\n            ...ctx,\n            count: 0\n        });\n        cleanNode(o);\n        return runWithOwner(o, ()=>createComponent(SuspenseContext.Provider, {\n                value,\n                get children () {\n                    return catchError(()=>props.children, suspenseError);\n                }\n            }));\n    }\n    const res = runSuspense();\n    if (suspenseComplete(value)) {\n        delete ctx.suspense[id];\n        return res;\n    }\n    done = ctx.async ? ctx.registerFragment(id) : undefined;\n    return catchError(()=>{\n        if (ctx.async) {\n            setHydrateContext({\n                ...ctx,\n                count: 0,\n                id: ctx.id + \"0-f\",\n                noHydrate: true\n            });\n            const res = {\n                t: `<template id=\"pl-${id}\"></template>${resolveSSRNode(props.fallback)}<!--pl-${id}-->`\n            };\n            setHydrateContext(ctx);\n            return res;\n        }\n        setHydrateContext({\n            ...ctx,\n            count: 0,\n            id: ctx.id + \"0-f\"\n        });\n        ctx.serialize(id, \"$$f\");\n        return props.fallback;\n    }, suspenseError);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/solid-js/dist/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/solid-js/web/dist/server.js":
/*!**************************************************!*\
  !*** ./node_modules/solid-js/web/dist/server.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assets: () => (/* binding */ Assets),\n/* harmony export */   Dynamic: () => (/* binding */ Dynamic),\n/* harmony export */   ErrorBoundary: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.ErrorBoundary),\n/* harmony export */   For: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.For),\n/* harmony export */   Hydration: () => (/* binding */ Hydration),\n/* harmony export */   HydrationScript: () => (/* binding */ HydrationScript),\n/* harmony export */   Index: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Index),\n/* harmony export */   Match: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Match),\n/* harmony export */   NoHydration: () => (/* binding */ NoHydration),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   RequestContext: () => (/* binding */ RequestContext),\n/* harmony export */   Show: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Show),\n/* harmony export */   Suspense: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Suspense),\n/* harmony export */   SuspenseList: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.SuspenseList),\n/* harmony export */   Switch: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.Switch),\n/* harmony export */   addEventListener: () => (/* binding */ addEventListener),\n/* harmony export */   createComponent: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.createComponent),\n/* harmony export */   delegateEvents: () => (/* binding */ delegateEvents),\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   generateHydrationScript: () => (/* binding */ generateHydrationScript),\n/* harmony export */   getAssets: () => (/* binding */ getAssets),\n/* harmony export */   getHydrationKey: () => (/* binding */ getHydrationKey),\n/* harmony export */   getRequestEvent: () => (/* binding */ getRequestEvent),\n/* harmony export */   hydrate: () => (/* binding */ hydrate),\n/* harmony export */   insert: () => (/* binding */ insert),\n/* harmony export */   isDev: () => (/* binding */ isDev),\n/* harmony export */   isServer: () => (/* binding */ isServer),\n/* harmony export */   mergeProps: () => (/* reexport safe */ solid_js__WEBPACK_IMPORTED_MODULE_0__.mergeProps),\n/* harmony export */   pipeToNodeWritable: () => (/* binding */ pipeToNodeWritable),\n/* harmony export */   pipeToWritable: () => (/* binding */ pipeToWritable),\n/* harmony export */   render: () => (/* binding */ render),\n/* harmony export */   renderToStream: () => (/* binding */ renderToStream),\n/* harmony export */   renderToString: () => (/* binding */ renderToString),\n/* harmony export */   renderToStringAsync: () => (/* binding */ renderToStringAsync),\n/* harmony export */   resolveSSRNode: () => (/* binding */ resolveSSRNode),\n/* harmony export */   spread: () => (/* binding */ spread),\n/* harmony export */   ssr: () => (/* binding */ ssr),\n/* harmony export */   ssrAttribute: () => (/* binding */ ssrAttribute),\n/* harmony export */   ssrClassList: () => (/* binding */ ssrClassList),\n/* harmony export */   ssrElement: () => (/* binding */ ssrElement),\n/* harmony export */   ssrHydrationKey: () => (/* binding */ ssrHydrationKey),\n/* harmony export */   ssrSpread: () => (/* binding */ ssrSpread),\n/* harmony export */   ssrStyle: () => (/* binding */ ssrStyle),\n/* harmony export */   useAssets: () => (/* binding */ useAssets)\n/* harmony export */ });\n/* harmony import */ var solid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! solid-js */ \"(ssr)/./node_modules/solid-js/dist/server.js\");\n/* harmony import */ var seroval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! seroval */ \"(ssr)/./node_modules/seroval/dist/esm/development/index.mjs\");\n/* harmony import */ var seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! seroval-plugins/web */ \"(ssr)/./node_modules/seroval-plugins/dist/esm/development/web.mjs\");\n\n\n\n\nconst booleans = [\n    \"allowfullscreen\",\n    \"async\",\n    \"autofocus\",\n    \"autoplay\",\n    \"checked\",\n    \"controls\",\n    \"default\",\n    \"disabled\",\n    \"formnovalidate\",\n    \"hidden\",\n    \"indeterminate\",\n    \"inert\",\n    \"ismap\",\n    \"loop\",\n    \"multiple\",\n    \"muted\",\n    \"nomodule\",\n    \"novalidate\",\n    \"open\",\n    \"playsinline\",\n    \"readonly\",\n    \"required\",\n    \"reversed\",\n    \"seamless\",\n    \"selected\"\n];\nconst BooleanAttributes = /*#__PURE__*/ new Set(booleans);\nconst ChildProperties = /*#__PURE__*/ new Set([\n    \"innerHTML\",\n    \"textContent\",\n    \"innerText\",\n    \"children\"\n]);\nconst Aliases = /*#__PURE__*/ Object.assign(Object.create(null), {\n    className: \"class\",\n    htmlFor: \"for\"\n});\nconst ES2017FLAG = seroval__WEBPACK_IMPORTED_MODULE_1__.Feature.AggregateError | seroval__WEBPACK_IMPORTED_MODULE_1__.Feature.BigIntTypedArray;\nconst GLOBAL_IDENTIFIER = \"_$HY.r\";\nfunction createSerializer({ onData, onDone, scopeId, onError }) {\n    return new seroval__WEBPACK_IMPORTED_MODULE_1__.Serializer({\n        scopeId,\n        plugins: [\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.CustomEventPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.DOMExceptionPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.EventPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.FormDataPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.HeadersPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.ReadableStreamPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.RequestPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.ResponsePlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.URLSearchParamsPlugin,\n            seroval_plugins_web__WEBPACK_IMPORTED_MODULE_2__.URLPlugin\n        ],\n        globalIdentifier: GLOBAL_IDENTIFIER,\n        disabledFeatures: ES2017FLAG,\n        onData,\n        onDone,\n        onError\n    });\n}\nfunction getLocalHeaderScript(id) {\n    return (0,seroval__WEBPACK_IMPORTED_MODULE_1__.getCrossReferenceHeader)(id) + \";\";\n}\nconst VOID_ELEMENTS = /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i;\nconst REPLACE_SCRIPT = `function $df(e,n,o,t){if(n=document.getElementById(e),o=document.getElementById(\"pl-\"+e)){for(;o&&8!==o.nodeType&&o.nodeValue!==\"pl-\"+e;)t=o.nextSibling,o.remove(),o=t;_$HY.done?o.remove():o.replaceWith(n.content)}n.remove(),_$HY.fe(e)}`;\nfunction renderToString(code, options = {}) {\n    const { renderId } = options;\n    let scripts = \"\";\n    const serializer = createSerializer({\n        scopeId: renderId,\n        onData (script) {\n            if (!scripts) {\n                scripts = getLocalHeaderScript(renderId);\n            }\n            scripts += script;\n        },\n        onError: options.onError\n    });\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context = {\n        id: renderId || \"\",\n        count: 0,\n        suspense: {},\n        lazy: {},\n        assets: [],\n        nonce: options.nonce,\n        serialize (id, p) {\n            !solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.noHydrate && serializer.write(id, p);\n        },\n        roots: 0,\n        nextRoot () {\n            return this.renderId + \"i-\" + this.roots++;\n        }\n    };\n    let html = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)((d)=>{\n        setTimeout(d);\n        return resolveSSRNode(escape(code()));\n    });\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.noHydrate = true;\n    serializer.close();\n    html = injectAssets(solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.assets, html);\n    if (scripts.length) html = injectScripts(html, scripts, options.nonce);\n    return html;\n}\nfunction renderToStringAsync(code, options = {}) {\n    const { timeoutMs = 30000 } = options;\n    let timeoutHandle;\n    const timeout = new Promise((_, reject)=>{\n        timeoutHandle = setTimeout(()=>reject(\"renderToString timed out\"), timeoutMs);\n    });\n    return Promise.race([\n        renderToStream(code, options),\n        timeout\n    ]).then((html)=>{\n        clearTimeout(timeoutHandle);\n        return html;\n    });\n}\nfunction renderToStream(code, options = {}) {\n    let { nonce, onCompleteShell, onCompleteAll, renderId, noScripts } = options;\n    let dispose;\n    const blockingPromises = [];\n    const pushTask = (task)=>{\n        if (noScripts) return;\n        if (!tasks && !firstFlushed) {\n            tasks = getLocalHeaderScript(renderId);\n        }\n        tasks += task + \";\";\n        if (!timer && firstFlushed) {\n            timer = setTimeout(writeTasks);\n        }\n    };\n    const onDone = ()=>{\n        writeTasks();\n        doShell();\n        onCompleteAll && onCompleteAll({\n            write (v) {\n                !completed && buffer.write(v);\n            }\n        });\n        writable && writable.end();\n        completed = true;\n        if (firstFlushed) dispose();\n    };\n    const serializer = createSerializer({\n        scopeId: options.renderId,\n        onData: pushTask,\n        onDone,\n        onError: options.onError\n    });\n    const flushEnd = ()=>{\n        if (!registry.size) {\n            queue(()=>queue(()=>serializer.flush()));\n        }\n    };\n    const registry = new Map();\n    const writeTasks = ()=>{\n        if (tasks.length && !completed && firstFlushed) {\n            buffer.write(`<script${nonce ? ` nonce=\"${nonce}\"` : \"\"}>${tasks}</script>`);\n            tasks = \"\";\n        }\n        timer && clearTimeout(timer);\n        timer = null;\n    };\n    let context;\n    let writable;\n    let tmp = \"\";\n    let tasks = \"\";\n    let firstFlushed = false;\n    let completed = false;\n    let shellCompleted = false;\n    let scriptFlushed = false;\n    let timer = null;\n    let buffer = {\n        write (payload) {\n            tmp += payload;\n        }\n    };\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context = context = {\n        id: renderId || \"\",\n        count: 0,\n        async: true,\n        resources: {},\n        lazy: {},\n        suspense: {},\n        assets: [],\n        nonce,\n        block (p) {\n            if (!firstFlushed) blockingPromises.push(p);\n        },\n        replace (id, payloadFn) {\n            if (firstFlushed) return;\n            const placeholder = `<!--!$${id}-->`;\n            const first = html.indexOf(placeholder);\n            if (first === -1) return;\n            const last = html.indexOf(`<!--!$/${id}-->`, first + placeholder.length);\n            html = html.replace(html.slice(first, last + placeholder.length + 1), resolveSSRNode(payloadFn()));\n        },\n        serialize (id, p, wait) {\n            const serverOnly = solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.noHydrate;\n            if (!firstFlushed && wait && typeof p === \"object\" && \"then\" in p) {\n                blockingPromises.push(p);\n                !serverOnly && p.then((d)=>{\n                    serializer.write(id, d);\n                }).catch((e)=>{\n                    serializer.write(id, e);\n                });\n            } else if (!serverOnly) serializer.write(id, p);\n        },\n        roots: 0,\n        nextRoot () {\n            return this.renderId + \"i-\" + this.roots++;\n        },\n        registerFragment (key) {\n            if (!registry.has(key)) {\n                let resolve, reject;\n                const p = new Promise((r, rej)=>(resolve = r, reject = rej));\n                registry.set(key, (err)=>queue(()=>queue(()=>{\n                            err ? reject(err) : resolve(true);\n                            queue(flushEnd);\n                        })));\n                serializer.write(key, p);\n            }\n            return (value, error)=>{\n                if (registry.has(key)) {\n                    const resolve = registry.get(key);\n                    registry.delete(key);\n                    if (waitForFragments(registry, key)) {\n                        resolve();\n                        return;\n                    }\n                    if (!completed) {\n                        if (!firstFlushed) {\n                            queue(()=>html = replacePlaceholder(html, key, value !== undefined ? value : \"\"));\n                            resolve(error);\n                        } else {\n                            buffer.write(`<template id=\"${key}\">${value !== undefined ? value : \" \"}</template>`);\n                            pushTask(`$df(\"${key}\")${!scriptFlushed ? \";\" + REPLACE_SCRIPT : \"\"}`);\n                            resolve(error);\n                            scriptFlushed = true;\n                        }\n                    }\n                }\n                return firstFlushed;\n            };\n        }\n    };\n    let html = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.createRoot)((d)=>{\n        dispose = d;\n        return resolveSSRNode(escape(code()));\n    });\n    function doShell() {\n        if (shellCompleted) return;\n        solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context = context;\n        context.noHydrate = true;\n        html = injectAssets(context.assets, html);\n        if (tasks.length) html = injectScripts(html, tasks, nonce);\n        buffer.write(html);\n        tasks = \"\";\n        onCompleteShell && onCompleteShell({\n            write (v) {\n                !completed && buffer.write(v);\n            }\n        });\n        shellCompleted = true;\n    }\n    return {\n        then (fn) {\n            function complete() {\n                dispose();\n                fn(tmp);\n            }\n            if (onCompleteAll) {\n                let ogComplete = onCompleteAll;\n                onCompleteAll = (options)=>{\n                    ogComplete(options);\n                    complete();\n                };\n            } else onCompleteAll = complete;\n            queue(flushEnd);\n        },\n        pipe (w) {\n            allSettled(blockingPromises).then(()=>{\n                setTimeout(()=>{\n                    doShell();\n                    buffer = writable = w;\n                    buffer.write(tmp);\n                    firstFlushed = true;\n                    if (completed) {\n                        dispose();\n                        writable.end();\n                    } else flushEnd();\n                });\n            });\n        },\n        pipeTo (w) {\n            return allSettled(blockingPromises).then(()=>{\n                let resolve;\n                const p = new Promise((r)=>resolve = r);\n                setTimeout(()=>{\n                    doShell();\n                    const encoder = new TextEncoder();\n                    const writer = w.getWriter();\n                    writable = {\n                        end () {\n                            writer.releaseLock();\n                            w.close();\n                            resolve();\n                        }\n                    };\n                    buffer = {\n                        write (payload) {\n                            writer.write(encoder.encode(payload));\n                        }\n                    };\n                    buffer.write(tmp);\n                    firstFlushed = true;\n                    if (completed) {\n                        dispose();\n                        writable.end();\n                    } else flushEnd();\n                });\n                return p;\n            });\n        }\n    };\n}\nfunction HydrationScript(props) {\n    const { nonce } = solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context;\n    return ssr(generateHydrationScript({\n        nonce,\n        ...props\n    }));\n}\nfunction ssr(t, ...nodes) {\n    if (nodes.length) {\n        let result = \"\";\n        for(let i = 0; i < nodes.length; i++){\n            result += t[i];\n            const node = nodes[i];\n            if (node !== undefined) result += resolveSSRNode(node);\n        }\n        t = result + t[nodes.length];\n    }\n    return {\n        t\n    };\n}\nfunction ssrClassList(value) {\n    if (!value) return \"\";\n    let classKeys = Object.keys(value), result = \"\";\n    for(let i = 0, len = classKeys.length; i < len; i++){\n        const key = classKeys[i], classValue = !!value[key];\n        if (!key || key === \"undefined\" || !classValue) continue;\n        i && (result += \" \");\n        result += escape(key);\n    }\n    return result;\n}\nfunction ssrStyle(value) {\n    if (!value) return \"\";\n    if (typeof value === \"string\") return escape(value, true);\n    let result = \"\";\n    const k = Object.keys(value);\n    for(let i = 0; i < k.length; i++){\n        const s = k[i];\n        const v = value[s];\n        if (v != undefined) {\n            if (i) result += \";\";\n            result += `${s}:${escape(v, true)}`;\n        }\n    }\n    return result;\n}\nfunction ssrElement(tag, props, children, needsId) {\n    if (props == null) props = {};\n    else if (typeof props === \"function\") props = props();\n    const skipChildren = VOID_ELEMENTS.test(tag);\n    const keys = Object.keys(props);\n    let result = `<${tag}${needsId ? ssrHydrationKey() : \"\"} `;\n    let classResolved;\n    for(let i = 0; i < keys.length; i++){\n        const prop = keys[i];\n        if (ChildProperties.has(prop)) {\n            if (children === undefined && !skipChildren) children = prop === \"innerHTML\" ? props[prop] : escape(props[prop]);\n            continue;\n        }\n        const value = props[prop];\n        if (prop === \"style\") {\n            result += `style=\"${ssrStyle(value)}\"`;\n        } else if (prop === \"class\" || prop === \"className\" || prop === \"classList\") {\n            if (classResolved) continue;\n            let n;\n            result += `class=\"${escape(((n = props.class) ? n + \" \" : \"\") + ((n = props.className) ? n + \" \" : \"\"), true) + ssrClassList(props.classList)}\"`;\n            classResolved = true;\n        } else if (BooleanAttributes.has(prop)) {\n            if (value) result += prop;\n            else continue;\n        } else if (value == undefined || prop === \"ref\" || prop.slice(0, 2) === \"on\") {\n            continue;\n        } else {\n            result += `${Aliases[prop] || prop}=\"${escape(value, true)}\"`;\n        }\n        if (i !== keys.length - 1) result += \" \";\n    }\n    if (skipChildren) return {\n        t: result + \"/>\"\n    };\n    if (typeof children === \"function\") children = children();\n    return {\n        t: result + `>${resolveSSRNode(children, true)}</${tag}>`\n    };\n}\nfunction ssrAttribute(key, value, isBoolean) {\n    return isBoolean ? value ? \" \" + key : \"\" : value != null ? ` ${key}=\"${value}\"` : \"\";\n}\nfunction ssrHydrationKey() {\n    const hk = getHydrationKey();\n    return hk ? ` data-hk=\"${hk}\"` : \"\";\n}\nfunction escape(s, attr) {\n    const t = typeof s;\n    if (t !== \"string\") {\n        if (!attr && t === \"function\") return escape(s());\n        if (!attr && Array.isArray(s)) {\n            for(let i = 0; i < s.length; i++)s[i] = escape(s[i]);\n            return s;\n        }\n        if (attr && t === \"boolean\") return String(s);\n        return s;\n    }\n    const delim = attr ? '\"' : \"<\";\n    const escDelim = attr ? \"&quot;\" : \"&lt;\";\n    let iDelim = s.indexOf(delim);\n    let iAmp = s.indexOf(\"&\");\n    if (iDelim < 0 && iAmp < 0) return s;\n    let left = 0, out = \"\";\n    while(iDelim >= 0 && iAmp >= 0){\n        if (iDelim < iAmp) {\n            if (left < iDelim) out += s.substring(left, iDelim);\n            out += escDelim;\n            left = iDelim + 1;\n            iDelim = s.indexOf(delim, left);\n        } else {\n            if (left < iAmp) out += s.substring(left, iAmp);\n            out += \"&amp;\";\n            left = iAmp + 1;\n            iAmp = s.indexOf(\"&\", left);\n        }\n    }\n    if (iDelim >= 0) {\n        do {\n            if (left < iDelim) out += s.substring(left, iDelim);\n            out += escDelim;\n            left = iDelim + 1;\n            iDelim = s.indexOf(delim, left);\n        }while (iDelim >= 0);\n    } else while(iAmp >= 0){\n        if (left < iAmp) out += s.substring(left, iAmp);\n        out += \"&amp;\";\n        left = iAmp + 1;\n        iAmp = s.indexOf(\"&\", left);\n    }\n    return left < s.length ? out + s.substring(left) : out;\n}\nfunction resolveSSRNode(node, top) {\n    const t = typeof node;\n    if (t === \"string\") return node;\n    if (node == null || t === \"boolean\") return \"\";\n    if (Array.isArray(node)) {\n        let prev = {};\n        let mapped = \"\";\n        for(let i = 0, len = node.length; i < len; i++){\n            if (!top && typeof prev !== \"object\" && typeof node[i] !== \"object\") mapped += `<!--!$-->`;\n            mapped += resolveSSRNode(prev = node[i]);\n        }\n        return mapped;\n    }\n    if (t === \"object\") return node.t;\n    if (t === \"function\") return resolveSSRNode(node());\n    return String(node);\n}\nfunction getHydrationKey() {\n    const hydrate = solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context;\n    return hydrate && !hydrate.noHydrate && `${hydrate.id}${hydrate.count++}`;\n}\nfunction useAssets(fn) {\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.assets.push(()=>resolveSSRNode(fn()));\n}\nfunction getAssets() {\n    const assets = solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.assets;\n    let out = \"\";\n    for(let i = 0, len = assets.length; i < len; i++)out += assets[i]();\n    return out;\n}\nfunction generateHydrationScript({ eventNames = [\n    \"click\",\n    \"input\"\n], nonce } = {}) {\n    return `<script${nonce ? ` nonce=\"${nonce}\"` : \"\"}>window._$HY||(e=>{let t=e=>e&&e.hasAttribute&&(e.hasAttribute(\"data-hk\")?e:t(e.host&&e.host.nodeType?e.host:e.parentNode));[\"${eventNames.join('\", \"')}\"].forEach((o=>document.addEventListener(o,(o=>{let a=o.composedPath&&o.composedPath()[0]||o.target,s=t(a);s&&!e.completed.has(s)&&e.events.push([s,o])}))))})(_$HY={events:[],completed:new WeakSet,r:{},fe(){}});</script><!--xs-->`;\n}\nfunction Hydration(props) {\n    if (!solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.noHydrate) return props.children;\n    const context = solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context;\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context = {\n        ...context,\n        count: 0,\n        id: `${context.id}${context.count++}-`,\n        noHydrate: false\n    };\n    const res = props.children;\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context = context;\n    return res;\n}\nfunction NoHydration(props) {\n    solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.noHydrate = true;\n    return props.children;\n}\nfunction queue(fn) {\n    return Promise.resolve().then(fn);\n}\nfunction allSettled(promises) {\n    let length = promises.length;\n    return Promise.allSettled(promises).then(()=>{\n        if (promises.length !== length) return allSettled(promises);\n        return;\n    });\n}\nfunction injectAssets(assets, html) {\n    if (!assets || !assets.length) return html;\n    let out = \"\";\n    for(let i = 0, len = assets.length; i < len; i++)out += assets[i]();\n    return html.replace(`</head>`, out + `</head>`);\n}\nfunction injectScripts(html, scripts, nonce) {\n    const tag = `<script${nonce ? ` nonce=\"${nonce}\"` : \"\"}>${scripts}</script>`;\n    const index = html.indexOf(\"<!--xs-->\");\n    if (index > -1) {\n        return html.slice(0, index) + tag + html.slice(index);\n    }\n    return html + tag;\n}\nfunction waitForFragments(registry, key) {\n    for (const k of [\n        ...registry.keys()\n    ].reverse()){\n        if (key.startsWith(k)) return true;\n    }\n    return false;\n}\nfunction replacePlaceholder(html, key, value) {\n    const marker = `<template id=\"pl-${key}\">`;\n    const close = `<!--pl-${key}-->`;\n    const first = html.indexOf(marker);\n    if (first === -1) return html;\n    const last = html.indexOf(close, first + marker.length);\n    return html.slice(0, first) + value + html.slice(last + close.length);\n}\nconst RequestContext = Symbol();\nfunction getRequestEvent() {\n    return globalThis[RequestContext] ? globalThis[RequestContext].getStore() || solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context && solid_js__WEBPACK_IMPORTED_MODULE_0__.sharedConfig.context.event || console.log(\"RequestEvent is missing. This is most likely due to accessing `getRequestEvent` non-managed async scope in a partially polyfilled environment. Try moving it above all `await` calls.\") : undefined;\n}\nfunction Assets(props) {\n    useAssets(()=>props.children);\n}\nfunction pipeToNodeWritable(code, writable, options = {}) {\n    if (options.onReady) {\n        options.onCompleteShell = ({ write })=>{\n            options.onReady({\n                write,\n                startWriting () {\n                    stream.pipe(writable);\n                }\n            });\n        };\n    }\n    const stream = renderToStream(code, options);\n    if (!options.onReady) stream.pipe(writable);\n}\nfunction pipeToWritable(code, writable, options = {}) {\n    if (options.onReady) {\n        options.onCompleteShell = ({ write })=>{\n            options.onReady({\n                write,\n                startWriting () {\n                    stream.pipeTo(writable);\n                }\n            });\n        };\n    }\n    const stream = renderToStream(code, options);\n    if (!options.onReady) stream.pipeTo(writable);\n}\nfunction ssrSpread(props, isSVG, skipChildren) {\n    let result = \"\";\n    if (props == null) return result;\n    if (typeof props === \"function\") props = props();\n    const keys = Object.keys(props);\n    let classResolved;\n    for(let i = 0; i < keys.length; i++){\n        let prop = keys[i];\n        if (prop === \"children\") {\n            !skipChildren && console.warn(`SSR currently does not support spread children.`);\n            continue;\n        }\n        const value = props[prop];\n        if (prop === \"style\") {\n            result += `style=\"${ssrStyle(value)}\"`;\n        } else if (prop === \"class\" || prop === \"className\" || prop === \"classList\") {\n            if (classResolved) continue;\n            let n;\n            result += `class=\"${(n = props.class) ? n + \" \" : \"\"}${(n = props.className) ? n + \" \" : \"\"}${ssrClassList(props.classList)}\"`;\n            classResolved = true;\n        } else if (BooleanAttributes.has(prop)) {\n            if (value) result += prop;\n            else continue;\n        } else if (value == undefined || prop === \"ref\" || prop.slice(0, 2) === \"on\" || prop.slice(0, 5) === \"prop:\") {\n            continue;\n        } else {\n            if (prop.slice(0, 5) === \"attr:\") prop = prop.slice(5);\n            result += `${Aliases[prop] || prop}=\"${escape(value, true)}\"`;\n        }\n        if (i !== keys.length - 1) result += \" \";\n    }\n    return result;\n}\nconst isServer = true;\nconst isDev = false;\nfunction render() {}\nfunction hydrate() {}\nfunction insert() {}\nfunction spread() {}\nfunction addEventListener() {}\nfunction delegateEvents() {}\nfunction Dynamic(props) {\n    const [p, others] = (0,solid_js__WEBPACK_IMPORTED_MODULE_0__.splitProps)(props, [\n        \"component\"\n    ]);\n    const comp = p.component, t = typeof comp;\n    if (comp) {\n        if (t === \"function\") return comp(others);\n        else if (t === \"string\") {\n            return ssrElement(comp, others, undefined, true);\n        }\n    }\n}\nfunction Portal(props) {\n    return \"\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/solid-js/web/dist/server.js\n");

/***/ })

};
;