"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/seroval";
exports.ids = ["vendor-chunks/seroval"];
exports.modules = {

/***/ "(ssr)/./node_modules/seroval/dist/esm/development/index.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/seroval/dist/esm/development/index.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Feature: () => (/* binding */ Feature),\n/* harmony export */   Serializer: () => (/* binding */ Serializer),\n/* harmony export */   SerovalDeserializationError: () => (/* binding */ SerovalDeserializationError),\n/* harmony export */   SerovalError: () => (/* binding */ SerovalError),\n/* harmony export */   SerovalMissingInstanceError: () => (/* binding */ SerovalMissingInstanceError),\n/* harmony export */   SerovalMissingPluginError: () => (/* binding */ SerovalMissingPluginError),\n/* harmony export */   SerovalMissingReferenceError: () => (/* binding */ SerovalMissingReferenceError),\n/* harmony export */   SerovalMissingReferenceForIdError: () => (/* binding */ SerovalMissingReferenceForIdError),\n/* harmony export */   SerovalParserError: () => (/* binding */ SerovalParserError),\n/* harmony export */   SerovalSerializationError: () => (/* binding */ SerovalSerializationError),\n/* harmony export */   SerovalUnknownTypedArrayError: () => (/* binding */ SerovalUnknownTypedArrayError),\n/* harmony export */   SerovalUnsupportedNodeError: () => (/* binding */ SerovalUnsupportedNodeError),\n/* harmony export */   SerovalUnsupportedTypeError: () => (/* binding */ SerovalUnsupportedTypeError),\n/* harmony export */   compileJSON: () => (/* binding */ compileJSON),\n/* harmony export */   createPlugin: () => (/* binding */ createPlugin),\n/* harmony export */   createReference: () => (/* binding */ createReference),\n/* harmony export */   createStream: () => (/* binding */ createStream),\n/* harmony export */   crossSerialize: () => (/* binding */ crossSerialize),\n/* harmony export */   crossSerializeAsync: () => (/* binding */ crossSerializeAsync),\n/* harmony export */   crossSerializeStream: () => (/* binding */ crossSerializeStream),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   fromCrossJSON: () => (/* binding */ fromCrossJSON),\n/* harmony export */   fromJSON: () => (/* binding */ fromJSON),\n/* harmony export */   getCrossReferenceHeader: () => (/* binding */ getCrossReferenceHeader),\n/* harmony export */   resolvePlugins: () => (/* binding */ resolvePlugins),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   serializeAsync: () => (/* binding */ serializeAsync),\n/* harmony export */   toCrossJSON: () => (/* binding */ toCrossJSON),\n/* harmony export */   toCrossJSONAsync: () => (/* binding */ toCrossJSONAsync),\n/* harmony export */   toCrossJSONStream: () => (/* binding */ toCrossJSONStream),\n/* harmony export */   toJSON: () => (/* binding */ toJSON),\n/* harmony export */   toJSONAsync: () => (/* binding */ toJSONAsync)\n/* harmony export */ });\n// src/core/compat.ts\nvar Feature = /* @__PURE__ */ ((Feature2)=>{\n    Feature2[Feature2[\"AggregateError\"] = 1] = \"AggregateError\";\n    Feature2[Feature2[\"ArrowFunction\"] = 2] = \"ArrowFunction\";\n    Feature2[Feature2[\"ErrorPrototypeStack\"] = 4] = \"ErrorPrototypeStack\";\n    Feature2[Feature2[\"ObjectAssign\"] = 8] = \"ObjectAssign\";\n    Feature2[Feature2[\"BigIntTypedArray\"] = 16] = \"BigIntTypedArray\";\n    return Feature2;\n})(Feature || {});\nvar ALL_ENABLED = 31;\n// src/core/utils/assert.ts\nfunction assert(cond, error) {\n    if (!cond) {\n        throw error;\n    }\n}\n// src/core/string.ts\nfunction serializeChar(str) {\n    switch(str){\n        case '\"':\n            return '\\\\\"';\n        case \"\\\\\":\n            return \"\\\\\\\\\";\n        case \"\\n\":\n            return \"\\\\n\";\n        case \"\\r\":\n            return \"\\\\r\";\n        case \"\\b\":\n            return \"\\\\b\";\n        case \"\t\":\n            return \"\\\\t\";\n        case \"\\f\":\n            return \"\\\\f\";\n        case \"<\":\n            return \"\\\\x3C\";\n        case \"\\u2028\":\n            return \"\\\\u2028\";\n        case \"\\u2029\":\n            return \"\\\\u2029\";\n        default:\n            return void 0;\n    }\n}\nfunction serializeString(str) {\n    let result = \"\";\n    let lastPos = 0;\n    let replacement;\n    for(let i = 0, len = str.length; i < len; i++){\n        replacement = serializeChar(str[i]);\n        if (replacement) {\n            result += str.slice(lastPos, i) + replacement;\n            lastPos = i + 1;\n        }\n    }\n    if (lastPos === 0) {\n        result = str;\n    } else {\n        result += str.slice(lastPos);\n    }\n    return result;\n}\nfunction deserializeReplacer(str) {\n    switch(str){\n        case \"\\\\\\\\\":\n            return \"\\\\\";\n        case '\\\\\"':\n            return '\"';\n        case \"\\\\n\":\n            return \"\\n\";\n        case \"\\\\r\":\n            return \"\\r\";\n        case \"\\\\b\":\n            return \"\\b\";\n        case \"\\\\t\":\n            return \"\t\";\n        case \"\\\\f\":\n            return \"\\f\";\n        case \"\\\\x3C\":\n            return \"<\";\n        case \"\\\\u2028\":\n            return \"\\u2028\";\n        case \"\\\\u2029\":\n            return \"\\u2029\";\n        default:\n            return str;\n    }\n}\nfunction deserializeString(str) {\n    return str.replace(/(\\\\\\\\|\\\\\"|\\\\n|\\\\r|\\\\b|\\\\t|\\\\f|\\\\u2028|\\\\u2029|\\\\x3C)/g, deserializeReplacer);\n}\n// src/core/keys.ts\nvar REFERENCES_KEY = \"__SEROVAL_REFS__\";\nvar GLOBAL_CONTEXT_REFERENCES = \"$R\";\nvar GLOBAL_CONTEXT_R = `self.${GLOBAL_CONTEXT_REFERENCES}`;\nfunction getCrossReferenceHeader(id) {\n    if (id == null) {\n        return `${GLOBAL_CONTEXT_R}=${GLOBAL_CONTEXT_R}||[]`;\n    }\n    return `(${GLOBAL_CONTEXT_R}=${GLOBAL_CONTEXT_R}||{})[\"${serializeString(id)}\"]=[]`;\n}\n// src/core/reference.ts\nvar REFERENCE = /* @__PURE__ */ new Map();\nvar INV_REFERENCE = /* @__PURE__ */ new Map();\nfunction createReference(id, value) {\n    REFERENCE.set(value, id);\n    INV_REFERENCE.set(id, value);\n    return value;\n}\nfunction hasReferenceID(value) {\n    return REFERENCE.has(value);\n}\nfunction hasReference(id) {\n    return INV_REFERENCE.has(id);\n}\nfunction getReferenceID(value) {\n    assert(hasReferenceID(value), new SerovalMissingReferenceError(value));\n    return REFERENCE.get(value);\n}\nfunction getReference(id) {\n    assert(hasReference(id), new SerovalMissingReferenceForIdError(id));\n    return INV_REFERENCE.get(id);\n}\nif (typeof globalThis !== \"undefined\") {\n    Object.defineProperty(globalThis, REFERENCES_KEY, {\n        value: INV_REFERENCE,\n        configurable: true,\n        writable: false,\n        enumerable: false\n    });\n} else if (false) {} else if (typeof self !== \"undefined\") {\n    Object.defineProperty(self, REFERENCES_KEY, {\n        value: INV_REFERENCE,\n        configurable: true,\n        writable: false,\n        enumerable: false\n    });\n} else if (typeof global !== \"undefined\") {\n    Object.defineProperty(global, REFERENCES_KEY, {\n        value: INV_REFERENCE,\n        configurable: true,\n        writable: false,\n        enumerable: false\n    });\n}\n// src/core/plugin.ts\nfunction createPlugin(plugin) {\n    return plugin;\n}\nfunction dedupePlugins(deduped, plugins) {\n    for(let i = 0, len = plugins.length; i < len; i++){\n        const current = plugins[i];\n        if (!deduped.has(current)) {\n            deduped.add(current);\n            if (current.extends) {\n                dedupePlugins(deduped, current.extends);\n            }\n        }\n    }\n}\nfunction resolvePlugins(plugins) {\n    if (plugins) {\n        const deduped = /* @__PURE__ */ new Set();\n        dedupePlugins(deduped, plugins);\n        return [\n            ...deduped\n        ];\n    }\n    return void 0;\n}\n// src/core/constants.ts\nvar SYMBOL_STRING = {\n    [0 /* AsyncIterator */ ]: \"Symbol.asyncIterator\",\n    [1 /* HasInstance */ ]: \"Symbol.hasInstance\",\n    [2 /* IsConcatSpreadable */ ]: \"Symbol.isConcatSpreadable\",\n    [3 /* Iterator */ ]: \"Symbol.iterator\",\n    [4 /* Match */ ]: \"Symbol.match\",\n    [5 /* MatchAll */ ]: \"Symbol.matchAll\",\n    [6 /* Replace */ ]: \"Symbol.replace\",\n    [7 /* Search */ ]: \"Symbol.search\",\n    [8 /* Species */ ]: \"Symbol.species\",\n    [9 /* Split */ ]: \"Symbol.split\",\n    [10 /* ToPrimitive */ ]: \"Symbol.toPrimitive\",\n    [11 /* ToStringTag */ ]: \"Symbol.toStringTag\",\n    [12 /* Unscopables */ ]: \"Symbol.unscopables\"\n};\nvar INV_SYMBOL_REF = {\n    [Symbol.asyncIterator]: 0 /* AsyncIterator */ ,\n    [Symbol.hasInstance]: 1 /* HasInstance */ ,\n    [Symbol.isConcatSpreadable]: 2 /* IsConcatSpreadable */ ,\n    [Symbol.iterator]: 3 /* Iterator */ ,\n    [Symbol.match]: 4 /* Match */ ,\n    [Symbol.matchAll]: 5 /* MatchAll */ ,\n    [Symbol.replace]: 6 /* Replace */ ,\n    [Symbol.search]: 7 /* Search */ ,\n    [Symbol.species]: 8 /* Species */ ,\n    [Symbol.split]: 9 /* Split */ ,\n    [Symbol.toPrimitive]: 10 /* ToPrimitive */ ,\n    [Symbol.toStringTag]: 11 /* ToStringTag */ ,\n    [Symbol.unscopables]: 12 /* Unscopables */ \n};\nvar SYMBOL_REF = {\n    [0 /* AsyncIterator */ ]: Symbol.asyncIterator,\n    [1 /* HasInstance */ ]: Symbol.hasInstance,\n    [2 /* IsConcatSpreadable */ ]: Symbol.isConcatSpreadable,\n    [3 /* Iterator */ ]: Symbol.iterator,\n    [4 /* Match */ ]: Symbol.match,\n    [5 /* MatchAll */ ]: Symbol.matchAll,\n    [6 /* Replace */ ]: Symbol.replace,\n    [7 /* Search */ ]: Symbol.search,\n    [8 /* Species */ ]: Symbol.species,\n    [9 /* Split */ ]: Symbol.split,\n    [10 /* ToPrimitive */ ]: Symbol.toPrimitive,\n    [11 /* ToStringTag */ ]: Symbol.toStringTag,\n    [12 /* Unscopables */ ]: Symbol.unscopables\n};\nvar CONSTANT_STRING = {\n    [2 /* True */ ]: \"!0\",\n    [3 /* False */ ]: \"!1\",\n    [1 /* Undefined */ ]: \"void 0\",\n    [0 /* Null */ ]: \"null\",\n    [4 /* NegativeZero */ ]: \"-0\",\n    [5 /* Infinity */ ]: \"1/0\",\n    [6 /* NegativeInfinity */ ]: \"-1/0\",\n    [7 /* NaN */ ]: \"0/0\"\n};\nvar CONSTANT_VAL = {\n    [2 /* True */ ]: true,\n    [3 /* False */ ]: false,\n    [1 /* Undefined */ ]: void 0,\n    [0 /* Null */ ]: null,\n    [4 /* NegativeZero */ ]: -0,\n    [5 /* Infinity */ ]: Infinity,\n    [6 /* NegativeInfinity */ ]: -Infinity,\n    [7 /* NaN */ ]: NaN\n};\nvar ERROR_CONSTRUCTOR_STRING = {\n    [0 /* Error */ ]: \"Error\",\n    [1 /* EvalError */ ]: \"EvalError\",\n    [2 /* RangeError */ ]: \"RangeError\",\n    [3 /* ReferenceError */ ]: \"ReferenceError\",\n    [4 /* SyntaxError */ ]: \"SyntaxError\",\n    [5 /* TypeError */ ]: \"TypeError\",\n    [6 /* URIError */ ]: \"URIError\"\n};\nvar ERROR_CONSTRUCTOR = {\n    [0 /* Error */ ]: Error,\n    [1 /* EvalError */ ]: EvalError,\n    [2 /* RangeError */ ]: RangeError,\n    [3 /* ReferenceError */ ]: ReferenceError,\n    [4 /* SyntaxError */ ]: SyntaxError,\n    [5 /* TypeError */ ]: TypeError,\n    [6 /* URIError */ ]: URIError\n};\n// src/core/literals.ts\nfunction createConstantNode(value) {\n    return {\n        t: 2 /* Constant */ ,\n        i: void 0,\n        s: value,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nvar TRUE_NODE = /* @__PURE__ */ createConstantNode(2 /* True */ );\nvar FALSE_NODE = /* @__PURE__ */ createConstantNode(3 /* False */ );\nvar UNDEFINED_NODE = /* @__PURE__ */ createConstantNode(1 /* Undefined */ );\nvar NULL_NODE = /* @__PURE__ */ createConstantNode(0 /* Null */ );\nvar NEG_ZERO_NODE = /* @__PURE__ */ createConstantNode(4 /* NegativeZero */ );\nvar INFINITY_NODE = /* @__PURE__ */ createConstantNode(5 /* Infinity */ );\nvar NEG_INFINITY_NODE = /* @__PURE__ */ createConstantNode(6 /* NegativeInfinity */ );\nvar NAN_NODE = /* @__PURE__ */ createConstantNode(7 /* NaN */ );\n// src/core/utils/error.ts\nfunction getErrorConstructor(error) {\n    if (error instanceof EvalError) {\n        return 1 /* EvalError */ ;\n    }\n    if (error instanceof RangeError) {\n        return 2 /* RangeError */ ;\n    }\n    if (error instanceof ReferenceError) {\n        return 3 /* ReferenceError */ ;\n    }\n    if (error instanceof SyntaxError) {\n        return 4 /* SyntaxError */ ;\n    }\n    if (error instanceof TypeError) {\n        return 5 /* TypeError */ ;\n    }\n    if (error instanceof URIError) {\n        return 6 /* URIError */ ;\n    }\n    return 0 /* Error */ ;\n}\nfunction getInitialErrorOptions(error) {\n    const construct = ERROR_CONSTRUCTOR_STRING[getErrorConstructor(error)];\n    if (error.name !== construct) {\n        return {\n            name: error.name\n        };\n    }\n    if (error.constructor.name !== construct) {\n        return {\n            name: error.constructor.name\n        };\n    }\n    return {};\n}\nfunction getErrorOptions(error, features) {\n    let options = getInitialErrorOptions(error);\n    const names = Object.getOwnPropertyNames(error);\n    for(let i = 0, len = names.length, name; i < len; i++){\n        name = names[i];\n        if (name !== \"name\" && name !== \"message\") {\n            if (name === \"stack\") {\n                if (features & 4 /* ErrorPrototypeStack */ ) {\n                    options = options || {};\n                    options[name] = error[name];\n                }\n            } else {\n                options = options || {};\n                options[name] = error[name];\n            }\n        }\n    }\n    return options;\n}\n// src/core/utils/get-object-flag.ts\nfunction getObjectFlag(obj) {\n    if (Object.isFrozen(obj)) {\n        return 3 /* Frozen */ ;\n    }\n    if (Object.isSealed(obj)) {\n        return 2 /* Sealed */ ;\n    }\n    if (Object.isExtensible(obj)) {\n        return 0 /* None */ ;\n    }\n    return 1 /* NonExtensible */ ;\n}\n// src/core/base-primitives.ts\nfunction createNumberNode(value) {\n    switch(value){\n        case Infinity:\n            return INFINITY_NODE;\n        case -Infinity:\n            return NEG_INFINITY_NODE;\n    }\n    if (value !== value) {\n        return NAN_NODE;\n    }\n    if (Object.is(value, -0)) {\n        return NEG_ZERO_NODE;\n    }\n    return {\n        t: 0 /* Number */ ,\n        i: void 0,\n        s: value,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createStringNode(value) {\n    return {\n        t: 1 /* String */ ,\n        i: void 0,\n        s: serializeString(value),\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createBigIntNode(current) {\n    return {\n        t: 3 /* BigInt */ ,\n        i: void 0,\n        s: \"\" + current,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createIndexedValueNode(id) {\n    return {\n        t: 4 /* IndexedValue */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createDateNode(id, current) {\n    return {\n        t: 5 /* Date */ ,\n        i: id,\n        s: current.toISOString(),\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        f: void 0,\n        a: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createRegExpNode(id, current) {\n    return {\n        t: 6 /* RegExp */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: serializeString(current.source),\n        m: current.flags,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createArrayBufferNode(id, current) {\n    const bytes = new Uint8Array(current);\n    const len = bytes.length;\n    const values = new Array(len);\n    for(let i = 0; i < len; i++){\n        values[i] = bytes[i];\n    }\n    return {\n        t: 19 /* ArrayBuffer */ ,\n        i: id,\n        s: values,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createWKSymbolNode(id, current) {\n    return {\n        t: 17 /* WKSymbol */ ,\n        i: id,\n        s: INV_SYMBOL_REF[current],\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createReferenceNode(id, ref) {\n    return {\n        t: 18 /* Reference */ ,\n        i: id,\n        s: serializeString(getReferenceID(ref)),\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createPluginNode(id, tag, value) {\n    return {\n        t: 25 /* Plugin */ ,\n        i: id,\n        s: value,\n        l: void 0,\n        c: serializeString(tag),\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createArrayNode(id, current, parsedItems) {\n    return {\n        t: 9 /* Array */ ,\n        i: id,\n        s: void 0,\n        l: current.length,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: parsedItems,\n        f: void 0,\n        b: void 0,\n        o: getObjectFlag(current)\n    };\n}\nfunction createBoxedNode(id, boxed) {\n    return {\n        t: 21 /* Boxed */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: boxed,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createTypedArrayNode(id, current, buffer) {\n    return {\n        t: 15 /* TypedArray */ ,\n        i: id,\n        s: void 0,\n        l: current.length,\n        c: current.constructor.name,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: buffer,\n        b: current.byteOffset,\n        o: void 0\n    };\n}\nfunction createBigIntTypedArrayNode(id, current, buffer) {\n    return {\n        t: 16 /* BigIntTypedArray */ ,\n        i: id,\n        s: void 0,\n        l: current.length,\n        c: current.constructor.name,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: buffer,\n        b: current.byteOffset,\n        o: void 0\n    };\n}\nfunction createDataViewNode(id, current, buffer) {\n    return {\n        t: 20 /* DataView */ ,\n        i: id,\n        s: void 0,\n        l: current.byteLength,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: buffer,\n        b: current.byteOffset,\n        o: void 0\n    };\n}\nfunction createErrorNode(id, current, options) {\n    return {\n        t: 13 /* Error */ ,\n        i: id,\n        s: getErrorConstructor(current),\n        l: void 0,\n        c: void 0,\n        m: serializeString(current.message),\n        p: options,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createAggregateErrorNode(id, current, options) {\n    return {\n        t: 14 /* AggregateError */ ,\n        i: id,\n        s: getErrorConstructor(current),\n        l: void 0,\n        c: void 0,\n        m: serializeString(current.message),\n        p: options,\n        e: void 0,\n        a: void 0,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createSetNode(id, size, items) {\n    return {\n        t: 7 /* Set */ ,\n        i: id,\n        s: void 0,\n        l: size,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: items,\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createIteratorFactoryInstanceNode(factory, items) {\n    return {\n        t: 28 /* IteratorFactoryInstance */ ,\n        i: void 0,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: [\n            factory,\n            items\n        ],\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createAsyncIteratorFactoryInstanceNode(factory, items) {\n    return {\n        t: 30 /* AsyncIteratorFactoryInstance */ ,\n        i: void 0,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: [\n            factory,\n            items\n        ],\n        f: void 0,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createStreamConstructorNode(id, factory, sequence) {\n    return {\n        t: 31 /* StreamConstructor */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: sequence,\n        f: factory,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createStreamNextNode(id, parsed) {\n    return {\n        t: 32 /* StreamNext */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: parsed,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createStreamThrowNode(id, parsed) {\n    return {\n        t: 33 /* StreamThrow */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: parsed,\n        b: void 0,\n        o: void 0\n    };\n}\nfunction createStreamReturnNode(id, parsed) {\n    return {\n        t: 34 /* StreamReturn */ ,\n        i: id,\n        s: void 0,\n        l: void 0,\n        c: void 0,\n        m: void 0,\n        p: void 0,\n        e: void 0,\n        a: void 0,\n        f: parsed,\n        b: void 0,\n        o: void 0\n    };\n}\n// src/core/utils/iterator-to-sequence.ts\nfunction iteratorToSequence(source) {\n    const values = [];\n    let throwsAt = -1;\n    let doneAt = -1;\n    const iterator = source[Symbol.iterator]();\n    while(true){\n        try {\n            const value = iterator.next();\n            values.push(value.value);\n            if (value.done) {\n                doneAt = values.length - 1;\n                break;\n            }\n        } catch (error) {\n            throwsAt = values.length;\n            values.push(error);\n        }\n    }\n    return {\n        v: values,\n        t: throwsAt,\n        d: doneAt\n    };\n}\nfunction sequenceToIterator(sequence) {\n    return ()=>{\n        let index = 0;\n        return {\n            [Symbol.iterator] () {\n                return this;\n            },\n            next () {\n                if (index > sequence.d) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                const currentIndex = index++;\n                const currentItem = sequence.v[currentIndex];\n                if (currentIndex === sequence.t) {\n                    throw currentItem;\n                }\n                return {\n                    done: currentIndex === sequence.d,\n                    value: currentItem\n                };\n            }\n        };\n    };\n}\n// src/core/special-reference.ts\nvar ITERATOR = {};\nvar ASYNC_ITERATOR = {};\nvar SPECIAL_REFS = {\n    [0 /* MapSentinel */ ]: {},\n    [1 /* PromiseConstructor */ ]: {},\n    [2 /* PromiseResolve */ ]: {},\n    [3 /* PromiseReject */ ]: {},\n    [4 /* StreamConstructor */ ]: {}\n};\n// src/core/errors.ts\nvar { toString: objectToString } = Object.prototype;\nfunction getErrorMessage(type, cause) {\n    if (cause instanceof Error) {\n        return `Seroval caught an error during the ${type} process.\n  \n${cause.name}\n${cause.message}\n\n- For more information, please check the \"cause\" property of this error.\n- If you believe this is an error in Seroval, please submit an issue at https://github.com/lxsmnsyc/seroval/issues/new`;\n    }\n    return `Seroval caught an error during the ${type} process.\n\n\"${objectToString.call(cause)}\"\n\nFor more information, please check the \"cause\" property of this error.`;\n}\nvar SerovalError = class extends Error {\n    constructor(type, cause){\n        super(getErrorMessage(type, cause));\n        this.cause = cause;\n    }\n};\nvar SerovalParserError = class extends SerovalError {\n    constructor(cause){\n        super(\"parsing\", cause);\n    }\n};\nvar SerovalSerializationError = class extends SerovalError {\n    constructor(cause){\n        super(\"serialization\", cause);\n    }\n};\nvar SerovalDeserializationError = class extends SerovalError {\n    constructor(cause){\n        super(\"deserialization\", cause);\n    }\n};\nvar SerovalUnsupportedTypeError = class extends Error {\n    constructor(value){\n        super(`The value ${objectToString.call(value)} of type \"${typeof value}\" cannot be parsed/serialized.\n      \nThere are few workarounds for this problem:\n- Transform the value in a way that it can be serialized.\n- If the reference is present on multiple runtimes (isomorphic), you can use the Reference API to map the references.`);\n        this.value = value;\n    }\n};\nvar SerovalUnsupportedNodeError = class extends Error {\n    constructor(node){\n        super('Unsupported node type \"' + node.t + '\".');\n    }\n};\nvar SerovalMissingPluginError = class extends Error {\n    constructor(tag){\n        super('Missing plugin for tag \"' + tag + '\".');\n    }\n};\nvar SerovalMissingInstanceError = class extends Error {\n    constructor(tag){\n        super('Missing \"' + tag + '\" instance.');\n    }\n};\nvar SerovalMissingReferenceError = class extends Error {\n    constructor(value){\n        super('Missing reference for the value \"' + objectToString.call(value) + '\" of type \"' + typeof value + '\"');\n        this.value = value;\n    }\n};\nvar SerovalMissingReferenceForIdError = class extends Error {\n    constructor(id){\n        super('Missing reference for id \"' + serializeString(id) + '\"');\n    }\n};\nvar SerovalUnknownTypedArrayError = class extends Error {\n    constructor(name){\n        super('Unknown TypedArray \"' + name + '\"');\n    }\n};\n// src/core/context/parser.ts\nvar BaseParserContext = class {\n    constructor(options){\n        this.marked = /* @__PURE__ */ new Set();\n        this.plugins = options.plugins;\n        this.features = ALL_ENABLED ^ (options.disabledFeatures || 0);\n        this.refs = options.refs || /* @__PURE__ */ new Map();\n    }\n    markRef(id) {\n        this.marked.add(id);\n    }\n    isMarked(id) {\n        return this.marked.has(id);\n    }\n    getIndexedValue(current) {\n        const registeredId = this.refs.get(current);\n        if (registeredId != null) {\n            this.markRef(registeredId);\n            return {\n                type: 1 /* Indexed */ ,\n                value: createIndexedValueNode(registeredId)\n            };\n        }\n        const id = this.refs.size;\n        this.refs.set(current, id);\n        return {\n            type: 0 /* Fresh */ ,\n            value: id\n        };\n    }\n    getReference(current) {\n        const indexed = this.getIndexedValue(current);\n        if (indexed.type === 1 /* Indexed */ ) {\n            return indexed;\n        }\n        if (hasReferenceID(current)) {\n            return {\n                type: 2 /* Referenced */ ,\n                value: createReferenceNode(indexed.value, current)\n            };\n        }\n        return indexed;\n    }\n    getStrictReference(current) {\n        assert(hasReferenceID(current), new SerovalUnsupportedTypeError(current));\n        const result = this.getIndexedValue(current);\n        if (result.type === 1 /* Indexed */ ) {\n            return result.value;\n        }\n        return createReferenceNode(result.value, current);\n    }\n    parseFunction(current) {\n        return this.getStrictReference(current);\n    }\n    parseWellKnownSymbol(current) {\n        const ref = this.getReference(current);\n        if (ref.type !== 0 /* Fresh */ ) {\n            return ref.value;\n        }\n        assert(current in INV_SYMBOL_REF, new SerovalUnsupportedTypeError(current));\n        return createWKSymbolNode(ref.value, current);\n    }\n    parseSpecialReference(ref) {\n        const result = this.getIndexedValue(SPECIAL_REFS[ref]);\n        if (result.type === 1 /* Indexed */ ) {\n            return result.value;\n        }\n        return {\n            t: 26 /* SpecialReference */ ,\n            i: result.value,\n            s: ref,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: void 0,\n            e: void 0,\n            a: void 0,\n            f: void 0,\n            b: void 0,\n            o: void 0\n        };\n    }\n    parseIteratorFactory() {\n        const result = this.getIndexedValue(ITERATOR);\n        if (result.type === 1 /* Indexed */ ) {\n            return result.value;\n        }\n        return {\n            t: 27 /* IteratorFactory */ ,\n            i: result.value,\n            s: void 0,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: void 0,\n            e: void 0,\n            a: void 0,\n            f: this.parseWellKnownSymbol(Symbol.iterator),\n            b: void 0,\n            o: void 0\n        };\n    }\n    parseAsyncIteratorFactory() {\n        const result = this.getIndexedValue(ASYNC_ITERATOR);\n        if (result.type === 1 /* Indexed */ ) {\n            return result.value;\n        }\n        return {\n            t: 29 /* AsyncIteratorFactory */ ,\n            i: result.value,\n            s: void 0,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: void 0,\n            e: void 0,\n            a: [\n                this.parseSpecialReference(1 /* PromiseConstructor */ ),\n                this.parseWellKnownSymbol(Symbol.asyncIterator)\n            ],\n            f: void 0,\n            b: void 0,\n            o: void 0\n        };\n    }\n    createObjectNode(id, current, empty, record) {\n        return {\n            t: empty ? 11 /* NullConstructor */  : 10 /* Object */ ,\n            i: id,\n            s: void 0,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: record,\n            e: void 0,\n            a: void 0,\n            f: void 0,\n            b: void 0,\n            o: getObjectFlag(current)\n        };\n    }\n    createMapNode(id, k, v, s) {\n        return {\n            t: 8 /* Map */ ,\n            i: id,\n            s: void 0,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: void 0,\n            e: {\n                k,\n                v,\n                s\n            },\n            a: void 0,\n            f: this.parseSpecialReference(0 /* MapSentinel */ ),\n            b: void 0,\n            o: void 0\n        };\n    }\n    createPromiseConstructorNode(id) {\n        return {\n            t: 22 /* PromiseConstructor */ ,\n            i: id,\n            s: void 0,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: void 0,\n            e: void 0,\n            a: void 0,\n            f: this.parseSpecialReference(1 /* PromiseConstructor */ ),\n            b: void 0,\n            o: void 0\n        };\n    }\n};\n// src/core/utils/promise-to-result.ts\nasync function promiseToResult(current) {\n    try {\n        return [\n            1,\n            await current\n        ];\n    } catch (e) {\n        return [\n            0,\n            e\n        ];\n    }\n}\n// src/core/utils/deferred.ts\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    return {\n        promise: new Promise((res, rej)=>{\n            resolve = res;\n            reject = rej;\n        }),\n        resolve (value) {\n            resolve(value);\n        },\n        reject (value) {\n            reject(value);\n        }\n    };\n}\n// src/core/stream.ts\nfunction isStream(value) {\n    return \"__SEROVAL_STREAM__\" in value;\n}\nfunction createStream() {\n    const listeners = /* @__PURE__ */ new Set();\n    const buffer = [];\n    let alive = true;\n    let success = false;\n    function flushNext(value) {\n        for (const listener of listeners.keys()){\n            listener.next(value);\n        }\n    }\n    function flushThrow(value) {\n        for (const listener of listeners.keys()){\n            listener.throw(value);\n        }\n    }\n    function flushReturn(value) {\n        for (const listener of listeners.keys()){\n            listener.return(value);\n        }\n    }\n    return {\n        __SEROVAL_STREAM__: true,\n        on (listener) {\n            if (alive) {\n                listeners.add(listener);\n            }\n            for(let i = 0, len = buffer.length; i < len; i++){\n                const value = buffer[i];\n                if (i === len - 1) {\n                    if (success) {\n                        listener.return(value);\n                    } else {\n                        listener.throw(value);\n                    }\n                } else {\n                    listener.next(value);\n                }\n            }\n            return ()=>{\n                if (alive) {\n                    listeners.delete(listener);\n                }\n            };\n        },\n        next (value) {\n            if (alive) {\n                buffer.push(value);\n                flushNext(value);\n            }\n        },\n        throw (value) {\n            if (alive) {\n                buffer.push(value);\n                flushThrow(value);\n                alive = false;\n                success = false;\n                listeners.clear();\n            }\n        },\n        return (value) {\n            if (alive) {\n                buffer.push(value);\n                flushReturn(value);\n                alive = false;\n                success = true;\n                listeners.clear();\n            }\n        }\n    };\n}\nfunction createStreamFromAsyncIterable(iterable) {\n    const stream = createStream();\n    const iterator = iterable[Symbol.asyncIterator]();\n    async function push() {\n        try {\n            const value = await iterator.next();\n            if (value.done) {\n                stream.return(value.value);\n            } else {\n                stream.next(value.value);\n                await push();\n            }\n        } catch (error) {\n            stream.throw(error);\n        }\n    }\n    push().catch(()=>{});\n    return stream;\n}\nfunction streamToAsyncIterable(stream) {\n    return ()=>{\n        const buffer = [];\n        const pending = [];\n        let count = 0;\n        let doneAt = -1;\n        let isThrow = false;\n        function resolveAll() {\n            for(let i = 0, len = pending.length; i < len; i++){\n                pending[i].resolve({\n                    done: true,\n                    value: void 0\n                });\n            }\n        }\n        stream.on({\n            next (value) {\n                const current = pending.shift();\n                if (current) {\n                    current.resolve({\n                        done: false,\n                        value\n                    });\n                }\n                buffer.push(value);\n            },\n            throw (value) {\n                const current = pending.shift();\n                if (current) {\n                    current.reject(value);\n                }\n                resolveAll();\n                doneAt = buffer.length;\n                buffer.push(value);\n                isThrow = true;\n            },\n            return (value) {\n                const current = pending.shift();\n                if (current) {\n                    current.resolve({\n                        done: true,\n                        value\n                    });\n                }\n                resolveAll();\n                doneAt = buffer.length;\n                buffer.push(value);\n            }\n        });\n        function finalize() {\n            const current = count++;\n            const value = buffer[current];\n            if (current !== doneAt) {\n                return {\n                    done: false,\n                    value\n                };\n            }\n            if (isThrow) {\n                throw value;\n            }\n            return {\n                done: true,\n                value\n            };\n        }\n        return {\n            [Symbol.asyncIterator] () {\n                return this;\n            },\n            async next () {\n                if (doneAt === -1) {\n                    const current = count++;\n                    if (current >= buffer.length) {\n                        const deferred = createDeferred();\n                        pending.push(deferred);\n                        return await deferred.promise;\n                    }\n                    return {\n                        done: false,\n                        value: buffer[current]\n                    };\n                }\n                if (count > doneAt) {\n                    return {\n                        done: true,\n                        value: void 0\n                    };\n                }\n                return finalize();\n            }\n        };\n    };\n}\n// src/core/context/parser/async.ts\nvar BaseAsyncParserContext = class extends BaseParserContext {\n    async parseItems(current) {\n        const nodes = [];\n        for(let i = 0, len = current.length; i < len; i++){\n            if (i in current) {\n                nodes[i] = await this.parse(current[i]);\n            }\n        }\n        return nodes;\n    }\n    async parseArray(id, current) {\n        return createArrayNode(id, current, await this.parseItems(current));\n    }\n    async parseProperties(properties) {\n        const entries = Object.entries(properties);\n        const keyNodes = [];\n        const valueNodes = [];\n        for(let i = 0, len = entries.length; i < len; i++){\n            keyNodes.push(serializeString(entries[i][0]));\n            valueNodes.push(await this.parse(entries[i][1]));\n        }\n        let symbol = Symbol.iterator;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createIteratorFactoryInstanceNode(this.parseIteratorFactory(), await this.parse(iteratorToSequence(properties))));\n        }\n        symbol = Symbol.asyncIterator;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createAsyncIteratorFactoryInstanceNode(this.parseAsyncIteratorFactory(), await this.parse(createStreamFromAsyncIterable(properties))));\n        }\n        symbol = Symbol.toStringTag;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createStringNode(properties[symbol]));\n        }\n        symbol = Symbol.isConcatSpreadable;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(properties[symbol] ? TRUE_NODE : FALSE_NODE);\n        }\n        return {\n            k: keyNodes,\n            v: valueNodes,\n            s: keyNodes.length\n        };\n    }\n    async parsePlainObject(id, current, empty) {\n        return this.createObjectNode(id, current, empty, await this.parseProperties(current));\n    }\n    async parseBoxed(id, current) {\n        return createBoxedNode(id, await this.parse(current.valueOf()));\n    }\n    async parseTypedArray(id, current) {\n        return createTypedArrayNode(id, current, await this.parse(current.buffer));\n    }\n    async parseBigIntTypedArray(id, current) {\n        return createBigIntTypedArrayNode(id, current, await this.parse(current.buffer));\n    }\n    async parseDataView(id, current) {\n        return createDataViewNode(id, current, await this.parse(current.buffer));\n    }\n    async parseError(id, current) {\n        const options = getErrorOptions(current, this.features);\n        return createErrorNode(id, current, options ? await this.parseProperties(options) : void 0);\n    }\n    async parseAggregateError(id, current) {\n        const options = getErrorOptions(current, this.features);\n        return createAggregateErrorNode(id, current, options ? await this.parseProperties(options) : void 0);\n    }\n    async parseMap(id, current) {\n        const keyNodes = [];\n        const valueNodes = [];\n        for (const [key, value] of current.entries()){\n            keyNodes.push(await this.parse(key));\n            valueNodes.push(await this.parse(value));\n        }\n        return this.createMapNode(id, keyNodes, valueNodes, current.size);\n    }\n    async parseSet(id, current) {\n        const items = [];\n        for (const item of current.keys()){\n            items.push(await this.parse(item));\n        }\n        return createSetNode(id, current.size, items);\n    }\n    async parsePromise(id, current) {\n        const [status, result] = await promiseToResult(current);\n        return {\n            t: 12 /* Promise */ ,\n            i: id,\n            s: status,\n            l: void 0,\n            c: void 0,\n            m: void 0,\n            p: void 0,\n            e: void 0,\n            a: void 0,\n            f: await this.parse(result),\n            b: void 0,\n            o: void 0\n        };\n    }\n    async parsePlugin(id, current) {\n        const currentPlugins = this.plugins;\n        if (currentPlugins) {\n            for(let i = 0, len = currentPlugins.length; i < len; i++){\n                const plugin = currentPlugins[i];\n                if (plugin.parse.async && plugin.test(current)) {\n                    return createPluginNode(id, plugin.tag, await plugin.parse.async(current, this, {\n                        id\n                    }));\n                }\n            }\n        }\n        return void 0;\n    }\n    async parseStream(id, current) {\n        return createStreamConstructorNode(id, this.parseSpecialReference(4 /* StreamConstructor */ ), await new Promise((resolve, reject)=>{\n            const sequence = [];\n            const cleanup = current.on({\n                next: (value)=>{\n                    this.markRef(id);\n                    this.parse(value).then((data)=>{\n                        sequence.push(createStreamNextNode(id, data));\n                    }, (data)=>{\n                        reject(data);\n                        cleanup();\n                    });\n                },\n                throw: (value)=>{\n                    this.markRef(id);\n                    this.parse(value).then((data)=>{\n                        sequence.push(createStreamThrowNode(id, data));\n                        resolve(sequence);\n                        cleanup();\n                    }, (data)=>{\n                        reject(data);\n                        cleanup();\n                    });\n                },\n                return: (value)=>{\n                    this.markRef(id);\n                    this.parse(value).then((data)=>{\n                        sequence.push(createStreamReturnNode(id, data));\n                        resolve(sequence);\n                        cleanup();\n                    }, (data)=>{\n                        reject(data);\n                        cleanup();\n                    });\n                }\n            });\n        }));\n    }\n    async parseObject(id, current) {\n        if (Array.isArray(current)) {\n            return this.parseArray(id, current);\n        }\n        if (isStream(current)) {\n            return this.parseStream(id, current);\n        }\n        const parsed = await this.parsePlugin(id, current);\n        if (parsed) {\n            return parsed;\n        }\n        const currentClass = current.constructor;\n        switch(currentClass){\n            case Object:\n                return this.parsePlainObject(id, current, false);\n            case void 0:\n                return this.parsePlainObject(id, current, true);\n            case Date:\n                return createDateNode(id, current);\n            case RegExp:\n                return createRegExpNode(id, current);\n            case Error:\n            case EvalError:\n            case RangeError:\n            case ReferenceError:\n            case SyntaxError:\n            case TypeError:\n            case URIError:\n                return this.parseError(id, current);\n            case Number:\n            case Boolean:\n            case String:\n            case BigInt:\n                return this.parseBoxed(id, current);\n            case ArrayBuffer:\n                return createArrayBufferNode(id, current);\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case Uint8Array:\n            case Uint16Array:\n            case Uint32Array:\n            case Uint8ClampedArray:\n            case Float32Array:\n            case Float64Array:\n                return this.parseTypedArray(id, current);\n            case DataView:\n                return this.parseDataView(id, current);\n            case Map:\n                return this.parseMap(id, current);\n            case Set:\n                return this.parseSet(id, current);\n            default:\n                break;\n        }\n        if (currentClass === Promise || current instanceof Promise) {\n            return this.parsePromise(id, current);\n        }\n        const currentFeatures = this.features;\n        if (currentFeatures & 16 /* BigIntTypedArray */ ) {\n            switch(currentClass){\n                case BigInt64Array:\n                case BigUint64Array:\n                    return this.parseBigIntTypedArray(id, current);\n                default:\n                    break;\n            }\n        }\n        if (currentFeatures & 1 /* AggregateError */  && typeof AggregateError !== \"undefined\" && (currentClass === AggregateError || current instanceof AggregateError)) {\n            return this.parseAggregateError(id, current);\n        }\n        if (current instanceof Error) {\n            return this.parseError(id, current);\n        }\n        if (Symbol.iterator in current || Symbol.asyncIterator in current) {\n            return this.parsePlainObject(id, current, !!currentClass);\n        }\n        throw new SerovalUnsupportedTypeError(current);\n    }\n    async parse(current) {\n        try {\n            switch(typeof current){\n                case \"boolean\":\n                    return current ? TRUE_NODE : FALSE_NODE;\n                case \"undefined\":\n                    return UNDEFINED_NODE;\n                case \"string\":\n                    return createStringNode(current);\n                case \"number\":\n                    return createNumberNode(current);\n                case \"bigint\":\n                    return createBigIntNode(current);\n                case \"object\":\n                    {\n                        if (current) {\n                            const ref = this.getReference(current);\n                            return ref.type === 0 ? await this.parseObject(ref.value, current) : ref.value;\n                        }\n                        return NULL_NODE;\n                    }\n                case \"symbol\":\n                    return this.parseWellKnownSymbol(current);\n                case \"function\":\n                    return this.parseFunction(current);\n                default:\n                    throw new SerovalUnsupportedTypeError(current);\n            }\n        } catch (error) {\n            throw new SerovalParserError(error);\n        }\n    }\n};\n// src/core/tree/async.ts\nvar AsyncParserContext = class extends BaseAsyncParserContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"vanilla\";\n    }\n};\n// src/core/utils/typed-array.ts\nfunction getTypedArrayConstructor(name) {\n    switch(name){\n        case \"Int8Array\":\n            return Int8Array;\n        case \"Int16Array\":\n            return Int16Array;\n        case \"Int32Array\":\n            return Int32Array;\n        case \"Uint8Array\":\n            return Uint8Array;\n        case \"Uint16Array\":\n            return Uint16Array;\n        case \"Uint32Array\":\n            return Uint32Array;\n        case \"Uint8ClampedArray\":\n            return Uint8ClampedArray;\n        case \"Float32Array\":\n            return Float32Array;\n        case \"Float64Array\":\n            return Float64Array;\n        case \"BigInt64Array\":\n            return BigInt64Array;\n        case \"BigUint64Array\":\n            return BigUint64Array;\n        default:\n            throw new SerovalUnknownTypedArrayError(name);\n    }\n}\n// src/core/context/deserializer.ts\nfunction applyObjectFlag(obj, flag) {\n    switch(flag){\n        case 3 /* Frozen */ :\n            return Object.freeze(obj);\n        case 1 /* NonExtensible */ :\n            return Object.preventExtensions(obj);\n        case 2 /* Sealed */ :\n            return Object.seal(obj);\n        default:\n            return obj;\n    }\n}\nvar BaseDeserializerContext = class {\n    constructor(options){\n        this.plugins = options.plugins;\n        this.refs = options.refs || /* @__PURE__ */ new Map();\n    }\n    deserializeReference(node) {\n        return this.assignIndexedValue(node.i, getReference(deserializeString(node.s)));\n    }\n    deserializeArray(node) {\n        const len = node.l;\n        const result = this.assignIndexedValue(node.i, new Array(len));\n        let item;\n        for(let i = 0; i < len; i++){\n            item = node.a[i];\n            if (item) {\n                result[i] = this.deserialize(item);\n            }\n        }\n        applyObjectFlag(result, node.o);\n        return result;\n    }\n    deserializeProperties(node, result) {\n        const len = node.s;\n        if (len) {\n            const keys = node.k;\n            const vals = node.v;\n            for(let i = 0, key; i < len; i++){\n                key = keys[i];\n                if (typeof key === \"string\") {\n                    result[deserializeString(key)] = this.deserialize(vals[i]);\n                } else {\n                    result[this.deserialize(key)] = this.deserialize(vals[i]);\n                }\n            }\n        }\n        return result;\n    }\n    deserializeObject(node) {\n        const result = this.assignIndexedValue(node.i, node.t === 10 /* Object */  ? {} : /* @__PURE__ */ Object.create(null));\n        this.deserializeProperties(node.p, result);\n        applyObjectFlag(result, node.o);\n        return result;\n    }\n    deserializeDate(node) {\n        return this.assignIndexedValue(node.i, new Date(node.s));\n    }\n    deserializeRegExp(node) {\n        return this.assignIndexedValue(node.i, new RegExp(deserializeString(node.c), node.m));\n    }\n    deserializeSet(node) {\n        const result = this.assignIndexedValue(node.i, /* @__PURE__ */ new Set());\n        const items = node.a;\n        for(let i = 0, len = node.l; i < len; i++){\n            result.add(this.deserialize(items[i]));\n        }\n        return result;\n    }\n    deserializeMap(node) {\n        const result = this.assignIndexedValue(node.i, /* @__PURE__ */ new Map());\n        const keys = node.e.k;\n        const vals = node.e.v;\n        for(let i = 0, len = node.e.s; i < len; i++){\n            result.set(this.deserialize(keys[i]), this.deserialize(vals[i]));\n        }\n        return result;\n    }\n    deserializeArrayBuffer(node) {\n        const bytes = new Uint8Array(node.s);\n        const result = this.assignIndexedValue(node.i, bytes.buffer);\n        return result;\n    }\n    deserializeTypedArray(node) {\n        const construct = getTypedArrayConstructor(node.c);\n        const source = this.deserialize(node.f);\n        const result = this.assignIndexedValue(node.i, new construct(source, node.b, node.l));\n        return result;\n    }\n    deserializeDataView(node) {\n        const source = this.deserialize(node.f);\n        const result = this.assignIndexedValue(node.i, new DataView(source, node.b, node.l));\n        return result;\n    }\n    deserializeDictionary(node, result) {\n        if (node.p) {\n            const fields = this.deserializeProperties(node.p, {});\n            Object.assign(result, fields);\n        }\n        return result;\n    }\n    deserializeAggregateError(node) {\n        const result = this.assignIndexedValue(node.i, new AggregateError([], deserializeString(node.m)));\n        return this.deserializeDictionary(node, result);\n    }\n    deserializeError(node) {\n        const construct = ERROR_CONSTRUCTOR[node.s];\n        const result = this.assignIndexedValue(node.i, new construct(deserializeString(node.m)));\n        return this.deserializeDictionary(node, result);\n    }\n    deserializePromise(node) {\n        const deferred = createDeferred();\n        const result = this.assignIndexedValue(node.i, deferred);\n        const deserialized = this.deserialize(node.f);\n        if (node.s) {\n            deferred.resolve(deserialized);\n        } else {\n            deferred.reject(deserialized);\n        }\n        return result.promise;\n    }\n    deserializeBoxed(node) {\n        return this.assignIndexedValue(node.i, Object(this.deserialize(node.f)));\n    }\n    deserializePlugin(node) {\n        const currentPlugins = this.plugins;\n        if (currentPlugins) {\n            const tag = deserializeString(node.c);\n            for(let i = 0, len = currentPlugins.length; i < len; i++){\n                const plugin = currentPlugins[i];\n                if (plugin.tag === tag) {\n                    return this.assignIndexedValue(node.i, plugin.deserialize(node.s, this, {\n                        id: node.i\n                    }));\n                }\n            }\n        }\n        throw new SerovalMissingPluginError(node.c);\n    }\n    deserializePromiseConstructor(node) {\n        return this.assignIndexedValue(node.i, createDeferred()).promise;\n    }\n    deserializePromiseResolve(node) {\n        const deferred = this.refs.get(node.i);\n        assert(deferred, new SerovalMissingInstanceError(\"Promise\"));\n        deferred.resolve(this.deserialize(node.a[1]));\n        return void 0;\n    }\n    deserializePromiseReject(node) {\n        const deferred = this.refs.get(node.i);\n        assert(deferred, new SerovalMissingInstanceError(\"Promise\"));\n        deferred.reject(this.deserialize(node.a[1]));\n        return void 0;\n    }\n    deserializeIteratorFactoryInstance(node) {\n        this.deserialize(node.a[0]);\n        const source = this.deserialize(node.a[1]);\n        return sequenceToIterator(source);\n    }\n    deserializeAsyncIteratorFactoryInstance(node) {\n        this.deserialize(node.a[0]);\n        const source = this.deserialize(node.a[1]);\n        return streamToAsyncIterable(source);\n    }\n    deserializeStreamConstructor(node) {\n        const result = this.assignIndexedValue(node.i, createStream());\n        const len = node.a.length;\n        if (len) {\n            for(let i = 0; i < len; i++){\n                this.deserialize(node.a[i]);\n            }\n        }\n        return result;\n    }\n    deserializeStreamNext(node) {\n        const deferred = this.refs.get(node.i);\n        assert(deferred, new SerovalMissingInstanceError(\"Stream\"));\n        deferred.next(this.deserialize(node.f));\n        return void 0;\n    }\n    deserializeStreamThrow(node) {\n        const deferred = this.refs.get(node.i);\n        assert(deferred, new SerovalMissingInstanceError(\"Stream\"));\n        deferred.throw(this.deserialize(node.f));\n        return void 0;\n    }\n    deserializeStreamReturn(node) {\n        const deferred = this.refs.get(node.i);\n        assert(deferred, new SerovalMissingInstanceError(\"Stream\"));\n        deferred.return(this.deserialize(node.f));\n        return void 0;\n    }\n    deserializeIteratorFactory(node) {\n        this.deserialize(node.f);\n        return void 0;\n    }\n    deserializeAsyncIteratorFactory(node) {\n        this.deserialize(node.a[1]);\n        return void 0;\n    }\n    deserialize(node) {\n        try {\n            switch(node.t){\n                case 2 /* Constant */ :\n                    return CONSTANT_VAL[node.s];\n                case 0 /* Number */ :\n                    return node.s;\n                case 1 /* String */ :\n                    return deserializeString(node.s);\n                case 3 /* BigInt */ :\n                    return BigInt(node.s);\n                case 4 /* IndexedValue */ :\n                    return this.refs.get(node.i);\n                case 18 /* Reference */ :\n                    return this.deserializeReference(node);\n                case 9 /* Array */ :\n                    return this.deserializeArray(node);\n                case 10 /* Object */ :\n                case 11 /* NullConstructor */ :\n                    return this.deserializeObject(node);\n                case 5 /* Date */ :\n                    return this.deserializeDate(node);\n                case 6 /* RegExp */ :\n                    return this.deserializeRegExp(node);\n                case 7 /* Set */ :\n                    return this.deserializeSet(node);\n                case 8 /* Map */ :\n                    return this.deserializeMap(node);\n                case 19 /* ArrayBuffer */ :\n                    return this.deserializeArrayBuffer(node);\n                case 16 /* BigIntTypedArray */ :\n                case 15 /* TypedArray */ :\n                    return this.deserializeTypedArray(node);\n                case 20 /* DataView */ :\n                    return this.deserializeDataView(node);\n                case 14 /* AggregateError */ :\n                    return this.deserializeAggregateError(node);\n                case 13 /* Error */ :\n                    return this.deserializeError(node);\n                case 12 /* Promise */ :\n                    return this.deserializePromise(node);\n                case 17 /* WKSymbol */ :\n                    return SYMBOL_REF[node.s];\n                case 21 /* Boxed */ :\n                    return this.deserializeBoxed(node);\n                case 25 /* Plugin */ :\n                    return this.deserializePlugin(node);\n                case 22 /* PromiseConstructor */ :\n                    return this.deserializePromiseConstructor(node);\n                case 23 /* PromiseResolve */ :\n                    return this.deserializePromiseResolve(node);\n                case 24 /* PromiseReject */ :\n                    return this.deserializePromiseReject(node);\n                case 28 /* IteratorFactoryInstance */ :\n                    return this.deserializeIteratorFactoryInstance(node);\n                case 30 /* AsyncIteratorFactoryInstance */ :\n                    return this.deserializeAsyncIteratorFactoryInstance(node);\n                case 31 /* StreamConstructor */ :\n                    return this.deserializeStreamConstructor(node);\n                case 32 /* StreamNext */ :\n                    return this.deserializeStreamNext(node);\n                case 33 /* StreamThrow */ :\n                    return this.deserializeStreamThrow(node);\n                case 34 /* StreamReturn */ :\n                    return this.deserializeStreamReturn(node);\n                case 27 /* IteratorFactory */ :\n                    return this.deserializeIteratorFactory(node);\n                case 29 /* AsyncIteratorFactory */ :\n                    return this.deserializeAsyncIteratorFactory(node);\n                default:\n                    throw new SerovalUnsupportedNodeError(node);\n            }\n        } catch (error) {\n            throw new SerovalDeserializationError(error);\n        }\n    }\n};\n// src/core/tree/deserializer.ts\nvar VanillaDeserializerContext = class extends BaseDeserializerContext {\n    constructor(options){\n        super(options);\n        this.mode = \"vanilla\";\n        this.marked = new Set(options.markedRefs);\n    }\n    assignIndexedValue(index, value) {\n        if (this.marked.has(index)) {\n            this.refs.set(index, value);\n        }\n        return value;\n    }\n};\n// src/core/utils/is-valid-identifier.ts\nvar IDENTIFIER_CHECK = /^[$A-Z_][0-9A-Z_$]*$/i;\nfunction isValidIdentifier(name) {\n    const char = name[0];\n    return (char === \"$\" || char === \"_\" || char >= \"A\" && char <= \"Z\" || char >= \"a\" && char <= \"z\") && IDENTIFIER_CHECK.test(name);\n}\n// src/core/context/serializer.ts\nfunction getAssignmentExpression(assignment) {\n    switch(assignment.t){\n        case 0 /* Index */ :\n            return assignment.s + \"=\" + assignment.v;\n        case 2 /* Set */ :\n            return assignment.s + \".set(\" + assignment.k + \",\" + assignment.v + \")\";\n        case 1 /* Add */ :\n            return assignment.s + \".add(\" + assignment.v + \")\";\n        case 3 /* Delete */ :\n            return assignment.s + \".delete(\" + assignment.k + \")\";\n    }\n}\nfunction mergeAssignments(assignments) {\n    const newAssignments = [];\n    let current = assignments[0];\n    for(let i = 1, len = assignments.length, item, prev = current; i < len; i++){\n        item = assignments[i];\n        if (item.t === 0 /* Index */  && item.v === prev.v) {\n            current = {\n                t: 0 /* Index */ ,\n                s: item.s,\n                k: void 0,\n                v: getAssignmentExpression(current)\n            };\n        } else if (item.t === 2 /* Set */  && item.s === prev.s) {\n            current = {\n                t: 2 /* Set */ ,\n                s: getAssignmentExpression(current),\n                k: item.k,\n                v: item.v\n            };\n        } else if (item.t === 1 /* Add */  && item.s === prev.s) {\n            current = {\n                t: 1 /* Add */ ,\n                s: getAssignmentExpression(current),\n                k: void 0,\n                v: item.v\n            };\n        } else if (item.t === 3 /* Delete */  && item.s === prev.s) {\n            current = {\n                t: 3 /* Delete */ ,\n                s: getAssignmentExpression(current),\n                k: item.k,\n                v: void 0\n            };\n        } else {\n            newAssignments.push(current);\n            current = item;\n        }\n        prev = item;\n    }\n    newAssignments.push(current);\n    return newAssignments;\n}\nfunction resolveAssignments(assignments) {\n    if (assignments.length) {\n        let result = \"\";\n        const merged = mergeAssignments(assignments);\n        for(let i = 0, len = merged.length; i < len; i++){\n            result += getAssignmentExpression(merged[i]) + \",\";\n        }\n        return result;\n    }\n    return void 0;\n}\nvar NULL_CONSTRUCTOR = \"Object.create(null)\";\nvar SET_CONSTRUCTOR = \"new Set\";\nvar MAP_CONSTRUCTOR = \"new Map\";\nvar PROMISE_RESOLVE = \"Promise.resolve\";\nvar PROMISE_REJECT = \"Promise.reject\";\nvar OBJECT_FLAG_CONSTRUCTOR = {\n    [3 /* Frozen */ ]: \"Object.freeze\",\n    [2 /* Sealed */ ]: \"Object.seal\",\n    [1 /* NonExtensible */ ]: \"Object.preventExtensions\",\n    [0 /* None */ ]: void 0\n};\nvar BaseSerializerContext = class {\n    constructor(options){\n        /**\n     * To check if an object is synchronously referencing itself\n     * @private\n     */ this.stack = [];\n        /**\n     * Array of object mutations\n     * @private\n     */ this.flags = [];\n        /**\n     * Array of assignments to be done (used for recursion)\n     * @private\n     */ this.assignments = [];\n        this.plugins = options.plugins;\n        this.features = options.features;\n        this.marked = new Set(options.markedRefs);\n    }\n    createFunction(parameters, body) {\n        if (this.features & 2 /* ArrowFunction */ ) {\n            const joined = parameters.length === 1 ? parameters[0] : \"(\" + parameters.join(\",\") + \")\";\n            return joined + \"=>\" + body;\n        }\n        return \"function(\" + parameters.join(\",\") + \"){return \" + body + \"}\";\n    }\n    createEffectfulFunction(parameters, body) {\n        if (this.features & 2 /* ArrowFunction */ ) {\n            const joined = parameters.length === 1 ? parameters[0] : \"(\" + parameters.join(\",\") + \")\";\n            return joined + \"=>{\" + body + \"}\";\n        }\n        return \"function(\" + parameters.join(\",\") + \"){\" + body + \"}\";\n    }\n    /**\n   * A tiny function that tells if a reference\n   * is to be accessed. This is a requirement for\n   * deciding whether or not we should generate\n   * an identifier for the object\n   */ markRef(id) {\n        this.marked.add(id);\n    }\n    isMarked(id) {\n        return this.marked.has(id);\n    }\n    pushObjectFlag(flag, id) {\n        if (flag !== 0 /* None */ ) {\n            this.markRef(id);\n            this.flags.push({\n                type: flag,\n                value: this.getRefParam(id)\n            });\n        }\n    }\n    resolveFlags() {\n        let result = \"\";\n        for(let i = 0, current = this.flags, len = current.length; i < len; i++){\n            const flag = current[i];\n            result += OBJECT_FLAG_CONSTRUCTOR[flag.type] + \"(\" + flag.value + \"),\";\n        }\n        return result;\n    }\n    resolvePatches() {\n        const assignments = resolveAssignments(this.assignments);\n        const flags = this.resolveFlags();\n        if (assignments) {\n            if (flags) {\n                return assignments + flags;\n            }\n            return assignments;\n        }\n        return flags;\n    }\n    /**\n   * Generates the inlined assignment for the reference\n   * This is different from the assignments array as this one\n   * signifies creation rather than mutation\n   */ createAssignment(source, value) {\n        this.assignments.push({\n            t: 0 /* Index */ ,\n            s: source,\n            k: void 0,\n            v: value\n        });\n    }\n    createAddAssignment(ref, value) {\n        this.assignments.push({\n            t: 1 /* Add */ ,\n            s: this.getRefParam(ref),\n            k: void 0,\n            v: value\n        });\n    }\n    createSetAssignment(ref, key, value) {\n        this.assignments.push({\n            t: 2 /* Set */ ,\n            s: this.getRefParam(ref),\n            k: key,\n            v: value\n        });\n    }\n    createDeleteAssignment(ref, key) {\n        this.assignments.push({\n            t: 3 /* Delete */ ,\n            s: this.getRefParam(ref),\n            k: key,\n            v: void 0\n        });\n    }\n    createArrayAssign(ref, index, value) {\n        this.createAssignment(this.getRefParam(ref) + \"[\" + index + \"]\", value);\n    }\n    createObjectAssign(ref, key, value) {\n        this.createAssignment(this.getRefParam(ref) + \".\" + key, value);\n    }\n    /**\n   * Checks if the value is in the stack. Stack here is a reference\n   * structure to know if a object is to be accessed in a TDZ.\n   */ isIndexedValueInStack(node) {\n        return node.t === 4 /* IndexedValue */  && this.stack.includes(node.i);\n    }\n    serializeReference(node) {\n        return this.assignIndexedValue(node.i, REFERENCES_KEY + '.get(\"' + node.s + '\")');\n    }\n    serializeArrayItem(id, item, index) {\n        if (item) {\n            if (this.isIndexedValueInStack(item)) {\n                this.markRef(id);\n                this.createArrayAssign(id, index, this.getRefParam(item.i));\n                return \"\";\n            }\n            return this.serialize(item);\n        }\n        return \"\";\n    }\n    serializeArray(node) {\n        const id = node.i;\n        if (node.l) {\n            this.stack.push(id);\n            const list = node.a;\n            let values = this.serializeArrayItem(id, list[0], 0);\n            let isHoley = values === \"\";\n            for(let i = 1, len = node.l, item; i < len; i++){\n                item = this.serializeArrayItem(id, list[i], i);\n                values += \",\" + item;\n                isHoley = item === \"\";\n            }\n            this.stack.pop();\n            this.pushObjectFlag(node.o, node.i);\n            return this.assignIndexedValue(id, \"[\" + values + (isHoley ? \",]\" : \"]\"));\n        }\n        return this.assignIndexedValue(id, \"[]\");\n    }\n    serializeProperty(source, key, val) {\n        if (typeof key === \"string\") {\n            const check = Number(key);\n            const isIdentifier = // Test if key is a valid positive number or JS identifier\n            // so that we don't have to serialize the key and wrap with brackets\n            check >= 0 && // It's also important to consider that if the key is\n            // indeed numeric, we need to make sure that when\n            // converted back into a string, it's still the same\n            // to the original key. This allows us to differentiate\n            // keys that has numeric formats but in a different\n            // format, which can cause unintentional key declaration\n            // Example: { 0x1: 1 } vs { '0x1': 1 }\n            check.toString() === key || isValidIdentifier(key);\n            if (this.isIndexedValueInStack(val)) {\n                const refParam = this.getRefParam(val.i);\n                this.markRef(source.i);\n                if (isIdentifier && check !== check) {\n                    this.createObjectAssign(source.i, key, refParam);\n                } else {\n                    this.createArrayAssign(source.i, isIdentifier ? key : '\"' + key + '\"', refParam);\n                }\n                return \"\";\n            }\n            return (isIdentifier ? key : '\"' + key + '\"') + \":\" + this.serialize(val);\n        }\n        return \"[\" + this.serialize(key) + \"]:\" + this.serialize(val);\n    }\n    serializeProperties(source, record) {\n        const len = record.s;\n        if (len) {\n            const keys = record.k;\n            const values = record.v;\n            this.stack.push(source.i);\n            let result = this.serializeProperty(source, keys[0], values[0]);\n            for(let i = 1, item = result; i < len; i++){\n                item = this.serializeProperty(source, keys[i], values[i]);\n                result += (item && result && \",\") + item;\n            }\n            this.stack.pop();\n            return \"{\" + result + \"}\";\n        }\n        return \"{}\";\n    }\n    serializeObject(node) {\n        this.pushObjectFlag(node.o, node.i);\n        return this.assignIndexedValue(node.i, this.serializeProperties(node, node.p));\n    }\n    serializeWithObjectAssign(source, value, serialized) {\n        const fields = this.serializeProperties(source, value);\n        if (fields !== \"{}\") {\n            return \"Object.assign(\" + serialized + \",\" + fields + \")\";\n        }\n        return serialized;\n    }\n    serializeStringKeyAssignment(source, mainAssignments, key, value) {\n        const serialized = this.serialize(value);\n        const check = Number(key);\n        const isIdentifier = // Test if key is a valid positive number or JS identifier\n        // so that we don't have to serialize the key and wrap with brackets\n        check >= 0 && // It's also important to consider that if the key is\n        // indeed numeric, we need to make sure that when\n        // converted back into a string, it's still the same\n        // to the original key. This allows us to differentiate\n        // keys that has numeric formats but in a different\n        // format, which can cause unintentional key declaration\n        // Example: { 0x1: 1 } vs { '0x1': 1 }\n        check.toString() === key || isValidIdentifier(key);\n        if (this.isIndexedValueInStack(value)) {\n            if (isIdentifier && check !== check) {\n                this.createObjectAssign(source.i, key, serialized);\n            } else {\n                this.createArrayAssign(source.i, isIdentifier ? key : '\"' + key + '\"', serialized);\n            }\n        } else {\n            const parentAssignment = this.assignments;\n            this.assignments = mainAssignments;\n            if (isIdentifier && check !== check) {\n                this.createObjectAssign(source.i, key, serialized);\n            } else {\n                this.createArrayAssign(source.i, isIdentifier ? key : '\"' + key + '\"', serialized);\n            }\n            this.assignments = parentAssignment;\n        }\n    }\n    serializeAssignment(source, mainAssignments, key, value) {\n        if (typeof key === \"string\") {\n            this.serializeStringKeyAssignment(source, mainAssignments, key, value);\n        } else {\n            const parent = this.stack;\n            this.stack = [];\n            const serialized = this.serialize(value);\n            this.stack = parent;\n            const parentAssignment = this.assignments;\n            this.assignments = mainAssignments;\n            this.createArrayAssign(source.i, this.serialize(key), serialized);\n            this.assignments = parentAssignment;\n        }\n    }\n    serializeAssignments(source, node) {\n        const len = node.s;\n        if (len) {\n            const mainAssignments = [];\n            const keys = node.k;\n            const values = node.v;\n            this.stack.push(source.i);\n            for(let i = 0; i < len; i++){\n                this.serializeAssignment(source, mainAssignments, keys[i], values[i]);\n            }\n            this.stack.pop();\n            return resolveAssignments(mainAssignments);\n        }\n        return void 0;\n    }\n    serializeDictionary(node, init) {\n        if (node.p) {\n            if (this.features & 8 /* ObjectAssign */ ) {\n                init = this.serializeWithObjectAssign(node, node.p, init);\n            } else {\n                this.markRef(node.i);\n                const assignments = this.serializeAssignments(node, node.p);\n                if (assignments) {\n                    return \"(\" + this.assignIndexedValue(node.i, init) + \",\" + assignments + this.getRefParam(node.i) + \")\";\n                }\n            }\n        }\n        return this.assignIndexedValue(node.i, init);\n    }\n    serializeNullConstructor(node) {\n        this.pushObjectFlag(node.o, node.i);\n        return this.serializeDictionary(node, NULL_CONSTRUCTOR);\n    }\n    serializeDate(node) {\n        return this.assignIndexedValue(node.i, 'new Date(\"' + node.s + '\")');\n    }\n    serializeRegExp(node) {\n        return this.assignIndexedValue(node.i, \"/\" + node.c + \"/\" + node.m);\n    }\n    serializeSetItem(id, item) {\n        if (this.isIndexedValueInStack(item)) {\n            this.markRef(id);\n            this.createAddAssignment(id, this.getRefParam(item.i));\n            return \"\";\n        }\n        return this.serialize(item);\n    }\n    serializeSet(node) {\n        let serialized = SET_CONSTRUCTOR;\n        const size = node.l;\n        const id = node.i;\n        if (size) {\n            const items = node.a;\n            this.stack.push(id);\n            let result = this.serializeSetItem(id, items[0]);\n            for(let i = 1, item = result; i < size; i++){\n                item = this.serializeSetItem(id, items[i]);\n                result += (item && result && \",\") + item;\n            }\n            this.stack.pop();\n            if (result) {\n                serialized += \"([\" + result + \"])\";\n            }\n        }\n        return this.assignIndexedValue(id, serialized);\n    }\n    serializeMapEntry(id, key, val, sentinel) {\n        if (this.isIndexedValueInStack(key)) {\n            const keyRef = this.getRefParam(key.i);\n            this.markRef(id);\n            if (this.isIndexedValueInStack(val)) {\n                const valueRef = this.getRefParam(val.i);\n                this.createSetAssignment(id, keyRef, valueRef);\n                return \"\";\n            }\n            if (val.t !== 4 /* IndexedValue */  && val.i != null && this.isMarked(val.i)) {\n                const serialized = \"(\" + this.serialize(val) + \",[\" + sentinel + \",\" + sentinel + \"])\";\n                this.createSetAssignment(id, keyRef, this.getRefParam(val.i));\n                this.createDeleteAssignment(id, sentinel);\n                return serialized;\n            }\n            const parent = this.stack;\n            this.stack = [];\n            this.createSetAssignment(id, keyRef, this.serialize(val));\n            this.stack = parent;\n            return \"\";\n        }\n        if (this.isIndexedValueInStack(val)) {\n            const valueRef = this.getRefParam(val.i);\n            this.markRef(id);\n            if (key.t !== 4 /* IndexedValue */  && key.i != null && this.isMarked(key.i)) {\n                const serialized = \"(\" + this.serialize(key) + \",[\" + sentinel + \",\" + sentinel + \"])\";\n                this.createSetAssignment(id, this.getRefParam(key.i), valueRef);\n                this.createDeleteAssignment(id, sentinel);\n                return serialized;\n            }\n            const parent = this.stack;\n            this.stack = [];\n            this.createSetAssignment(id, this.serialize(key), valueRef);\n            this.stack = parent;\n            return \"\";\n        }\n        return \"[\" + this.serialize(key) + \",\" + this.serialize(val) + \"]\";\n    }\n    serializeMap(node) {\n        let serialized = MAP_CONSTRUCTOR;\n        const size = node.e.s;\n        const id = node.i;\n        const sentinel = node.f;\n        const sentinelId = this.getRefParam(sentinel.i);\n        if (size) {\n            const keys = node.e.k;\n            const vals = node.e.v;\n            this.stack.push(id);\n            let result = this.serializeMapEntry(id, keys[0], vals[0], sentinelId);\n            for(let i = 1, item = result; i < size; i++){\n                item = this.serializeMapEntry(id, keys[i], vals[i], sentinelId);\n                result += (item && result && \",\") + item;\n            }\n            this.stack.pop();\n            if (result) {\n                serialized += \"([\" + result + \"])\";\n            }\n        }\n        if (sentinel.t === 26 /* SpecialReference */ ) {\n            this.markRef(sentinel.i);\n            serialized = \"(\" + this.serialize(sentinel) + \",\" + serialized + \")\";\n        }\n        return this.assignIndexedValue(id, serialized);\n    }\n    serializeArrayBuffer(node) {\n        let result = \"new Uint8Array(\";\n        const buffer = node.s;\n        const len = buffer.length;\n        if (len) {\n            result += \"[\" + buffer[0];\n            for(let i = 1; i < len; i++){\n                result += \",\" + buffer[i];\n            }\n            result += \"]\";\n        }\n        return this.assignIndexedValue(node.i, result + \").buffer\");\n    }\n    serializeTypedArray(node) {\n        return this.assignIndexedValue(node.i, \"new \" + node.c + \"(\" + this.serialize(node.f) + \",\" + node.b + \",\" + node.l + \")\");\n    }\n    serializeDataView(node) {\n        return this.assignIndexedValue(node.i, \"new DataView(\" + this.serialize(node.f) + \",\" + node.b + \",\" + node.l + \")\");\n    }\n    serializeAggregateError(node) {\n        const id = node.i;\n        this.stack.push(id);\n        const serialized = this.serializeDictionary(node, 'new AggregateError([],\"' + node.m + '\")');\n        this.stack.pop();\n        return serialized;\n    }\n    serializeError(node) {\n        return this.serializeDictionary(node, \"new \" + ERROR_CONSTRUCTOR_STRING[node.s] + '(\"' + node.m + '\")');\n    }\n    serializePromise(node) {\n        let serialized;\n        const fulfilled = node.f;\n        const id = node.i;\n        const promiseConstructor = node.s ? PROMISE_RESOLVE : PROMISE_REJECT;\n        if (this.isIndexedValueInStack(fulfilled)) {\n            const ref = this.getRefParam(fulfilled.i);\n            serialized = promiseConstructor + (node.s ? \"().then(\" + this.createFunction([], ref) + \")\" : \"().catch(\" + this.createEffectfulFunction([], \"throw \" + ref) + \")\");\n        } else {\n            this.stack.push(id);\n            const result = this.serialize(fulfilled);\n            this.stack.pop();\n            serialized = promiseConstructor + \"(\" + result + \")\";\n        }\n        return this.assignIndexedValue(id, serialized);\n    }\n    serializeWellKnownSymbol(node) {\n        return this.assignIndexedValue(node.i, SYMBOL_STRING[node.s]);\n    }\n    serializeBoxed(node) {\n        return this.assignIndexedValue(node.i, \"Object(\" + this.serialize(node.f) + \")\");\n    }\n    serializePlugin(node) {\n        const currentPlugins = this.plugins;\n        if (currentPlugins) {\n            for(let i = 0, len = currentPlugins.length; i < len; i++){\n                const plugin = currentPlugins[i];\n                if (plugin.tag === node.c) {\n                    return this.assignIndexedValue(node.i, plugin.serialize(node.s, this, {\n                        id: node.i\n                    }));\n                }\n            }\n        }\n        throw new SerovalMissingPluginError(node.c);\n    }\n    getConstructor(node) {\n        const current = this.serialize(node);\n        return current === this.getRefParam(node.i) ? current : \"(\" + current + \")\";\n    }\n    serializePromiseConstructor(node) {\n        return this.assignIndexedValue(node.i, this.getConstructor(node.f) + \"()\");\n    }\n    serializePromiseResolve(node) {\n        return this.getConstructor(node.a[0]) + \"(\" + this.getRefParam(node.i) + \",\" + this.serialize(node.a[1]) + \")\";\n    }\n    serializePromiseReject(node) {\n        return this.getConstructor(node.a[0]) + \"(\" + this.getRefParam(node.i) + \",\" + this.serialize(node.a[1]) + \")\";\n    }\n    serializeSpecialReferenceValue(ref) {\n        switch(ref){\n            case 0 /* MapSentinel */ :\n                return \"[]\";\n            case 1 /* PromiseConstructor */ :\n                return this.createFunction([\n                    \"s\",\n                    \"f\",\n                    \"p\"\n                ], \"((p=new Promise(\" + this.createEffectfulFunction([\n                    \"a\",\n                    \"b\"\n                ], \"s=a,f=b\") + \")).s=s,p.f=f,p)\");\n            case 2 /* PromiseResolve */ :\n                return this.createEffectfulFunction([\n                    \"p\",\n                    \"d\"\n                ], 'p.s(d),p.status=\"success\",p.value=d;delete p.s;delete p.f');\n            case 3 /* PromiseReject */ :\n                return this.createEffectfulFunction([\n                    \"p\",\n                    \"d\"\n                ], 'p.f(d),p.status=\"failure\",p.value=d;delete p.s;delete p.f');\n            case 4 /* StreamConstructor */ :\n                return this.createFunction([\n                    \"b\",\n                    \"a\",\n                    \"s\",\n                    \"l\",\n                    \"p\",\n                    \"f\",\n                    \"e\",\n                    \"n\"\n                ], \"(b=[],a=!0,s=!1,l=[],p=0,f=\" + this.createEffectfulFunction([\n                    \"v\",\n                    \"m\",\n                    \"x\"\n                ], \"for(x=0;x<p;x++)l[x]&&l[x][m](v)\") + \",n=\" + this.createEffectfulFunction([\n                    \"o\",\n                    \"x\",\n                    \"z\",\n                    \"c\"\n                ], 'for(x=0,z=b.length;x<z;x++)(c=b[x],x===z-1?o[s?\"return\":\"throw\"](c):o.next(c))') + \",e=\" + this.createFunction([\n                    \"o\",\n                    \"t\"\n                ], \"(a&&(l[t=p++]=o),n(o),\" + this.createEffectfulFunction([], \"a&&(l[t]=void 0)\") + \")\") + \",{__SEROVAL_STREAM__:!0,on:\" + this.createFunction([\n                    \"o\"\n                ], \"e(o)\") + \",next:\" + this.createEffectfulFunction([\n                    \"v\"\n                ], 'a&&(b.push(v),f(v,\"next\"))') + \",throw:\" + this.createEffectfulFunction([\n                    \"v\"\n                ], 'a&&(b.push(v),f(v,\"throw\"),a=s=!1,l.length=0)') + \",return:\" + this.createEffectfulFunction([\n                    \"v\"\n                ], 'a&&(b.push(v),f(v,\"return\"),a=!1,s=!0,l.length=0)') + \"})\");\n            default:\n                return \"\";\n        }\n    }\n    serializeSpecialReference(node) {\n        return this.assignIndexedValue(node.i, this.serializeSpecialReferenceValue(node.s));\n    }\n    serializeIteratorFactory(node) {\n        let result = \"\";\n        let initialized = false;\n        if (node.f.t !== 4 /* IndexedValue */ ) {\n            this.markRef(node.f.i);\n            result = \"(\" + this.serialize(node.f) + \",\";\n            initialized = true;\n        }\n        result += this.assignIndexedValue(node.i, this.createFunction([\n            \"s\"\n        ], this.createFunction([\n            \"i\",\n            \"c\",\n            \"d\",\n            \"t\"\n        ], \"(i=0,t={[\" + this.getRefParam(node.f.i) + \"]:\" + this.createFunction([], \"t\") + \",next:\" + this.createEffectfulFunction([], \"if(i>s.d)return{done:!0,value:void 0};if(d=s.v[c=i++],c===s.t)throw d;return{done:c===s.d,value:d}\") + \"})\")));\n        if (initialized) {\n            result += \")\";\n        }\n        return result;\n    }\n    serializeIteratorFactoryInstance(node) {\n        return this.getConstructor(node.a[0]) + \"(\" + this.serialize(node.a[1]) + \")\";\n    }\n    serializeAsyncIteratorFactory(node) {\n        const promise = node.a[0];\n        const symbol = node.a[1];\n        let result = \"\";\n        if (promise.t !== 4 /* IndexedValue */ ) {\n            this.markRef(promise.i);\n            result += \"(\" + this.serialize(promise);\n        }\n        if (symbol.t !== 4 /* IndexedValue */ ) {\n            this.markRef(symbol.i);\n            result += (result ? \",\" : \"(\") + this.serialize(symbol);\n        }\n        if (result) {\n            result += \",\";\n        }\n        const iterator = this.assignIndexedValue(node.i, this.createFunction([\n            \"s\"\n        ], this.createFunction([\n            \"b\",\n            \"c\",\n            \"p\",\n            \"d\",\n            \"e\",\n            \"t\",\n            \"f\"\n        ], \"(b=[],c=0,p=[],d=-1,e=!1,f=\" + this.createEffectfulFunction([\n            \"i\",\n            \"l\"\n        ], \"for(i=0,l=p.length;i<l;i++)p[i].s({done:!0,value:void 0})\") + \",s.on({next:\" + this.createEffectfulFunction([\n            \"v\",\n            \"t\"\n        ], \"if(t=p.shift())t.s({done:!1,value:v});b.push(v)\") + \",throw:\" + this.createEffectfulFunction([\n            \"v\",\n            \"t\"\n        ], \"if(t=p.shift())t.f(v);f(),d=b.length,e=!0,b.push(v)\") + \",return:\" + this.createEffectfulFunction([\n            \"v\",\n            \"t\"\n        ], \"if(t=p.shift())t.s({done:!0,value:v});f(),d=b.length,b.push(v)\") + \"}),t={[\" + this.getRefParam(symbol.i) + \"]:\" + this.createFunction([], \"t\") + \",next:\" + this.createEffectfulFunction([\n            \"i\",\n            \"t\",\n            \"v\"\n        ], \"if(d===-1){return((i=c++)>=b.length)?(p.push(t=\" + this.getRefParam(promise.i) + \"()),t):{done:!0,value:b[i]}}if(c>d)return{done:!0,value:void 0};if(v=b[i=c++],i!==d)return{done:!1,value:v};if(e)throw v;return{done:!0,value:v}\") + \"})\")));\n        if (result) {\n            return result + iterator + \")\";\n        }\n        return iterator;\n    }\n    serializeAsyncIteratorFactoryInstance(node) {\n        return this.getConstructor(node.a[0]) + \"(\" + this.serialize(node.a[1]) + \")\";\n    }\n    serializeStreamConstructor(node) {\n        const result = this.assignIndexedValue(node.i, this.getConstructor(node.f) + \"()\");\n        const len = node.a.length;\n        if (len) {\n            let values = this.serialize(node.a[0]);\n            for(let i = 1; i < len; i++){\n                values += \",\" + this.serialize(node.a[i]);\n            }\n            return \"(\" + result + \",\" + values + \",\" + this.getRefParam(node.i) + \")\";\n        }\n        return result;\n    }\n    serializeStreamNext(node) {\n        return this.getRefParam(node.i) + \".next(\" + this.serialize(node.f) + \")\";\n    }\n    serializeStreamThrow(node) {\n        return this.getRefParam(node.i) + \".throw(\" + this.serialize(node.f) + \")\";\n    }\n    serializeStreamReturn(node) {\n        return this.getRefParam(node.i) + \".return(\" + this.serialize(node.f) + \")\";\n    }\n    serialize(node) {\n        try {\n            switch(node.t){\n                case 2 /* Constant */ :\n                    return CONSTANT_STRING[node.s];\n                case 0 /* Number */ :\n                    return \"\" + node.s;\n                case 1 /* String */ :\n                    return '\"' + node.s + '\"';\n                case 3 /* BigInt */ :\n                    return node.s + \"n\";\n                case 4 /* IndexedValue */ :\n                    return this.getRefParam(node.i);\n                case 18 /* Reference */ :\n                    return this.serializeReference(node);\n                case 9 /* Array */ :\n                    return this.serializeArray(node);\n                case 10 /* Object */ :\n                    return this.serializeObject(node);\n                case 11 /* NullConstructor */ :\n                    return this.serializeNullConstructor(node);\n                case 5 /* Date */ :\n                    return this.serializeDate(node);\n                case 6 /* RegExp */ :\n                    return this.serializeRegExp(node);\n                case 7 /* Set */ :\n                    return this.serializeSet(node);\n                case 8 /* Map */ :\n                    return this.serializeMap(node);\n                case 19 /* ArrayBuffer */ :\n                    return this.serializeArrayBuffer(node);\n                case 16 /* BigIntTypedArray */ :\n                case 15 /* TypedArray */ :\n                    return this.serializeTypedArray(node);\n                case 20 /* DataView */ :\n                    return this.serializeDataView(node);\n                case 14 /* AggregateError */ :\n                    return this.serializeAggregateError(node);\n                case 13 /* Error */ :\n                    return this.serializeError(node);\n                case 12 /* Promise */ :\n                    return this.serializePromise(node);\n                case 17 /* WKSymbol */ :\n                    return this.serializeWellKnownSymbol(node);\n                case 21 /* Boxed */ :\n                    return this.serializeBoxed(node);\n                case 22 /* PromiseConstructor */ :\n                    return this.serializePromiseConstructor(node);\n                case 23 /* PromiseResolve */ :\n                    return this.serializePromiseResolve(node);\n                case 24 /* PromiseReject */ :\n                    return this.serializePromiseReject(node);\n                case 25 /* Plugin */ :\n                    return this.serializePlugin(node);\n                case 26 /* SpecialReference */ :\n                    return this.serializeSpecialReference(node);\n                case 27 /* IteratorFactory */ :\n                    return this.serializeIteratorFactory(node);\n                case 28 /* IteratorFactoryInstance */ :\n                    return this.serializeIteratorFactoryInstance(node);\n                case 29 /* AsyncIteratorFactory */ :\n                    return this.serializeAsyncIteratorFactory(node);\n                case 30 /* AsyncIteratorFactoryInstance */ :\n                    return this.serializeAsyncIteratorFactoryInstance(node);\n                case 31 /* StreamConstructor */ :\n                    return this.serializeStreamConstructor(node);\n                case 32 /* StreamNext */ :\n                    return this.serializeStreamNext(node);\n                case 33 /* StreamThrow */ :\n                    return this.serializeStreamThrow(node);\n                case 34 /* StreamReturn */ :\n                    return this.serializeStreamReturn(node);\n                default:\n                    throw new SerovalUnsupportedNodeError(node);\n            }\n        } catch (error) {\n            throw new SerovalSerializationError(error);\n        }\n    }\n};\n// src/core/utils/get-identifier.ts\nvar REF_START_CHARS = \"hjkmoquxzABCDEFGHIJKLNPQRTUVWXYZ$_\";\nvar REF_START_CHARS_LEN = REF_START_CHARS.length;\nvar REF_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_\";\nvar REF_CHARS_LEN = REF_CHARS.length;\nfunction getIdentifier(index) {\n    let mod = index % REF_START_CHARS_LEN;\n    let ref = REF_START_CHARS[mod];\n    index = (index - mod) / REF_START_CHARS_LEN;\n    while(index > 0){\n        mod = index % REF_CHARS_LEN;\n        ref += REF_CHARS[mod];\n        index = (index - mod) / REF_CHARS_LEN;\n    }\n    return ref;\n}\n// src/core/tree/serializer.ts\nvar VanillaSerializerContext = class extends BaseSerializerContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"vanilla\";\n        /**\n     * Map tree refs to actual refs\n     * @private\n     */ this.valid = /* @__PURE__ */ new Map();\n        /**\n     * Variables\n     * @private\n     */ this.vars = [];\n    }\n    /**\n   * Creates the reference param (identifier) from the given reference ID\n   * Calling this function means the value has been referenced somewhere\n   */ getRefParam(index) {\n        let actualIndex = this.valid.get(index);\n        if (actualIndex == null) {\n            actualIndex = this.valid.size;\n            this.valid.set(index, actualIndex);\n        }\n        let identifier = this.vars[actualIndex];\n        if (identifier == null) {\n            identifier = getIdentifier(actualIndex);\n            this.vars[actualIndex] = identifier;\n        }\n        return identifier;\n    }\n    assignIndexedValue(index, value) {\n        if (this.isMarked(index)) {\n            return this.getRefParam(index) + \"=\" + value;\n        }\n        return value;\n    }\n    serializePromiseConstructor(node) {\n        throw new SerovalUnsupportedNodeError(node);\n    }\n    serializePromiseResolve(node) {\n        throw new SerovalUnsupportedNodeError(node);\n    }\n    serializePromiseReject(node) {\n        throw new SerovalUnsupportedNodeError(node);\n    }\n    serializeTop(tree) {\n        const result = this.serialize(tree);\n        if (tree.i != null && this.vars.length) {\n            const patches = this.resolvePatches();\n            let body = result;\n            if (patches) {\n                const index = this.getRefParam(tree.i);\n                body = result + \",\" + patches + index;\n                if (!result.startsWith(index + \"=\")) {\n                    body = index + \"=\" + body;\n                }\n            }\n            return \"(\" + this.createFunction(this.vars, \"(\" + body + \")\") + \")()\";\n        }\n        if (tree.t === 10 /* Object */ ) {\n            return \"(\" + result + \")\";\n        }\n        return result;\n    }\n};\n// src/core/context/parser/sync.ts\nvar BaseSyncParserContext = class extends BaseParserContext {\n    parseItems(current) {\n        const nodes = [];\n        for(let i = 0, len = current.length; i < len; i++){\n            if (i in current) {\n                nodes[i] = this.parse(current[i]);\n            }\n        }\n        return nodes;\n    }\n    parseArray(id, current) {\n        return createArrayNode(id, current, this.parseItems(current));\n    }\n    parseProperties(properties) {\n        const entries = Object.entries(properties);\n        const keyNodes = [];\n        const valueNodes = [];\n        for(let i = 0, len = entries.length; i < len; i++){\n            keyNodes.push(serializeString(entries[i][0]));\n            valueNodes.push(this.parse(entries[i][1]));\n        }\n        let symbol = Symbol.iterator;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createIteratorFactoryInstanceNode(this.parseIteratorFactory(), this.parse(iteratorToSequence(properties))));\n        }\n        symbol = Symbol.asyncIterator;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createAsyncIteratorFactoryInstanceNode(this.parseAsyncIteratorFactory(), this.parse(createStream())));\n        }\n        symbol = Symbol.toStringTag;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createStringNode(properties[symbol]));\n        }\n        symbol = Symbol.isConcatSpreadable;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(properties[symbol] ? TRUE_NODE : FALSE_NODE);\n        }\n        return {\n            k: keyNodes,\n            v: valueNodes,\n            s: keyNodes.length\n        };\n    }\n    parsePlainObject(id, current, empty) {\n        return this.createObjectNode(id, current, empty, this.parseProperties(current));\n    }\n    parseBoxed(id, current) {\n        return createBoxedNode(id, this.parse(current.valueOf()));\n    }\n    parseTypedArray(id, current) {\n        return createTypedArrayNode(id, current, this.parse(current.buffer));\n    }\n    parseBigIntTypedArray(id, current) {\n        return createBigIntTypedArrayNode(id, current, this.parse(current.buffer));\n    }\n    parseDataView(id, current) {\n        return createDataViewNode(id, current, this.parse(current.buffer));\n    }\n    parseError(id, current) {\n        const options = getErrorOptions(current, this.features);\n        return createErrorNode(id, current, options ? this.parseProperties(options) : void 0);\n    }\n    parseAggregateError(id, current) {\n        const options = getErrorOptions(current, this.features);\n        return createAggregateErrorNode(id, current, options ? this.parseProperties(options) : void 0);\n    }\n    parseMap(id, current) {\n        const keyNodes = [];\n        const valueNodes = [];\n        for (const [key, value] of current.entries()){\n            keyNodes.push(this.parse(key));\n            valueNodes.push(this.parse(value));\n        }\n        return this.createMapNode(id, keyNodes, valueNodes, current.size);\n    }\n    parseSet(id, current) {\n        const items = [];\n        for (const item of current.keys()){\n            items.push(this.parse(item));\n        }\n        return createSetNode(id, current.size, items);\n    }\n    parsePlugin(id, current) {\n        const currentPlugins = this.plugins;\n        if (currentPlugins) {\n            for(let i = 0, len = currentPlugins.length; i < len; i++){\n                const plugin = currentPlugins[i];\n                if (plugin.parse.sync && plugin.test(current)) {\n                    return createPluginNode(id, plugin.tag, plugin.parse.sync(current, this, {\n                        id\n                    }));\n                }\n            }\n        }\n        return void 0;\n    }\n    parseStream(id, _current) {\n        return createStreamConstructorNode(id, this.parseSpecialReference(4 /* StreamConstructor */ ), []);\n    }\n    parsePromise(id, _current) {\n        return this.createPromiseConstructorNode(id);\n    }\n    parseObject(id, current) {\n        if (Array.isArray(current)) {\n            return this.parseArray(id, current);\n        }\n        if (isStream(current)) {\n            return this.parseStream(id, current);\n        }\n        const parsed = this.parsePlugin(id, current);\n        if (parsed) {\n            return parsed;\n        }\n        const currentClass = current.constructor;\n        switch(currentClass){\n            case Object:\n                return this.parsePlainObject(id, current, false);\n            case void 0:\n                return this.parsePlainObject(id, current, true);\n            case Date:\n                return createDateNode(id, current);\n            case RegExp:\n                return createRegExpNode(id, current);\n            case Error:\n            case EvalError:\n            case RangeError:\n            case ReferenceError:\n            case SyntaxError:\n            case TypeError:\n            case URIError:\n                return this.parseError(id, current);\n            case Number:\n            case Boolean:\n            case String:\n            case BigInt:\n                return this.parseBoxed(id, current);\n            case ArrayBuffer:\n                return createArrayBufferNode(id, current);\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case Uint8Array:\n            case Uint16Array:\n            case Uint32Array:\n            case Uint8ClampedArray:\n            case Float32Array:\n            case Float64Array:\n                return this.parseTypedArray(id, current);\n            case DataView:\n                return this.parseDataView(id, current);\n            case Map:\n                return this.parseMap(id, current);\n            case Set:\n                return this.parseSet(id, current);\n            default:\n                break;\n        }\n        if (currentClass === Promise || current instanceof Promise) {\n            return this.parsePromise(id, current);\n        }\n        const currentFeatures = this.features;\n        if (currentFeatures & 16 /* BigIntTypedArray */ ) {\n            switch(currentClass){\n                case BigInt64Array:\n                case BigUint64Array:\n                    return this.parseBigIntTypedArray(id, current);\n                default:\n                    break;\n            }\n        }\n        if (currentFeatures & 1 /* AggregateError */  && typeof AggregateError !== \"undefined\" && (currentClass === AggregateError || current instanceof AggregateError)) {\n            return this.parseAggregateError(id, current);\n        }\n        if (current instanceof Error) {\n            return this.parseError(id, current);\n        }\n        if (Symbol.iterator in current || Symbol.asyncIterator in current) {\n            return this.parsePlainObject(id, current, !!currentClass);\n        }\n        throw new SerovalUnsupportedTypeError(current);\n    }\n    parse(current) {\n        try {\n            switch(typeof current){\n                case \"boolean\":\n                    return current ? TRUE_NODE : FALSE_NODE;\n                case \"undefined\":\n                    return UNDEFINED_NODE;\n                case \"string\":\n                    return createStringNode(current);\n                case \"number\":\n                    return createNumberNode(current);\n                case \"bigint\":\n                    return createBigIntNode(current);\n                case \"object\":\n                    {\n                        if (current) {\n                            const ref = this.getReference(current);\n                            return ref.type === 0 ? this.parseObject(ref.value, current) : ref.value;\n                        }\n                        return NULL_NODE;\n                    }\n                case \"symbol\":\n                    return this.parseWellKnownSymbol(current);\n                case \"function\":\n                    return this.parseFunction(current);\n                default:\n                    throw new SerovalUnsupportedTypeError(current);\n            }\n        } catch (error) {\n            throw new SerovalParserError(error);\n        }\n    }\n};\n// src/core/tree/sync.ts\nvar SyncParserContext = class extends BaseSyncParserContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"vanilla\";\n    }\n};\n// src/core/tree/index.ts\nfunction serialize(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new SyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures\n    });\n    const tree = ctx.parse(source);\n    const serial = new VanillaSerializerContext({\n        plugins,\n        features: ctx.features,\n        markedRefs: ctx.marked\n    });\n    return serial.serializeTop(tree);\n}\nasync function serializeAsync(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new AsyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures\n    });\n    const tree = await ctx.parse(source);\n    const serial = new VanillaSerializerContext({\n        plugins,\n        features: ctx.features,\n        markedRefs: ctx.marked\n    });\n    return serial.serializeTop(tree);\n}\nfunction deserialize(source) {\n    return (0, eval)(source);\n}\nfunction toJSON(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new SyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures\n    });\n    return {\n        t: ctx.parse(source),\n        f: ctx.features,\n        m: Array.from(ctx.marked)\n    };\n}\nasync function toJSONAsync(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new AsyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures\n    });\n    return {\n        t: await ctx.parse(source),\n        f: ctx.features,\n        m: Array.from(ctx.marked)\n    };\n}\nfunction compileJSON(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new VanillaSerializerContext({\n        plugins,\n        features: source.f,\n        markedRefs: source.m\n    });\n    return ctx.serializeTop(source.t);\n}\nfunction fromJSON(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new VanillaDeserializerContext({\n        plugins,\n        markedRefs: source.m\n    });\n    return ctx.deserialize(source.t);\n}\n// src/core/cross/async.ts\nvar CrossAsyncParserContext = class extends BaseAsyncParserContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"cross\";\n    }\n};\n// src/core/cross/deserializer.ts\nvar CrossDeserializerContext = class extends BaseDeserializerContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"cross\";\n    }\n    assignIndexedValue(index, value) {\n        if (!this.refs.has(index)) {\n            this.refs.set(index, value);\n        }\n        return value;\n    }\n};\n// src/core/cross/serializer.ts\nvar CrossSerializerContext = class extends BaseSerializerContext {\n    constructor(options){\n        super(options);\n        this.mode = \"cross\";\n        this.scopeId = options.scopeId;\n    }\n    getRefParam(id) {\n        return GLOBAL_CONTEXT_REFERENCES + \"[\" + id + \"]\";\n    }\n    assignIndexedValue(index, value) {\n        return this.getRefParam(index) + \"=\" + value;\n    }\n    serializeTop(tree) {\n        const result = this.serialize(tree);\n        const id = tree.i;\n        if (id == null) {\n            return result;\n        }\n        const patches = this.resolvePatches();\n        const ref = this.getRefParam(id);\n        const params = this.scopeId == null ? \"\" : GLOBAL_CONTEXT_REFERENCES;\n        const body = patches ? result + \",\" + patches + ref : result;\n        if (params === \"\") {\n            return patches ? \"(\" + body + \")\" : body;\n        }\n        const args = this.scopeId == null ? \"()\" : \"(\" + GLOBAL_CONTEXT_REFERENCES + '[\"' + serializeString(this.scopeId) + '\"])';\n        return \"(\" + this.createFunction([\n            params\n        ], body) + \")\" + args;\n    }\n};\n// src/core/context/parser/stream.ts\nvar BaseStreamParserContext = class extends BaseSyncParserContext {\n    constructor(options){\n        super(options);\n        // Life\n        this.alive = true;\n        // Amount of pending promises/streams\n        this.pending = 0;\n        this.initial = true;\n        this.buffer = [];\n        this.onParseCallback = options.onParse;\n        this.onErrorCallback = options.onError;\n        this.onDoneCallback = options.onDone;\n    }\n    onParseInternal(node, initial) {\n        try {\n            this.onParseCallback(node, initial);\n        } catch (error) {\n            this.onError(error);\n        }\n    }\n    flush() {\n        for(let i = 0, len = this.buffer.length; i < len; i++){\n            this.onParseInternal(this.buffer[i], false);\n        }\n    }\n    onParse(node) {\n        if (this.initial) {\n            this.buffer.push(node);\n        } else {\n            this.onParseInternal(node, false);\n        }\n    }\n    onError(error) {\n        if (this.onErrorCallback) {\n            this.onErrorCallback(error);\n        } else {\n            throw error;\n        }\n    }\n    onDone() {\n        if (this.onDoneCallback) {\n            this.onDoneCallback();\n        }\n    }\n    pushPendingState() {\n        this.pending++;\n    }\n    popPendingState() {\n        if (--this.pending <= 0) {\n            this.onDone();\n        }\n    }\n    parseProperties(properties) {\n        const entries = Object.entries(properties);\n        const keyNodes = [];\n        const valueNodes = [];\n        for(let i = 0, len = entries.length; i < len; i++){\n            keyNodes.push(serializeString(entries[i][0]));\n            valueNodes.push(this.parse(entries[i][1]));\n        }\n        let symbol = Symbol.iterator;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createIteratorFactoryInstanceNode(this.parseIteratorFactory(), this.parse(iteratorToSequence(properties))));\n        }\n        symbol = Symbol.asyncIterator;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createAsyncIteratorFactoryInstanceNode(this.parseAsyncIteratorFactory(), this.parse(createStreamFromAsyncIterable(properties))));\n        }\n        symbol = Symbol.toStringTag;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(createStringNode(properties[symbol]));\n        }\n        symbol = Symbol.isConcatSpreadable;\n        if (symbol in properties) {\n            keyNodes.push(this.parseWellKnownSymbol(symbol));\n            valueNodes.push(properties[symbol] ? TRUE_NODE : FALSE_NODE);\n        }\n        return {\n            k: keyNodes,\n            v: valueNodes,\n            s: keyNodes.length\n        };\n    }\n    parsePromise(id, current) {\n        current.then((data)=>{\n            const parsed = this.parseWithError(data);\n            if (parsed) {\n                this.onParse({\n                    t: 23 /* PromiseResolve */ ,\n                    i: id,\n                    s: void 0,\n                    l: void 0,\n                    c: void 0,\n                    m: void 0,\n                    p: void 0,\n                    e: void 0,\n                    a: [\n                        this.parseSpecialReference(2 /* PromiseResolve */ ),\n                        parsed\n                    ],\n                    f: void 0,\n                    b: void 0,\n                    o: void 0\n                });\n            }\n            this.popPendingState();\n        }, (data)=>{\n            if (this.alive) {\n                const parsed = this.parseWithError(data);\n                if (parsed) {\n                    this.onParse({\n                        t: 24 /* PromiseReject */ ,\n                        i: id,\n                        s: void 0,\n                        l: void 0,\n                        c: void 0,\n                        m: void 0,\n                        p: void 0,\n                        e: void 0,\n                        a: [\n                            this.parseSpecialReference(3 /* PromiseReject */ ),\n                            parsed\n                        ],\n                        f: void 0,\n                        b: void 0,\n                        o: void 0\n                    });\n                }\n            }\n            this.popPendingState();\n        });\n        this.pushPendingState();\n        return this.createPromiseConstructorNode(id);\n    }\n    parsePlugin(id, current) {\n        const currentPlugins = this.plugins;\n        if (currentPlugins) {\n            for(let i = 0, len = currentPlugins.length; i < len; i++){\n                const plugin = currentPlugins[i];\n                if (plugin.parse.stream && plugin.test(current)) {\n                    return createPluginNode(id, plugin.tag, plugin.parse.stream(current, this, {\n                        id\n                    }));\n                }\n            }\n        }\n        return void 0;\n    }\n    parseStream(id, current) {\n        const result = createStreamConstructorNode(id, this.parseSpecialReference(4 /* StreamConstructor */ ), []);\n        this.pushPendingState();\n        current.on({\n            next: (value)=>{\n                if (this.alive) {\n                    const parsed = this.parseWithError(value);\n                    if (parsed) {\n                        this.onParse(createStreamNextNode(id, parsed));\n                    }\n                }\n            },\n            throw: (value)=>{\n                if (this.alive) {\n                    const parsed = this.parseWithError(value);\n                    if (parsed) {\n                        this.onParse(createStreamThrowNode(id, parsed));\n                    }\n                }\n                this.popPendingState();\n            },\n            return: (value)=>{\n                if (this.alive) {\n                    const parsed = this.parseWithError(value);\n                    if (parsed) {\n                        this.onParse(createStreamReturnNode(id, parsed));\n                    }\n                }\n                this.popPendingState();\n            }\n        });\n        return result;\n    }\n    parseWithError(current) {\n        try {\n            return this.parse(current);\n        } catch (err) {\n            this.onError(err);\n            return void 0;\n        }\n    }\n    /**\n   * @private\n   */ start(current) {\n        const parsed = this.parseWithError(current);\n        if (parsed) {\n            this.onParseInternal(parsed, true);\n            this.initial = false;\n            this.flush();\n            if (this.pending <= 0) {\n                this.destroy();\n            }\n        }\n    }\n    /**\n   * @private\n   */ destroy() {\n        if (this.alive) {\n            this.onDone();\n            this.alive = false;\n        }\n    }\n    isAlive() {\n        return this.alive;\n    }\n};\n// src/core/cross/stream.ts\nvar CrossStreamParserContext = class extends BaseStreamParserContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"cross\";\n    }\n};\n// src/core/cross/sync.ts\nvar CrossSyncParserContext = class extends BaseSyncParserContext {\n    constructor(){\n        super(...arguments);\n        this.mode = \"cross\";\n    }\n};\n// src/core/cross/index.ts\nfunction crossSerialize(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossSyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures,\n        refs: options.refs\n    });\n    const tree = ctx.parse(source);\n    const serial = new CrossSerializerContext({\n        plugins,\n        features: ctx.features,\n        scopeId: options.scopeId,\n        markedRefs: ctx.marked\n    });\n    return serial.serializeTop(tree);\n}\nasync function crossSerializeAsync(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossAsyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures,\n        refs: options.refs\n    });\n    const tree = await ctx.parse(source);\n    const serial = new CrossSerializerContext({\n        plugins,\n        features: ctx.features,\n        scopeId: options.scopeId,\n        markedRefs: ctx.marked\n    });\n    return serial.serializeTop(tree);\n}\nfunction toCrossJSON(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossSyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures,\n        refs: options.refs\n    });\n    return ctx.parse(source);\n}\nasync function toCrossJSONAsync(source, options = {}) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossAsyncParserContext({\n        plugins,\n        disabledFeatures: options.disabledFeatures,\n        refs: options.refs\n    });\n    return await ctx.parse(source);\n}\nfunction crossSerializeStream(source, options) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossStreamParserContext({\n        plugins,\n        refs: options.refs,\n        disabledFeatures: options.disabledFeatures,\n        onParse (node, initial) {\n            const serial = new CrossSerializerContext({\n                plugins,\n                features: ctx.features,\n                scopeId: options.scopeId,\n                markedRefs: ctx.marked\n            });\n            let serialized;\n            try {\n                serialized = serial.serializeTop(node);\n            } catch (err) {\n                if (options.onError) {\n                    options.onError(err);\n                }\n                return;\n            }\n            options.onSerialize(serialized, initial);\n        },\n        onError: options.onError,\n        onDone: options.onDone\n    });\n    ctx.start(source);\n    return ()=>{\n        ctx.destroy();\n    };\n}\nfunction toCrossJSONStream(source, options) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossStreamParserContext({\n        plugins,\n        refs: options.refs,\n        disabledFeatures: options.disabledFeatures,\n        onParse: options.onParse,\n        onError: options.onError,\n        onDone: options.onDone\n    });\n    ctx.start(source);\n    return ()=>{\n        ctx.destroy();\n    };\n}\nfunction fromCrossJSON(source, options) {\n    const plugins = resolvePlugins(options.plugins);\n    const ctx = new CrossDeserializerContext({\n        plugins,\n        refs: options.refs\n    });\n    return ctx.deserialize(source);\n}\n// src/core/Serializer.ts\nvar Serializer = class {\n    constructor(options){\n        this.options = options;\n        this.alive = true;\n        this.flushed = false;\n        this.done = false;\n        this.pending = 0;\n        this.cleanups = [];\n        this.refs = /* @__PURE__ */ new Map();\n        this.keys = /* @__PURE__ */ new Set();\n        this.ids = 0;\n        this.plugins = resolvePlugins(options.plugins);\n    }\n    write(key, value) {\n        if (this.alive && !this.flushed) {\n            this.pending++;\n            this.keys.add(key);\n            this.cleanups.push(crossSerializeStream(value, {\n                plugins: this.plugins,\n                scopeId: this.options.scopeId,\n                refs: this.refs,\n                disabledFeatures: this.options.disabledFeatures,\n                onError: this.options.onError,\n                onSerialize: (data, initial)=>{\n                    if (this.alive) {\n                        this.options.onData(initial ? this.options.globalIdentifier + '[\"' + serializeString(key) + '\"]=' + data : data);\n                    }\n                },\n                onDone: ()=>{\n                    if (this.alive) {\n                        this.pending--;\n                        if (this.pending <= 0 && this.flushed && !this.done && this.options.onDone) {\n                            this.options.onDone();\n                            this.done = true;\n                        }\n                    }\n                }\n            }));\n        }\n    }\n    getNextID() {\n        while(this.keys.has(\"\" + this.ids)){\n            this.ids++;\n        }\n        return \"\" + this.ids;\n    }\n    push(value) {\n        const newID = this.getNextID();\n        this.write(newID, value);\n        return newID;\n    }\n    flush() {\n        if (this.alive) {\n            this.flushed = true;\n            if (this.pending <= 0 && !this.done && this.options.onDone) {\n                this.options.onDone();\n                this.done = true;\n            }\n        }\n    }\n    close() {\n        if (this.alive) {\n            for(let i = 0, len = this.cleanups.length; i < len; i++){\n                this.cleanups[i]();\n            }\n            if (!this.done && this.options.onDone) {\n                this.options.onDone();\n                this.done = true;\n            }\n            this.alive = false;\n        }\n    }\n};\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/seroval/dist/esm/development/index.mjs\n");

/***/ })

};
;