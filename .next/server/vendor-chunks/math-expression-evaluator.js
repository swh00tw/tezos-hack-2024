"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/math-expression-evaluator";
exports.ids = ["vendor-chunks/math-expression-evaluator"];
exports.modules = {

/***/ "(ssr)/./node_modules/math-expression-evaluator/src/formula_evaluator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/math-expression-evaluator/src/formula_evaluator.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Mexp = __webpack_require__(/*! ./postfix_evaluator.js */ \"(ssr)/./node_modules/math-expression-evaluator/src/postfix_evaluator.js\");\nMexp.prototype.formulaEval = function() {\n    \"use strict\";\n    var stack = [], pop1, pop2, pop3;\n    var disp = [];\n    var temp = \"\";\n    var arr = this.value;\n    for(var i = 0; i < arr.length; i++){\n        if (arr[i].type === 1 || arr[i].type === 3) {\n            disp.push({\n                value: arr[i].type === 3 ? arr[i].show : arr[i].value,\n                type: 1\n            });\n        } else if (arr[i].type === 13) {\n            disp.push({\n                value: arr[i].show,\n                type: 1\n            });\n        } else if (arr[i].type === 0) {\n            disp[disp.length - 1] = {\n                value: arr[i].show + (arr[i].show != \"-\" ? \"(\" : \"\") + disp[disp.length - 1].value + (arr[i].show != \"-\" ? \")\" : \"\"),\n                type: 0\n            };\n        } else if (arr[i].type === 7) {\n            disp[disp.length - 1] = {\n                value: (disp[disp.length - 1].type != 1 ? \"(\" : \"\") + disp[disp.length - 1].value + (disp[disp.length - 1].type != 1 ? \")\" : \"\") + arr[i].show,\n                type: 7\n            };\n        } else if (arr[i].type === 10) {\n            pop1 = disp.pop();\n            pop2 = disp.pop();\n            if (arr[i].show === \"P\" || arr[i].show === \"C\") disp.push({\n                value: \"<sup>\" + pop2.value + \"</sup>\" + arr[i].show + \"<sub>\" + pop1.value + \"</sub>\",\n                type: 10\n            });\n            else disp.push({\n                value: (pop2.type != 1 ? \"(\" : \"\") + pop2.value + (pop2.type != 1 ? \")\" : \"\") + \"<sup>\" + pop1.value + \"</sup>\",\n                type: 1\n            });\n        } else if (arr[i].type === 2 || arr[i].type === 9) {\n            pop1 = disp.pop();\n            pop2 = disp.pop();\n            disp.push({\n                value: (pop2.type != 1 ? \"(\" : \"\") + pop2.value + (pop2.type != 1 ? \")\" : \"\") + arr[i].show + (pop1.type != 1 ? \"(\" : \"\") + pop1.value + (pop1.type != 1 ? \")\" : \"\"),\n                type: arr[i].type\n            });\n        } else if (arr[i].type === 12) {\n            pop1 = disp.pop();\n            pop2 = disp.pop();\n            pop3 = disp.pop();\n            disp.push({\n                value: arr[i].show + \"(\" + pop3.value + \",\" + pop2.value + \",\" + pop1.value + \")\",\n                type: 12\n            });\n        }\n    }\n    return disp[0].value;\n};\nmodule.exports = Mexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWF0aC1leHByZXNzaW9uLWV2YWx1YXRvci9zcmMvZm9ybXVsYV9ldmFsdWF0b3IuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLE9BQUtDLG1CQUFPQSxDQUFDO0FBQ2pCRCxLQUFLRSxTQUFTLENBQUNDLFdBQVcsR0FBRztJQUM1QjtJQUNBLElBQUlDLFFBQU0sRUFBRSxFQUFDQyxNQUFLQyxNQUFLQztJQUN2QixJQUFJQyxPQUFLLEVBQUU7SUFDWCxJQUFJQyxPQUFLO0lBQ1QsSUFBSUMsTUFBSSxJQUFJLENBQUNDLEtBQUs7SUFDbEIsSUFBSSxJQUFJQyxJQUFFLEdBQUVBLElBQUVGLElBQUlHLE1BQU0sRUFBQ0QsSUFBSTtRQUM1QixJQUFHRixHQUFHLENBQUNFLEVBQUUsQ0FBQ0UsSUFBSSxLQUFHLEtBQUdKLEdBQUcsQ0FBQ0UsRUFBRSxDQUFDRSxJQUFJLEtBQUcsR0FBRTtZQUNuQ04sS0FBS08sSUFBSSxDQUFDO2dCQUFDSixPQUFNRCxHQUFHLENBQUNFLEVBQUUsQ0FBQ0UsSUFBSSxLQUFHLElBQUVKLEdBQUcsQ0FBQ0UsRUFBRSxDQUFDSSxJQUFJLEdBQUNOLEdBQUcsQ0FBQ0UsRUFBRSxDQUFDRCxLQUFLO2dCQUFDRyxNQUFLO1lBQUM7UUFDakUsT0FDSyxJQUFHSixHQUFHLENBQUNFLEVBQUUsQ0FBQ0UsSUFBSSxLQUFHLElBQUc7WUFDeEJOLEtBQUtPLElBQUksQ0FBQztnQkFBQ0osT0FBTUQsR0FBRyxDQUFDRSxFQUFFLENBQUNJLElBQUk7Z0JBQUNGLE1BQUs7WUFBQztRQUNwQyxPQUNLLElBQUdKLEdBQUcsQ0FBQ0UsRUFBRSxDQUFDRSxJQUFJLEtBQUcsR0FBRTtZQUN2Qk4sSUFBSSxDQUFDQSxLQUFLSyxNQUFNLEdBQUMsRUFBRSxHQUFDO2dCQUFDRixPQUFNRCxHQUFHLENBQUNFLEVBQUUsQ0FBQ0ksSUFBSSxHQUFFTixDQUFBQSxHQUFHLENBQUNFLEVBQUUsQ0FBQ0ksSUFBSSxJQUFFLE1BQUks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YWNrOi8vcHdycGVya3MvLi9ub2RlX21vZHVsZXMvbWF0aC1leHByZXNzaW9uLWV2YWx1YXRvci9zcmMvZm9ybXVsYV9ldmFsdWF0b3IuanM/OGY1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgTWV4cD1yZXF1aXJlKCcuL3Bvc3RmaXhfZXZhbHVhdG9yLmpzJyk7XHJcbk1leHAucHJvdG90eXBlLmZvcm11bGFFdmFsID0gZnVuY3Rpb24gKCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdHZhciBzdGFjaz1bXSxwb3AxLHBvcDIscG9wMztcclxuXHR2YXIgZGlzcD1bXTtcclxuXHR2YXIgdGVtcD0nJztcclxuXHR2YXIgYXJyPXRoaXMudmFsdWU7XHJcblx0Zm9yKHZhciBpPTA7aTxhcnIubGVuZ3RoO2krKyl7XHJcblx0XHRpZihhcnJbaV0udHlwZT09PTF8fGFycltpXS50eXBlPT09Myl7XHJcblx0XHRcdGRpc3AucHVzaCh7dmFsdWU6YXJyW2ldLnR5cGU9PT0zP2FycltpXS5zaG93OmFycltpXS52YWx1ZSx0eXBlOjF9KTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoYXJyW2ldLnR5cGU9PT0xMyl7XHJcblx0XHRcdGRpc3AucHVzaCh7dmFsdWU6YXJyW2ldLnNob3csdHlwZToxfSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGFycltpXS50eXBlPT09MCl7XHJcblx0XHRcdGRpc3BbZGlzcC5sZW5ndGgtMV09e3ZhbHVlOmFycltpXS5zaG93KyhhcnJbaV0uc2hvdyE9XCItXCI/XCIoXCI6XCJcIikrZGlzcFtkaXNwLmxlbmd0aC0xXS52YWx1ZSsoYXJyW2ldLnNob3chPVwiLVwiP1wiKVwiOlwiXCIpLHR5cGU6MH07XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGFycltpXS50eXBlPT09Nyl7XHJcblx0XHRcdGRpc3BbZGlzcC5sZW5ndGgtMV09e3ZhbHVlOihkaXNwW2Rpc3AubGVuZ3RoLTFdLnR5cGUhPTE/XCIoXCI6XCJcIikrZGlzcFtkaXNwLmxlbmd0aC0xXS52YWx1ZSsoZGlzcFtkaXNwLmxlbmd0aC0xXS50eXBlIT0xP1wiKVwiOlwiXCIpK2FycltpXS5zaG93LHR5cGU6N307XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGFycltpXS50eXBlPT09MTApe1xyXG5cdFx0XHRwb3AxPWRpc3AucG9wKCk7XHJcblx0XHRcdHBvcDI9ZGlzcC5wb3AoKTtcclxuXHRcdFx0aWYoYXJyW2ldLnNob3c9PT0nUCd8fGFycltpXS5zaG93PT09J0MnKWRpc3AucHVzaCh7dmFsdWU6XCI8c3VwPlwiK3BvcDIudmFsdWUrXCI8L3N1cD5cIithcnJbaV0uc2hvdytcIjxzdWI+XCIrcG9wMS52YWx1ZStcIjwvc3ViPlwiLHR5cGU6MTB9KTtcclxuXHRcdFx0ZWxzZSBkaXNwLnB1c2goe3ZhbHVlOihwb3AyLnR5cGUhPTE/XCIoXCI6XCJcIikrcG9wMi52YWx1ZSsocG9wMi50eXBlIT0xP1wiKVwiOlwiXCIpK1wiPHN1cD5cIitwb3AxLnZhbHVlK1wiPC9zdXA+XCIsdHlwZToxfSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGFycltpXS50eXBlPT09Mnx8YXJyW2ldLnR5cGU9PT05KXtcclxuXHRcdFx0cG9wMT1kaXNwLnBvcCgpO1xyXG5cdFx0XHRwb3AyPWRpc3AucG9wKCk7XHJcblx0XHRcdGRpc3AucHVzaCh7dmFsdWU6KHBvcDIudHlwZSE9MT9cIihcIjpcIlwiKStwb3AyLnZhbHVlKyhwb3AyLnR5cGUhPTE/XCIpXCI6XCJcIikrYXJyW2ldLnNob3crKHBvcDEudHlwZSE9MT9cIihcIjpcIlwiKStwb3AxLnZhbHVlKyhwb3AxLnR5cGUhPTE/XCIpXCI6XCJcIiksdHlwZTphcnJbaV0udHlwZX0pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihhcnJbaV0udHlwZT09PTEyKXtcclxuXHRcdFx0cG9wMT1kaXNwLnBvcCgpO1xyXG5cdFx0XHRwb3AyPWRpc3AucG9wKCk7XHJcblx0XHRcdHBvcDM9ZGlzcC5wb3AoKTtcclxuXHRcdFx0ZGlzcC5wdXNoKHt2YWx1ZTphcnJbaV0uc2hvdytcIihcIitwb3AzLnZhbHVlK1wiLFwiK3BvcDIudmFsdWUrXCIsXCIrcG9wMS52YWx1ZStcIilcIix0eXBlOjEyfSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBkaXNwWzBdLnZhbHVlO1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cz1NZXhwOyJdLCJuYW1lcyI6WyJNZXhwIiwicmVxdWlyZSIsInByb3RvdHlwZSIsImZvcm11bGFFdmFsIiwic3RhY2siLCJwb3AxIiwicG9wMiIsInBvcDMiLCJkaXNwIiwidGVtcCIsImFyciIsInZhbHVlIiwiaSIsImxlbmd0aCIsInR5cGUiLCJwdXNoIiwic2hvdyIsInBvcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/math-expression-evaluator/src/formula_evaluator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/math-expression-evaluator/src/lexer.js":
/*!*************************************************************!*\
  !*** ./node_modules/math-expression-evaluator/src/lexer.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Mexp = __webpack_require__(/*! ./math_function.js */ \"(ssr)/./node_modules/math-expression-evaluator/src/math_function.js\");\nfunction inc(arr, val) {\n    for(var i = 0; i < arr.length; i++){\n        arr[i] += val;\n    }\n    return arr;\n}\nvar tokens = [\n    {\n        token: \"sin\",\n        show: \"sin\",\n        type: 0,\n        value: Mexp.math.sin\n    },\n    {\n        token: \"cos\",\n        show: \"cos\",\n        type: 0,\n        value: Mexp.math.cos\n    },\n    {\n        token: \"tan\",\n        show: \"tan\",\n        type: 0,\n        value: Mexp.math.tan\n    },\n    {\n        token: \"pi\",\n        show: \"&pi;\",\n        type: 3,\n        value: \"PI\"\n    },\n    {\n        token: \"(\",\n        show: \"(\",\n        type: 4,\n        value: \"(\"\n    },\n    {\n        token: \")\",\n        show: \")\",\n        type: 5,\n        value: \")\"\n    },\n    {\n        token: \"P\",\n        show: \"P\",\n        type: 10,\n        value: Mexp.math.P\n    },\n    {\n        token: \"C\",\n        show: \"C\",\n        type: 10,\n        value: Mexp.math.C\n    },\n    {\n        token: \" \",\n        show: \" \",\n        type: 14,\n        value: \" \".anchor\n    },\n    {\n        token: \"asin\",\n        show: \"asin\",\n        type: 0,\n        value: Mexp.math.asin\n    },\n    {\n        token: \"acos\",\n        show: \"acos\",\n        type: 0,\n        value: Mexp.math.acos\n    },\n    {\n        token: \"atan\",\n        show: \"atan\",\n        type: 0,\n        value: Mexp.math.atan\n    },\n    {\n        token: \"7\",\n        show: \"7\",\n        type: 1,\n        value: \"7\"\n    },\n    {\n        token: \"8\",\n        show: \"8\",\n        type: 1,\n        value: \"8\"\n    },\n    {\n        token: \"9\",\n        show: \"9\",\n        type: 1,\n        value: \"9\"\n    },\n    {\n        token: \"int\",\n        show: \"Int\",\n        type: 0,\n        value: Math.floor\n    },\n    {\n        token: \"cosh\",\n        show: \"cosh\",\n        type: 0,\n        value: Mexp.math.cosh\n    },\n    {\n        token: \"acosh\",\n        show: \"acosh\",\n        type: 0,\n        value: Mexp.math.acosh\n    },\n    {\n        token: \"ln\",\n        show: \" ln\",\n        type: 0,\n        value: Math.log\n    },\n    {\n        token: \"^\",\n        show: \"^\",\n        type: 10,\n        value: Math.pow\n    },\n    {\n        token: \"root\",\n        show: \"root\",\n        type: 0,\n        value: Math.sqrt\n    },\n    {\n        token: \"4\",\n        show: \"4\",\n        type: 1,\n        value: \"4\"\n    },\n    {\n        token: \"5\",\n        show: \"5\",\n        type: 1,\n        value: \"5\"\n    },\n    {\n        token: \"6\",\n        show: \"6\",\n        type: 1,\n        value: \"6\"\n    },\n    {\n        token: \"/\",\n        show: \"&divide;\",\n        type: 2,\n        value: Mexp.math.div\n    },\n    {\n        token: \"!\",\n        show: \"!\",\n        type: 7,\n        value: Mexp.math.fact\n    },\n    {\n        token: \"tanh\",\n        show: \"tanh\",\n        type: 0,\n        value: Mexp.math.tanh\n    },\n    {\n        token: \"atanh\",\n        show: \"atanh\",\n        type: 0,\n        value: Mexp.math.atanh\n    },\n    {\n        token: \"Mod\",\n        show: \" Mod \",\n        type: 2,\n        value: Mexp.math.mod\n    },\n    {\n        token: \"1\",\n        show: \"1\",\n        type: 1,\n        value: \"1\"\n    },\n    {\n        token: \"2\",\n        show: \"2\",\n        type: 1,\n        value: \"2\"\n    },\n    {\n        token: \"3\",\n        show: \"3\",\n        type: 1,\n        value: \"3\"\n    },\n    {\n        token: \"*\",\n        show: \"&times;\",\n        type: 2,\n        value: Mexp.math.mul\n    },\n    {\n        token: \"sinh\",\n        show: \"sinh\",\n        type: 0,\n        value: Mexp.math.sinh\n    },\n    {\n        token: \"asinh\",\n        show: \"asinh\",\n        type: 0,\n        value: Mexp.math.asinh\n    },\n    {\n        token: \"e\",\n        show: \"e\",\n        type: 3,\n        value: \"E\"\n    },\n    {\n        token: \"log\",\n        show: \" log\",\n        type: 0,\n        value: Mexp.math.log\n    },\n    {\n        token: \"0\",\n        show: \"0\",\n        type: 1,\n        value: \"0\"\n    },\n    {\n        token: \".\",\n        show: \".\",\n        type: 6,\n        value: \".\"\n    },\n    {\n        token: \"+\",\n        show: \"+\",\n        type: 9,\n        value: Mexp.math.add\n    },\n    {\n        token: \"-\",\n        show: \"-\",\n        type: 9,\n        value: Mexp.math.sub\n    },\n    {\n        token: \",\",\n        show: \",\",\n        type: 11,\n        value: \",\"\n    },\n    {\n        token: \"Sigma\",\n        show: \"&Sigma;\",\n        type: 12,\n        value: Mexp.math.sigma\n    },\n    {\n        token: \"n\",\n        show: \"n\",\n        type: 13,\n        value: \"n\"\n    },\n    {\n        token: \"Pi\",\n        show: \"&Pi;\",\n        type: 12,\n        value: Mexp.math.Pi\n    },\n    {\n        token: \"pow\",\n        show: \"pow\",\n        type: 8,\n        value: Math.pow,\n        numberOfArguments: 2\n    },\n    {\n        token: \"&\",\n        show: \"&\",\n        type: 9,\n        value: Mexp.math.and\n    }\n];\nvar preced = {\n    0: 11,\n    1: 0,\n    2: 3,\n    3: 0,\n    4: 0,\n    5: 0,\n    6: 0,\n    7: 11,\n    8: 11,\n    9: 1,\n    10: 10,\n    11: 0,\n    12: 11,\n    13: 0,\n    14: -1,\n    15: 11\n} // stores precedence by types\n;\nfor(var i = 0; i < tokens.length; i++){\n    tokens[i].precedence = preced[tokens[i].type];\n}\nvar type0 = {\n    0: true,\n    1: true,\n    3: true,\n    4: true,\n    6: true,\n    8: true,\n    9: true,\n    12: true,\n    13: true,\n    14: true,\n    15: true\n} // type2:true,type4:true,type9:true,type11:true,type21:true,type22\n;\nvar type1 = {\n    0: true,\n    1: true,\n    2: true,\n    3: true,\n    4: true,\n    5: true,\n    6: true,\n    7: true,\n    8: true,\n    9: true,\n    10: true,\n    11: true,\n    12: true,\n    13: true,\n    15: true\n} // type3:true,type5:true,type7:true,type23\n;\nvar type1Asterick = {\n    0: true,\n    3: true,\n    4: true,\n    8: true,\n    12: true,\n    13: true,\n    15: true\n};\nvar empty = {};\nvar type3Asterick = {\n    0: true,\n    1: true,\n    3: true,\n    4: true,\n    6: true,\n    8: true,\n    12: true,\n    13: true,\n    15: true\n} // type_5:true,type_7:true,type_23\n;\nvar type6 = {\n    1: true\n};\nvar newAr = [\n    [],\n    [\n        \"1\",\n        \"2\",\n        \"3\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"(\",\n        \")\",\n        \"^\",\n        \"!\",\n        \"P\",\n        \"C\",\n        \"e\",\n        \"0\",\n        \".\",\n        \",\",\n        \"n\",\n        \" \",\n        \"&\"\n    ],\n    [\n        \"pi\",\n        \"ln\",\n        \"Pi\"\n    ],\n    [\n        \"sin\",\n        \"cos\",\n        \"tan\",\n        \"Del\",\n        \"int\",\n        \"Mod\",\n        \"log\",\n        \"pow\"\n    ],\n    [\n        \"asin\",\n        \"acos\",\n        \"atan\",\n        \"cosh\",\n        \"root\",\n        \"tanh\",\n        \"sinh\"\n    ],\n    [\n        \"acosh\",\n        \"atanh\",\n        \"asinh\",\n        \"Sigma\"\n    ]\n];\nfunction match(str1, str2, i, x) {\n    for(var f = 0; f < x; f++){\n        if (str1[i + f] !== str2[f]) {\n            return false;\n        }\n    }\n    return true;\n}\nMexp.tokenTypes = {\n    FUNCTION_WITH_ONE_ARG: 0,\n    NUMBER: 1,\n    BINARY_OPERATOR_HIGH_PRECENDENCE: 2,\n    CONSTANT: 3,\n    OPENING_PARENTHESIS: 4,\n    CLOSING_PARENTHESIS: 5,\n    DECIMAL: 6,\n    POSTFIX_FUNCTION_WITH_ONE_ARG: 7,\n    FUNCTION_WITH_N_ARGS: 8,\n    BINARY_OPERATOR_LOW_PRECENDENCE: 9,\n    BINARY_OPERATOR_PERMUTATION: 10,\n    COMMA: 11,\n    EVALUATED_FUNCTION: 12,\n    EVALUATED_FUNCTION_PARAMETER: 13,\n    SPACE: 14\n};\n/**\r\n  \r\n  0 : function with syntax function_name(Maths_exp)\r\n  1 : numbers\r\n  2 : binary operators like * / Mod left associate and same precedence\r\n  3 : Math constant values like e,pi,Cruncher ans\r\n  4 : opening bracket\r\n  5 : closing bracket\r\n  6 : decimal\r\n  7 : function with syntax (Math_exp)function_name\r\n  8: function with syntax function_name(Math_exp1,Math_exp2)\r\n  9 : binary operator like +,-\r\n  10: binary operator like P C or ^\r\n  11: ,\r\n  12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n  13: variable of Sigma function\r\n */ Mexp.addToken = function(newTokens) {\n    for(var i = 0; i < newTokens.length; i++){\n        var x = newTokens[i].token.length;\n        var temp = -1;\n        if (newTokens[i].type === Mexp.tokenTypes.FUNCTION_WITH_N_ARGS && newTokens[i].numberOfArguments === undefined) {\n            newTokens[i].numberOfArguments = 2;\n        }\n        // newAr is a specially designed data structure index of 1d array = length of tokens\n        newAr[x] = newAr[x] || [];\n        for(var y = 0; y < newAr[x].length; y++){\n            if (newTokens[i].token === newAr[x][y]) {\n                temp = indexOfToken(newAr[x][y], tokens);\n                break;\n            }\n        }\n        if (temp === -1) {\n            tokens.push(newTokens[i]);\n            newTokens[i].precedence = preced[newTokens[i].type];\n            if (newAr.length <= newTokens[i].token.length) {\n                newAr[newTokens[i].token.length] = [];\n            }\n            newAr[newTokens[i].token.length].push(newTokens[i].token);\n        } else {\n            // overwrite\n            tokens[temp] = newTokens[i];\n            newTokens[i].precedence = preced[newTokens[i].type];\n        }\n    }\n};\nfunction indexOfToken(key, tokens) {\n    for(var search = 0; search < tokens.length; search++){\n        if (tokens[search].token === key) return search;\n    }\n    return -1;\n}\nfunction tokenize(string) {\n    var nodes = [];\n    var length = string.length;\n    var key, x, y;\n    for(var i = 0; i < length; i++){\n        if (i < length - 1 && string[i] === \" \" && string[i + 1] === \" \") {\n            continue;\n        }\n        key = \"\";\n        for(x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i; x > 0; x--){\n            if (newAr[x] === undefined) continue;\n            for(y = 0; y < newAr[x].length; y++){\n                if (match(string, newAr[x][y], i, x)) {\n                    key = newAr[x][y];\n                    y = newAr[x].length;\n                    x = 0;\n                }\n            }\n        }\n        i += key.length - 1;\n        if (key === \"\") {\n            throw new Mexp.Exception(\"Can't understand after \" + string.slice(i));\n        }\n        nodes.push(tokens[indexOfToken(key, tokens)]);\n    }\n    return nodes;\n}\nvar changeSignObj = {\n    value: Mexp.math.changeSign,\n    type: 0,\n    pre: 21,\n    show: \"-\"\n};\nvar closingParObj = {\n    value: \")\",\n    show: \")\",\n    type: 5,\n    pre: 0\n};\nvar openingParObj = {\n    value: \"(\",\n    type: 4,\n    pre: 0,\n    show: \"(\"\n};\nMexp.lex = function(inp, tokens) {\n    \"use strict\";\n    var str = [\n        openingParObj\n    ];\n    var ptc = [] // Parenthesis to close at the beginning is after one token\n    ;\n    var inpStr = inp;\n    var allowed = type0;\n    var bracToClose = 0;\n    var asterick = empty;\n    var prevKey = \"\";\n    var i;\n    if (typeof tokens !== \"undefined\") {\n        Mexp.addToken(tokens);\n    }\n    var obj = {};\n    var nodes = tokenize(inpStr);\n    for(i = 0; i < nodes.length; i++){\n        var node = nodes[i];\n        if (node.type === 14) {\n            if (i > 0 && i < nodes.length - 1 && nodes[i + 1].type === 1 && (nodes[i - 1].type === 1 || nodes[i - 1].type === 6)) {\n                throw new Mexp.Exception(\"Unexpected Space\");\n            }\n            continue;\n        }\n        var cToken = node.token;\n        var cType = node.type;\n        var cEv = node.value;\n        var cPre = node.precedence;\n        var cShow = node.show;\n        var pre = str[str.length - 1];\n        var j;\n        for(j = ptc.length; j--;){\n            // loop over ptc\n            if (ptc[j] === 0) {\n                if ([\n                    0,\n                    2,\n                    3,\n                    4,\n                    5,\n                    9,\n                    11,\n                    12,\n                    13\n                ].indexOf(cType) !== -1) {\n                    if (allowed[cType] !== true) {\n                        throw new Mexp.Exception(cToken + \" is not allowed after \" + prevKey);\n                    }\n                    str.push(closingParObj);\n                    allowed = type1;\n                    asterick = type3Asterick;\n                    ptc.pop();\n                }\n            } else break;\n        }\n        if (allowed[cType] !== true) {\n            throw new Mexp.Exception(cToken + \" is not allowed after \" + prevKey);\n        }\n        if (asterick[cType] === true) {\n            cType = 2;\n            cEv = Mexp.math.mul;\n            cShow = \"&times;\";\n            cPre = 3;\n            i = i - 1;\n        }\n        obj = {\n            value: cEv,\n            type: cType,\n            pre: cPre,\n            show: cShow,\n            numberOfArguments: node.numberOfArguments\n        };\n        if (cType === 0) {\n            allowed = type0;\n            asterick = empty;\n            inc(ptc, 2);\n            str.push(obj);\n            if (nodes[i + 1].type !== 4) {\n                str.push(openingParObj);\n                ptc.push(2);\n            }\n        // bracToClose++\n        } else if (cType === 1) {\n            if (pre.type === 1) {\n                pre.value += cEv;\n                inc(ptc, 1);\n            } else {\n                str.push(obj);\n            }\n            allowed = type1;\n            asterick = type1Asterick;\n        } else if (cType === 2) {\n            allowed = type0;\n            asterick = empty;\n            inc(ptc, 2);\n            str.push(obj);\n        } else if (cType === 3) {\n            // constant\n            str.push(obj);\n            allowed = type1;\n            asterick = type3Asterick;\n        } else if (cType === 4) {\n            inc(ptc, 1);\n            bracToClose++;\n            allowed = type0;\n            asterick = empty;\n            str.push(obj);\n        } else if (cType === 5) {\n            if (!bracToClose) {\n                throw new Mexp.Exception(\"Closing parenthesis are more than opening one, wait What!!!\");\n            }\n            bracToClose--;\n            allowed = type1;\n            asterick = type3Asterick;\n            str.push(obj);\n            inc(ptc, 1);\n        } else if (cType === 6) {\n            if (pre.hasDec) {\n                throw new Mexp.Exception(\"Two decimals are not allowed in one number\");\n            }\n            if (pre.type !== 1) {\n                pre = {\n                    value: 0,\n                    type: 1,\n                    pre: 0\n                } // pre needs to be changed as it will the last value now to be safe in later code\n                ;\n                str.push(pre);\n            // inc(ptc, 1)\n            }\n            allowed = type6;\n            inc(ptc, 1);\n            asterick = empty;\n            pre.value += cEv;\n            pre.hasDec = true;\n        } else if (cType === 7) {\n            allowed = type1;\n            asterick = type3Asterick;\n            inc(ptc, 1);\n            str.push(obj);\n        }\n        if (cType === 8) {\n            allowed = type0;\n            asterick = empty;\n            inc(ptc, node.numberOfArguments + 2);\n            str.push(obj);\n            // str.push(openingParObj)\n            if (nodes[i + 1].type !== 4) {\n                str.push(openingParObj);\n                ptc.push(node.numberOfArguments + 2);\n            }\n        } else if (cType === 9) {\n            if (pre.type === 9) {\n                if (pre.value === Mexp.math.add) {\n                    pre.value = cEv;\n                    pre.show = cShow;\n                    inc(ptc, 1);\n                } else if (pre.value === Mexp.math.sub && cShow === \"-\") {\n                    pre.value = Mexp.math.add;\n                    pre.show = \"+\";\n                    inc(ptc, 1);\n                }\n            } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\n                // changesign only when negative is found\n                if (cToken === \"-\") {\n                    // do nothing for + token\n                    // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\n                    allowed = type0;\n                    asterick = empty;\n                    inc(ptc, 2).push(2);\n                    str.push(changeSignObj);\n                    str.push(openingParObj);\n                }\n            } else {\n                str.push(obj);\n                inc(ptc, 2);\n            }\n            allowed = type0;\n            asterick = empty;\n        } else if (cType === 10) {\n            allowed = type0;\n            asterick = empty;\n            inc(ptc, 2);\n            str.push(obj);\n        } else if (cType === 11) {\n            allowed = type0;\n            asterick = empty;\n            str.push(obj);\n        } else if (cType === 12) {\n            allowed = type0;\n            asterick = empty;\n            inc(ptc, 6);\n            str.push(obj);\n            if (nodes[i + 1].type !== 4) {\n                str.push(openingParObj);\n                ptc.push(6);\n            }\n        } else if (cType === 13) {\n            allowed = type1;\n            asterick = type3Asterick;\n            str.push(obj);\n        }\n        inc(ptc, -1);\n        prevKey = cToken;\n    }\n    for(j = ptc.length; j--;){\n        // loop over ptc\n        str.push(closingParObj);\n    }\n    if (allowed[5] !== true) {\n        throw new Mexp.Exception(\"complete the expression\");\n    }\n    while(bracToClose--){\n        str.push(closingParObj);\n    }\n    str.push(closingParObj);\n    //        console.log(str);\n    return new Mexp(str);\n};\nmodule.exports = Mexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/math-expression-evaluator/src/lexer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/math-expression-evaluator/src/math_function.js":
/*!*********************************************************************!*\
  !*** ./node_modules/math-expression-evaluator/src/math_function.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\nvar Mexp = function(parsed) {\n    this.value = parsed;\n};\nMexp.math = {\n    isDegree: true,\n    acos: function(x) {\n        return Mexp.math.isDegree ? 180 / Math.PI * Math.acos(x) : Math.acos(x);\n    },\n    add: function(a, b) {\n        return a + b;\n    },\n    asin: function(x) {\n        return Mexp.math.isDegree ? 180 / Math.PI * Math.asin(x) : Math.asin(x);\n    },\n    atan: function(x) {\n        return Mexp.math.isDegree ? 180 / Math.PI * Math.atan(x) : Math.atan(x);\n    },\n    acosh: function(x) {\n        return Math.log(x + Math.sqrt(x * x - 1));\n    },\n    asinh: function(x) {\n        return Math.log(x + Math.sqrt(x * x + 1));\n    },\n    atanh: function(x) {\n        return Math.log((1 + x) / (1 - x));\n    },\n    C: function(n, r) {\n        var pro = 1;\n        var other = n - r;\n        var choice = r;\n        if (choice < other) {\n            choice = other;\n            other = r;\n        }\n        for(var i = choice + 1; i <= n; i++){\n            pro *= i;\n        }\n        return pro / Mexp.math.fact(other);\n    },\n    changeSign: function(x) {\n        return -x;\n    },\n    cos: function(x) {\n        if (Mexp.math.isDegree) x = Mexp.math.toRadian(x);\n        return Math.cos(x);\n    },\n    cosh: function(x) {\n        return (Math.pow(Math.E, x) + Math.pow(Math.E, -1 * x)) / 2;\n    },\n    div: function(a, b) {\n        return a / b;\n    },\n    fact: function(n) {\n        if (n % 1 !== 0) return \"NaN\";\n        var pro = 1;\n        for(var i = 2; i <= n; i++){\n            pro *= i;\n        }\n        return pro;\n    },\n    inverse: function(x) {\n        return 1 / x;\n    },\n    log: function(i) {\n        return Math.log(i) / Math.log(10);\n    },\n    mod: function(a, b) {\n        return a % b;\n    },\n    mul: function(a, b) {\n        return a * b;\n    },\n    P: function(n, r) {\n        var pro = 1;\n        for(var i = Math.floor(n) - Math.floor(r) + 1; i <= Math.floor(n); i++){\n            pro *= i;\n        }\n        return pro;\n    },\n    Pi: function(low, high, ex) {\n        var pro = 1;\n        for(var i = low; i <= high; i++){\n            pro *= Number(ex.postfixEval({\n                n: i\n            }));\n        }\n        return pro;\n    },\n    pow10x: function(e) {\n        var x = 1;\n        while(e--){\n            x *= 10;\n        }\n        return x;\n    },\n    sigma: function(low, high, ex) {\n        var sum = 0;\n        for(var i = low; i <= high; i++){\n            sum += Number(ex.postfixEval({\n                n: i\n            }));\n        }\n        return sum;\n    },\n    sin: function(x) {\n        if (Mexp.math.isDegree) x = Mexp.math.toRadian(x);\n        return Math.sin(x);\n    },\n    sinh: function(x) {\n        return (Math.pow(Math.E, x) - Math.pow(Math.E, -1 * x)) / 2;\n    },\n    sub: function(a, b) {\n        return a - b;\n    },\n    tan: function(x) {\n        if (Mexp.math.isDegree) x = Mexp.math.toRadian(x);\n        return Math.tan(x);\n    },\n    tanh: function(x) {\n        return Mexp.sinha(x) / Mexp.cosha(x);\n    },\n    toRadian: function(x) {\n        return x * Math.PI / 180;\n    },\n    and: function(a, b) {\n        return a & b;\n    }\n};\nMexp.Exception = function(message) {\n    this.message = message;\n};\nmodule.exports = Mexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/math-expression-evaluator/src/math_function.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/math-expression-evaluator/src/postfix.js":
/*!***************************************************************!*\
  !*** ./node_modules/math-expression-evaluator/src/postfix.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Mexp = __webpack_require__(/*! ./lexer.js */ \"(ssr)/./node_modules/math-expression-evaluator/src/lexer.js\");\nMexp.prototype.toPostfix = function() {\n    \"use strict\";\n    var post = [], elem, popped, prep, pre, ele;\n    var stack = [\n        {\n            value: \"(\",\n            type: 4,\n            pre: 0\n        }\n    ];\n    var arr = this.value;\n    for(var i = 1; i < arr.length; i++){\n        if (arr[i].type === 1 || arr[i].type === 3 || arr[i].type === 13) {\n            if (arr[i].type === 1) arr[i].value = Number(arr[i].value);\n            post.push(arr[i]);\n        } else if (arr[i].type === 4) {\n            stack.push(arr[i]);\n        } else if (arr[i].type === 5) {\n            while((popped = stack.pop()).type !== 4){\n                post.push(popped);\n            }\n        } else if (arr[i].type === 11) {\n            while((popped = stack.pop()).type !== 4){\n                post.push(popped);\n            }\n            stack.push(popped);\n        } else {\n            elem = arr[i];\n            pre = elem.pre;\n            ele = stack[stack.length - 1];\n            prep = ele.pre;\n            var flag = ele.value == \"Math.pow\" && elem.value == \"Math.pow\";\n            if (pre > prep) stack.push(elem);\n            else {\n                while(prep >= pre && !flag || flag && pre < prep){\n                    popped = stack.pop();\n                    ele = stack[stack.length - 1];\n                    post.push(popped);\n                    prep = ele.pre;\n                    flag = elem.value == \"Math.pow\" && ele.value == \"Math.pow\";\n                }\n                stack.push(elem);\n            }\n        }\n    }\n    return new Mexp(post);\n};\nmodule.exports = Mexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWF0aC1leHByZXNzaW9uLWV2YWx1YXRvci9zcmMvcG9zdGZpeC5qcyIsIm1hcHBpbmdzIjoiO0FBQ0EsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkJELEtBQUtFLFNBQVMsQ0FBQ0MsU0FBUyxHQUFHO0lBQzFCO0lBQ0EsSUFBSUMsT0FBTyxFQUFFLEVBQUVDLE1BQU1DLFFBQVFDLE1BQU1DLEtBQUtDO0lBQ3hDLElBQUlDLFFBQVE7UUFBQztZQUFFQyxPQUFPO1lBQUtDLE1BQU07WUFBR0osS0FBSztRQUFFO0tBQUU7SUFDN0MsSUFBSUssTUFBTSxJQUFJLENBQUNGLEtBQUs7SUFDcEIsSUFBSyxJQUFJRyxJQUFJLEdBQUdBLElBQUlELElBQUlFLE1BQU0sRUFBRUQsSUFBSztRQUNwQyxJQUFJRCxHQUFHLENBQUNDLEVBQUUsQ0FBQ0YsSUFBSSxLQUFLLEtBQUtDLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDRixJQUFJLEtBQUssS0FBS0MsR0FBRyxDQUFDQyxFQUFFLENBQUNGLElBQUksS0FBSyxJQUFJO1lBQ2pFLElBQUlDLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDRixJQUFJLEtBQUssR0FDbkJDLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDSCxLQUFLLEdBQUdLLE9BQU9ILEdBQUcsQ0FBQ0MsRUFBRSxDQUFDSCxLQUFLO1lBQ25DUCxLQUFLYSxJQUFJLENBQUNKLEdBQUcsQ0FBQ0MsRUFBRTtRQUNqQixPQUNLLElBQUlELEdBQUcsQ0FBQ0MsRUFBRSxDQUFDRixJQUFJLEtBQUssR0FBRztZQUMzQkYsTUFBTU8sSUFBSSxDQUFDSixHQUFHLENBQUNDLEVBQUU7UUFDbEIsT0FDSyxJQUFJRCxHQUFHLENBQUNDLEVBQUUsQ0FBQ0YsSUFBSSxLQUFLLEdBQUc7WUFDM0IsTUFBTyxDQUFDTixTQUFTSSxNQUFNUSxHQUFHLEVBQUMsRUFBR04sSUFBSSxLQUFLLEVBQUc7Z0JBQ3pDUixLQUFLYSxJQUFJLENBQUNYO1lBQ1g7UUFDRCxPQUNLLElBQUlPLEdBQUcsQ0FBQ0MsRUFBRSxDQUFDRixJQUFJLEtBQUssSUFBSTtZQUM1QixNQUFPLENBQUNOLFNBQVNJLE1BQU1RLEdBQUcsRUFBQyxFQUFHTixJQUFJLEtBQUssRUFBRztnQkFDekNSLEtBQUthLElBQUksQ0FBQ1g7WUFDWDtZQUNBSSxNQUFNTyxJQUFJLENBQUNYO1FBQ1osT0FDSztZQUNKRCxPQUFPUSxHQUFHLENBQUNDLEVBQUU7WUFDYk4sTUFBTUgsS0FBS0csR0FBRztZQUNkQyxNQUFNQyxLQUFLLENBQUNBLE1BQU1LLE1BQU0sR0FBRyxFQUFFO1lBQzdCUixPQUFPRSxJQUFJRCxHQUFHO1lBQ2QsSUFBSVcsT0FBT1YsSUFBSUUsS0FBSyxJQUFJLGNBQWNOLEtBQUtNLEtBQUssSUFBSTtZQUNwRCxJQUFJSCxNQUFNRCxNQUFNRyxNQUFNTyxJQUFJLENBQUNaO2lCQUN0QjtnQkFDSixNQUFPRSxRQUFRQyxPQUFPLENBQUNXLFFBQVFBLFFBQVFYLE1BQU1ELEtBQU07b0JBQ2xERCxTQUFTSSxNQUFNUSxHQUFHO29CQUNsQlQsTUFBTUMsS0FBSyxDQUFDQSxNQUFNSyxNQUFNLEdBQUcsRUFBRTtvQkFDN0JYLEtBQUthLElBQUksQ0FBQ1g7b0JBQ1ZDLE9BQU9FLElBQUlELEdBQUc7b0JBQ2RXLE9BQU9kLEtBQUtNLEtBQUssSUFBSSxjQUFjRixJQUFJRSxLQUFLLElBQUk7Z0JBQ2pEO2dCQUNBRCxNQUFNTyxJQUFJLENBQUNaO1lBQ1o7UUFDRDtJQUNEO0lBQ0EsT0FBTyxJQUFJTCxLQUFLSTtBQUNqQjtBQUNBZ0IsT0FBT0MsT0FBTyxHQUFHckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wd3JwZXJrcy8uL25vZGVfbW9kdWxlcy9tYXRoLWV4cHJlc3Npb24tZXZhbHVhdG9yL3NyYy9wb3N0Zml4LmpzP2NlNmUiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbnZhciBNZXhwID0gcmVxdWlyZSgnLi9sZXhlci5qcycpO1xyXG5cclxuTWV4cC5wcm90b3R5cGUudG9Qb3N0Zml4ID0gZnVuY3Rpb24gKCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHR2YXIgcG9zdCA9IFtdLCBlbGVtLCBwb3BwZWQsIHByZXAsIHByZSwgZWxlO1xyXG5cdHZhciBzdGFjayA9IFt7IHZhbHVlOiBcIihcIiwgdHlwZTogNCwgcHJlOiAwIH1dO1xyXG5cdHZhciBhcnIgPSB0aGlzLnZhbHVlO1xyXG5cdGZvciAodmFyIGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRpZiAoYXJyW2ldLnR5cGUgPT09IDEgfHwgYXJyW2ldLnR5cGUgPT09IDMgfHwgYXJyW2ldLnR5cGUgPT09IDEzKSB7XHQvL2lmIHRva2VuIGlzIG51bWJlcixjb25zdGFudCxvciBuKHdoaWNoIGlzIGFsc28gYSBzcGVjaWFsIGNvbnN0YW50IGluIG91ciBjYXNlKVxyXG5cdFx0XHRpZiAoYXJyW2ldLnR5cGUgPT09IDEpXHJcblx0XHRcdFx0YXJyW2ldLnZhbHVlID0gTnVtYmVyKGFycltpXS52YWx1ZSk7XHJcblx0XHRcdHBvc3QucHVzaChhcnJbaV0pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoYXJyW2ldLnR5cGUgPT09IDQpIHtcclxuXHRcdFx0c3RhY2sucHVzaChhcnJbaV0pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoYXJyW2ldLnR5cGUgPT09IDUpIHtcclxuXHRcdFx0d2hpbGUgKChwb3BwZWQgPSBzdGFjay5wb3AoKSkudHlwZSAhPT0gNCkge1xyXG5cdFx0XHRcdHBvc3QucHVzaChwb3BwZWQpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChhcnJbaV0udHlwZSA9PT0gMTEpIHtcclxuXHRcdFx0d2hpbGUgKChwb3BwZWQgPSBzdGFjay5wb3AoKSkudHlwZSAhPT0gNCkge1xyXG5cdFx0XHRcdHBvc3QucHVzaChwb3BwZWQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHN0YWNrLnB1c2gocG9wcGVkKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRlbGVtID0gYXJyW2ldO1xyXG5cdFx0XHRwcmUgPSBlbGVtLnByZTtcclxuXHRcdFx0ZWxlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcblx0XHRcdHByZXAgPSBlbGUucHJlO1xyXG5cdFx0XHR2YXIgZmxhZyA9IGVsZS52YWx1ZSA9PSAnTWF0aC5wb3cnICYmIGVsZW0udmFsdWUgPT0gJ01hdGgucG93JztcclxuXHRcdFx0aWYgKHByZSA+IHByZXApIHN0YWNrLnB1c2goZWxlbSk7XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdHdoaWxlIChwcmVwID49IHByZSAmJiAhZmxhZyB8fCBmbGFnICYmIHByZSA8IHByZXApIHtcclxuXHRcdFx0XHRcdHBvcHBlZCA9IHN0YWNrLnBvcCgpO1xyXG5cdFx0XHRcdFx0ZWxlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcblx0XHRcdFx0XHRwb3N0LnB1c2gocG9wcGVkKTtcclxuXHRcdFx0XHRcdHByZXAgPSBlbGUucHJlO1xyXG5cdFx0XHRcdFx0ZmxhZyA9IGVsZW0udmFsdWUgPT0gJ01hdGgucG93JyAmJiBlbGUudmFsdWUgPT0gJ01hdGgucG93JztcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0c3RhY2sucHVzaChlbGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gbmV3IE1leHAocG9zdCk7XHJcbn07XHJcbm1vZHVsZS5leHBvcnRzID0gTWV4cDsiXSwibmFtZXMiOlsiTWV4cCIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJ0b1Bvc3RmaXgiLCJwb3N0IiwiZWxlbSIsInBvcHBlZCIsInByZXAiLCJwcmUiLCJlbGUiLCJzdGFjayIsInZhbHVlIiwidHlwZSIsImFyciIsImkiLCJsZW5ndGgiLCJOdW1iZXIiLCJwdXNoIiwicG9wIiwiZmxhZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/math-expression-evaluator/src/postfix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/math-expression-evaluator/src/postfix_evaluator.js":
/*!*************************************************************************!*\
  !*** ./node_modules/math-expression-evaluator/src/postfix_evaluator.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Mexp = __webpack_require__(/*! ./postfix.js */ \"(ssr)/./node_modules/math-expression-evaluator/src/postfix.js\");\nMexp.prototype.postfixEval = function(UserDefined) {\n    \"use strict\";\n    UserDefined = UserDefined || {};\n    UserDefined.PI = Math.PI;\n    UserDefined.E = Math.E;\n    var stack = [], pop1, pop2, pop3;\n    var disp = [];\n    var temp = \"\";\n    var arr = this.value;\n    var bool = typeof UserDefined.n !== \"undefined\";\n    for(var i = 0; i < arr.length; i++){\n        if (arr[i].type === 1) {\n            stack.push({\n                value: arr[i].value,\n                type: 1\n            });\n        } else if (arr[i].type === 3) {\n            stack.push({\n                value: UserDefined[arr[i].value],\n                type: 1\n            });\n        } else if (arr[i].type === 0) {\n            if (typeof stack[stack.length - 1].type === \"undefined\") {\n                stack[stack.length - 1].value.push(arr[i]);\n            } else stack[stack.length - 1].value = arr[i].value(stack[stack.length - 1].value);\n        } else if (arr[i].type === 7) {\n            if (typeof stack[stack.length - 1].type === \"undefined\") {\n                stack[stack.length - 1].value.push(arr[i]);\n            } else stack[stack.length - 1].value = arr[i].value(stack[stack.length - 1].value);\n        } else if (arr[i].type === 8) {\n            var popped = [];\n            for(var x = 0; x < arr[i].numberOfArguments; x++){\n                popped.push(stack.pop().value);\n            }\n            stack.push({\n                type: 1,\n                value: arr[i].value.apply(arr[i], popped.reverse())\n            });\n        } else if (arr[i].type === 10) {\n            pop1 = stack.pop();\n            pop2 = stack.pop();\n            if (typeof pop2.type === \"undefined\") {\n                pop2.value = pop2.concat(pop1);\n                pop2.value.push(arr[i]);\n                stack.push(pop2);\n            } else if (typeof pop1.type === \"undefined\") {\n                pop1.unshift(pop2);\n                pop1.push(arr[i]);\n                stack.push(pop1);\n            } else {\n                stack.push({\n                    type: 1,\n                    value: arr[i].value(pop2.value, pop1.value)\n                });\n            }\n        } else if (arr[i].type === 2 || arr[i].type === 9) {\n            pop1 = stack.pop();\n            pop2 = stack.pop();\n            if (typeof pop2.type === \"undefined\") {\n                pop2 = pop2.concat(pop1);\n                pop2.push(arr[i]);\n                stack.push(pop2);\n            } else if (typeof pop1.type === \"undefined\") {\n                pop1.unshift(pop2);\n                pop1.push(arr[i]);\n                stack.push(pop1);\n            } else {\n                stack.push({\n                    type: 1,\n                    value: arr[i].value(pop2.value, pop1.value)\n                });\n            }\n        } else if (arr[i].type === 12) {\n            pop1 = stack.pop();\n            if (typeof pop1.type !== \"undefined\") {\n                pop1 = [\n                    pop1\n                ];\n            }\n            pop2 = stack.pop();\n            pop3 = stack.pop();\n            stack.push({\n                type: 1,\n                value: arr[i].value(pop3.value, pop2.value, new Mexp(pop1))\n            });\n        } else if (arr[i].type === 13) {\n            if (bool) {\n                stack.push({\n                    value: UserDefined[arr[i].value],\n                    type: 3\n                });\n            } else stack.push([\n                arr[i]\n            ]);\n        }\n    }\n    if (stack.length > 1) {\n        throw new Mexp.Exception(\"Uncaught Syntax error\");\n    }\n    return stack[0].value > 1000000000000000 ? \"Infinity\" : parseFloat(stack[0].value.toFixed(15));\n};\nMexp.eval = function(str, tokens, obj) {\n    if (typeof tokens === \"undefined\") {\n        return this.lex(str).toPostfix().postfixEval();\n    } else if (typeof obj === \"undefined\") {\n        if (typeof tokens.length !== \"undefined\") return this.lex(str, tokens).toPostfix().postfixEval();\n        else return this.lex(str).toPostfix().postfixEval(tokens);\n    } else return this.lex(str, tokens).toPostfix().postfixEval(obj);\n};\nmodule.exports = Mexp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/math-expression-evaluator/src/postfix_evaluator.js\n");

/***/ })

};
;