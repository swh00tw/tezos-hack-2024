"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/seroval-plugins";
exports.ids = ["vendor-chunks/seroval-plugins"];
exports.modules = {

/***/ "(ssr)/./node_modules/seroval-plugins/dist/esm/development/web.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/seroval-plugins/dist/esm/development/web.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobPlugin: () => (/* binding */ blob_default),\n/* harmony export */   CustomEventPlugin: () => (/* binding */ custom_event_default),\n/* harmony export */   DOMExceptionPlugin: () => (/* binding */ dom_exception_default),\n/* harmony export */   EventPlugin: () => (/* binding */ event_default),\n/* harmony export */   FilePlugin: () => (/* binding */ file_default),\n/* harmony export */   FormDataPlugin: () => (/* binding */ form_data_default),\n/* harmony export */   HeadersPlugin: () => (/* binding */ headers_default),\n/* harmony export */   ImageDataPlugin: () => (/* binding */ image_data_default),\n/* harmony export */   ReadableStreamPlugin: () => (/* binding */ readable_stream_default),\n/* harmony export */   RequestPlugin: () => (/* binding */ request_default),\n/* harmony export */   ResponsePlugin: () => (/* binding */ response_default),\n/* harmony export */   URLPlugin: () => (/* binding */ url_default),\n/* harmony export */   URLSearchParamsPlugin: () => (/* binding */ url_search_params_default)\n/* harmony export */ });\n/* harmony import */ var seroval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! seroval */ \"(ssr)/./node_modules/seroval/dist/esm/development/index.mjs\");\n// web/blob.ts\n\nvar BlobPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/Blob\",\n    test (value) {\n        if (typeof Blob === \"undefined\") {\n            return false;\n        }\n        return value instanceof Blob;\n    },\n    parse: {\n        async async (value, ctx) {\n            return {\n                type: await ctx.parse(value.type),\n                buffer: await ctx.parse(await value.arrayBuffer())\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new Blob([\" + ctx.serialize(node.buffer) + \"],{type:\" + ctx.serialize(node.type) + \"})\";\n    },\n    deserialize (node, ctx) {\n        return new Blob([\n            ctx.deserialize(node.buffer)\n        ], {\n            type: ctx.deserialize(node.type)\n        });\n    }\n});\nvar blob_default = BlobPlugin;\n// web/custom-event.ts\n\nfunction createCustomEventOptions(current) {\n    return {\n        detail: current.detail,\n        bubbles: current.bubbles,\n        cancelable: current.cancelable,\n        composed: current.composed\n    };\n}\nvar CustomEventPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/CustomEvent\",\n    test (value) {\n        if (typeof CustomEvent === \"undefined\") {\n            return false;\n        }\n        return value instanceof CustomEvent;\n    },\n    parse: {\n        sync (value, ctx) {\n            return {\n                type: ctx.parse(value.type),\n                options: ctx.parse(createCustomEventOptions(value))\n            };\n        },\n        async async (value, ctx) {\n            return {\n                type: await ctx.parse(value.type),\n                options: await ctx.parse(createCustomEventOptions(value))\n            };\n        },\n        stream (value, ctx) {\n            return {\n                type: ctx.parse(value.type),\n                options: ctx.parse(createCustomEventOptions(value))\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new CustomEvent(\" + ctx.serialize(node.type) + \",\" + ctx.serialize(node.options) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new CustomEvent(ctx.deserialize(node.type), ctx.deserialize(node.options));\n    }\n});\nvar custom_event_default = CustomEventPlugin;\n// web/dom-exception.ts\n\nvar DOMExceptionPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/DOMException\",\n    test (value) {\n        if (typeof DOMException === \"undefined\") {\n            return false;\n        }\n        return value instanceof DOMException;\n    },\n    parse: {\n        sync (value, ctx) {\n            return {\n                name: ctx.parse(value.name),\n                message: ctx.parse(value.message)\n            };\n        },\n        async async (value, ctx) {\n            return {\n                name: await ctx.parse(value.name),\n                message: await ctx.parse(value.message)\n            };\n        },\n        stream (value, ctx) {\n            return {\n                name: ctx.parse(value.name),\n                message: ctx.parse(value.message)\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new DOMException(\" + ctx.serialize(node.message) + \",\" + ctx.serialize(node.name) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new DOMException(ctx.deserialize(node.message), ctx.deserialize(node.name));\n    }\n});\nvar dom_exception_default = DOMExceptionPlugin;\n// web/event.ts\n\nfunction createEventOptions(current) {\n    return {\n        bubbles: current.bubbles,\n        cancelable: current.cancelable,\n        composed: current.composed\n    };\n}\nvar EventPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/Event\",\n    test (value) {\n        if (typeof Event === \"undefined\") {\n            return false;\n        }\n        return value instanceof Event;\n    },\n    parse: {\n        sync (value, ctx) {\n            return {\n                type: ctx.parse(value.type),\n                options: ctx.parse(createEventOptions(value))\n            };\n        },\n        async async (value, ctx) {\n            return {\n                type: await ctx.parse(value.type),\n                options: await ctx.parse(createEventOptions(value))\n            };\n        },\n        stream (value, ctx) {\n            return {\n                type: ctx.parse(value.type),\n                options: ctx.parse(createEventOptions(value))\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new Event(\" + ctx.serialize(node.type) + \",\" + ctx.serialize(node.options) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new Event(ctx.deserialize(node.type), ctx.deserialize(node.options));\n    }\n});\nvar event_default = EventPlugin;\n// web/file.ts\n\nvar FilePlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/File\",\n    test (value) {\n        if (typeof File === \"undefined\") {\n            return false;\n        }\n        return value instanceof File;\n    },\n    parse: {\n        async async (value, ctx) {\n            return {\n                name: await ctx.parse(value.name),\n                options: await ctx.parse({\n                    type: value.type,\n                    lastModified: value.lastModified\n                }),\n                buffer: await ctx.parse(await value.arrayBuffer())\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new File([\" + ctx.serialize(node.buffer) + \"],\" + ctx.serialize(node.name) + \",\" + ctx.serialize(node.options) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new File([\n            ctx.deserialize(node.buffer)\n        ], ctx.deserialize(node.name), ctx.deserialize(node.options));\n    }\n});\nvar file_default = FilePlugin;\n// web/form-data.ts\n\nfunction convertFormData(instance) {\n    const items = [];\n    instance.forEach((value, key)=>{\n        items.push([\n            key,\n            value\n        ]);\n    });\n    return items;\n}\nvar FORM_DATA_FACTORY = {};\nvar FormDataFactoryPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/FormDataFactory\",\n    test (value) {\n        return value === FORM_DATA_FACTORY;\n    },\n    parse: {\n        sync () {\n            return void 0;\n        },\n        async async () {\n            return await Promise.resolve(void 0);\n        },\n        stream () {\n            return void 0;\n        }\n    },\n    serialize (_node, ctx) {\n        return ctx.createEffectfulFunction([\n            \"e\",\n            \"f\",\n            \"i\",\n            \"s\",\n            \"t\"\n        ], \"f=new FormData;for(i=0,s=e.length;i<s;i++)f.append((t=e[i])[0],t[1]);return f\");\n    },\n    deserialize () {\n        return FORM_DATA_FACTORY;\n    }\n});\nvar FormDataPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/FormData\",\n    extends: [\n        file_default,\n        FormDataFactoryPlugin\n    ],\n    test (value) {\n        if (typeof FormData === \"undefined\") {\n            return false;\n        }\n        return value instanceof FormData;\n    },\n    parse: {\n        sync (value, ctx) {\n            return {\n                factory: ctx.parse(FORM_DATA_FACTORY),\n                entries: ctx.parse(convertFormData(value))\n            };\n        },\n        async async (value, ctx) {\n            return {\n                factory: await ctx.parse(FORM_DATA_FACTORY),\n                entries: await ctx.parse(convertFormData(value))\n            };\n        },\n        stream (value, ctx) {\n            return {\n                factory: ctx.parse(FORM_DATA_FACTORY),\n                entries: ctx.parse(convertFormData(value))\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"(\" + ctx.serialize(node.factory) + \")(\" + ctx.serialize(node.entries) + \")\";\n    },\n    deserialize (node, ctx) {\n        const instance = new FormData();\n        const entries = ctx.deserialize(node.entries);\n        for(let i = 0, len = entries.length; i < len; i++){\n            const entry = entries[i];\n            instance.append(entry[0], entry[1]);\n        }\n        return instance;\n    }\n});\nvar form_data_default = FormDataPlugin;\n// web/headers.ts\n\nfunction convertHeaders(instance) {\n    const items = [];\n    instance.forEach((value, key)=>{\n        items.push([\n            key,\n            value\n        ]);\n    });\n    return items;\n}\nvar HeadersPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/Headers\",\n    test (value) {\n        if (typeof Headers === \"undefined\") {\n            return false;\n        }\n        return value instanceof Headers;\n    },\n    parse: {\n        sync (value, ctx) {\n            return ctx.parse(convertHeaders(value));\n        },\n        async async (value, ctx) {\n            return await ctx.parse(convertHeaders(value));\n        },\n        stream (value, ctx) {\n            return ctx.parse(convertHeaders(value));\n        }\n    },\n    serialize (node, ctx) {\n        return \"new Headers(\" + ctx.serialize(node) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new Headers(ctx.deserialize(node));\n    }\n});\nvar headers_default = HeadersPlugin;\n// web/image-data.ts\n\nvar ImageDataPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/ImageData\",\n    test (value) {\n        if (typeof ImageData === \"undefined\") {\n            return false;\n        }\n        return value instanceof ImageData;\n    },\n    parse: {\n        sync (value, ctx) {\n            return {\n                data: ctx.parse(value.data),\n                width: ctx.parse(value.width),\n                height: ctx.parse(value.height),\n                options: ctx.parse({\n                    colorSpace: value.colorSpace\n                })\n            };\n        },\n        async async (value, ctx) {\n            return {\n                data: await ctx.parse(value.data),\n                width: await ctx.parse(value.width),\n                height: await ctx.parse(value.height),\n                options: await ctx.parse({\n                    colorSpace: value.colorSpace\n                })\n            };\n        },\n        stream (value, ctx) {\n            return {\n                data: ctx.parse(value.data),\n                width: ctx.parse(value.width),\n                height: ctx.parse(value.height),\n                options: ctx.parse({\n                    colorSpace: value.colorSpace\n                })\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new ImageData(\" + ctx.serialize(node.data) + \",\" + ctx.serialize(node.width) + \",\" + ctx.serialize(node.height) + \",\" + ctx.serialize(node.options) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new ImageData(ctx.deserialize(node.data), ctx.deserialize(node.width), ctx.deserialize(node.height), ctx.deserialize(node.options));\n    }\n});\nvar image_data_default = ImageDataPlugin;\n// web/readable-stream.ts\n\nvar READABLE_STREAM_FACTORY = {};\nvar ReadableStreamFactoryPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/ReadableStreamFactory\",\n    test (value) {\n        return value === READABLE_STREAM_FACTORY;\n    },\n    parse: {\n        sync () {\n            return void 0;\n        },\n        async async () {\n            return await Promise.resolve(void 0);\n        },\n        stream () {\n            return void 0;\n        }\n    },\n    serialize (_node, ctx) {\n        return ctx.createFunction([\n            \"d\"\n        ], \"new ReadableStream({start:\" + ctx.createEffectfulFunction([\n            \"c\"\n        ], \"d.on({next:\" + ctx.createEffectfulFunction([\n            \"v\"\n        ], \"c.enqueue(v)\") + \",throw:\" + ctx.createEffectfulFunction([\n            \"v\"\n        ], \"c.error(v)\") + \",return:\" + ctx.createEffectfulFunction([], \"c.close()\") + \"})\") + \"})\");\n    },\n    deserialize () {\n        return READABLE_STREAM_FACTORY;\n    }\n});\nfunction toStream(value) {\n    const stream = (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createStream)();\n    const reader = value.getReader();\n    async function push() {\n        try {\n            const result = await reader.read();\n            if (result.done) {\n                stream.return(result.value);\n            } else {\n                stream.next(result.value);\n                await push();\n            }\n        } catch (error) {\n            stream.throw(error);\n        }\n    }\n    push().catch(()=>{});\n    return stream;\n}\nvar ReadableStreamPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval/plugins/web/ReadableStream\",\n    extends: [\n        ReadableStreamFactoryPlugin\n    ],\n    test (value) {\n        if (typeof ReadableStream === \"undefined\") {\n            return false;\n        }\n        return value instanceof ReadableStream;\n    },\n    parse: {\n        sync (_value, ctx) {\n            return {\n                factory: ctx.parse(READABLE_STREAM_FACTORY),\n                stream: ctx.parse((0,seroval__WEBPACK_IMPORTED_MODULE_0__.createStream)())\n            };\n        },\n        async async (value, ctx) {\n            return {\n                factory: await ctx.parse(READABLE_STREAM_FACTORY),\n                stream: await ctx.parse(toStream(value))\n            };\n        },\n        stream (value, ctx) {\n            return {\n                factory: ctx.parse(READABLE_STREAM_FACTORY),\n                stream: ctx.parse(toStream(value))\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"(\" + ctx.serialize(node.factory) + \")(\" + ctx.serialize(node.stream) + \")\";\n    },\n    deserialize (node, ctx) {\n        const stream = ctx.deserialize(node.stream);\n        return new ReadableStream({\n            start (controller) {\n                stream.on({\n                    next (value) {\n                        controller.enqueue(value);\n                    },\n                    throw (value) {\n                        controller.error(value);\n                    },\n                    return () {\n                        controller.close();\n                    }\n                });\n            }\n        });\n    }\n});\nvar readable_stream_default = ReadableStreamPlugin;\n// web/request.ts\n\nfunction createRequestOptions(current, body) {\n    return {\n        body,\n        cache: current.cache,\n        credentials: current.credentials,\n        headers: current.headers,\n        integrity: current.integrity,\n        keepalive: current.keepalive,\n        method: current.method,\n        mode: current.mode,\n        redirect: current.redirect,\n        referrer: current.referrer,\n        referrerPolicy: current.referrerPolicy\n    };\n}\nvar RequestPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/Request\",\n    extends: [\n        readable_stream_default,\n        headers_default\n    ],\n    test (value) {\n        if (typeof Request === \"undefined\") {\n            return false;\n        }\n        return value instanceof Request;\n    },\n    parse: {\n        async async (value, ctx) {\n            return {\n                url: await ctx.parse(value.url),\n                options: await ctx.parse(createRequestOptions(value, value.body ? await value.clone().arrayBuffer() : null))\n            };\n        },\n        stream (value, ctx) {\n            return {\n                url: ctx.parse(value.url),\n                options: ctx.parse(createRequestOptions(value, value.clone().body))\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new Request(\" + ctx.serialize(node.url) + \",\" + ctx.serialize(node.options) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new Request(ctx.deserialize(node.url), ctx.deserialize(node.options));\n    }\n});\nvar request_default = RequestPlugin;\n// web/response.ts\n\nfunction createResponseOptions(current) {\n    return {\n        headers: current.headers,\n        status: current.status,\n        statusText: current.statusText\n    };\n}\nvar ResponsePlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/Response\",\n    extends: [\n        readable_stream_default,\n        headers_default\n    ],\n    test (value) {\n        if (typeof Response === \"undefined\") {\n            return false;\n        }\n        return value instanceof Response;\n    },\n    parse: {\n        async async (value, ctx) {\n            return {\n                body: await ctx.parse(value.body ? await value.clone().arrayBuffer() : null),\n                options: await ctx.parse(createResponseOptions(value))\n            };\n        },\n        stream (value, ctx) {\n            return {\n                body: ctx.parse(value.clone().body),\n                options: ctx.parse(createResponseOptions(value))\n            };\n        }\n    },\n    serialize (node, ctx) {\n        return \"new Response(\" + ctx.serialize(node.body) + \",\" + ctx.serialize(node.options) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new Response(ctx.deserialize(node.body), ctx.deserialize(node.options));\n    }\n});\nvar response_default = ResponsePlugin;\n// web/url-search-params.ts\n\nvar URLSearchParamsPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/URLSearchParams\",\n    test (value) {\n        if (typeof URLSearchParams === \"undefined\") {\n            return false;\n        }\n        return value instanceof URLSearchParams;\n    },\n    parse: {\n        sync (value, ctx) {\n            return ctx.parse(value.toString());\n        },\n        async async (value, ctx) {\n            return await ctx.parse(value.toString());\n        },\n        stream (value, ctx) {\n            return ctx.parse(value.toString());\n        }\n    },\n    serialize (node, ctx) {\n        return \"new URLSearchParams(\" + ctx.serialize(node) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new URLSearchParams(ctx.deserialize(node));\n    }\n});\nvar url_search_params_default = URLSearchParamsPlugin;\n// web/url.ts\n\nvar URLPlugin = /* @__PURE__ */ (0,seroval__WEBPACK_IMPORTED_MODULE_0__.createPlugin)({\n    tag: \"seroval-plugins/web/URL\",\n    test (value) {\n        if (typeof URL === \"undefined\") {\n            return false;\n        }\n        return value instanceof URL;\n    },\n    parse: {\n        sync (value, ctx) {\n            return ctx.parse(value.href);\n        },\n        async async (value, ctx) {\n            return await ctx.parse(value.href);\n        },\n        stream (value, ctx) {\n            return ctx.parse(value.href);\n        }\n    },\n    serialize (node, ctx) {\n        return \"new URL(\" + ctx.serialize(node) + \")\";\n    },\n    deserialize (node, ctx) {\n        return new URL(ctx.deserialize(node));\n    }\n});\nvar url_default = URLPlugin;\n //# sourceMappingURL=web.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/seroval-plugins/dist/esm/development/web.mjs\n");

/***/ })

};
;