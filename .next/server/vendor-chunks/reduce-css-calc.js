"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reduce-css-calc";
exports.ids = ["vendor-chunks/reduce-css-calc"];
exports.modules = {

/***/ "(ssr)/./node_modules/reduce-css-calc/index.js":
/*!***********************************************!*\
  !*** ./node_modules/reduce-css-calc/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Module dependencies\n */ \nvar balanced = __webpack_require__(/*! balanced-match */ \"(ssr)/./node_modules/reduce-css-calc/node_modules/balanced-match/index.js\");\nvar reduceFunctionCall = __webpack_require__(/*! reduce-function-call */ \"(ssr)/./node_modules/reduce-function-call/index.js\");\nvar mexp = __webpack_require__(/*! math-expression-evaluator */ \"(ssr)/./node_modules/math-expression-evaluator/src/formula_evaluator.js\");\n/**\n * Constantes\n */ var MAX_STACK = 100 // should be enough for a single calc()...\n;\nvar NESTED_CALC_RE = /(\\+|\\-|\\*|\\\\|[^a-z]|)(\\s*)(\\()/g;\n/**\n * Global variables\n */ var stack;\n/**\n * Expose reduceCSSCalc plugin\n *\n * @type {Function}\n */ module.exports = reduceCSSCalc;\n/**\n * Reduce CSS calc() in a string, whenever it's possible\n *\n * @param {String} value css input\n */ function reduceCSSCalc(value, decimalPrecision) {\n    stack = 0;\n    decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision);\n    // Allow calc() on multiple lines\n    value = value.replace(/\\n+/g, \" \");\n    /**\n   * Evaluates an expression\n   *\n   * @param {String} expression\n   * @returns {String}\n   */ function evaluateExpression(expression, functionIdentifier, call) {\n        if (stack++ > MAX_STACK) {\n            stack = 0;\n            throw new Error(\"Call stack overflow for \" + call);\n        }\n        if (expression === \"\") {\n            throw new Error(functionIdentifier + \"(): '\" + call + \"' must contain a non-whitespace string\");\n        }\n        expression = evaluateNestedExpression(expression, call);\n        var units = getUnitsInExpression(expression);\n        // If the expression contains multiple units or CSS variables,\n        // then let the expression be (i.e. browser calc())\n        if (units.length > 1 || expression.indexOf(\"var(\") > -1) {\n            return functionIdentifier + \"(\" + expression + \")\";\n        }\n        var unit = units[0] || \"\";\n        if (unit === \"%\") {\n            // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):\n            // console.log(expression)\n            expression = expression.replace(/\\b[0-9\\.]+%/g, function(percent) {\n                return parseFloat(percent.slice(0, -1)) * 0.01;\n            });\n        }\n        // Remove units in expression:\n        var toEvaluate = expression.replace(new RegExp(unit, \"gi\"), \"\");\n        var result;\n        try {\n            result = mexp.eval(toEvaluate);\n        } catch (e) {\n            return functionIdentifier + \"(\" + expression + \")\";\n        }\n        // Transform back to a percentage result:\n        if (unit === \"%\") {\n            result *= 100;\n        }\n        // adjust rounding shit\n        // (0.1 * 0.2 === 0.020000000000000004)\n        if (functionIdentifier.length || unit === \"%\") {\n            result = Math.round(result * decimalPrecision) / decimalPrecision;\n        }\n        // Add unit\n        result += unit;\n        return result;\n    }\n    /**\n   * Evaluates nested expressions\n   *\n   * @param {String} expression\n   * @returns {String}\n   */ function evaluateNestedExpression(expression, call) {\n        // Remove the calc part from nested expressions to ensure\n        // better browser compatibility\n        expression = expression.replace(/((?:\\-[a-z]+\\-)?calc)/g, \"\");\n        var evaluatedPart = \"\";\n        var nonEvaluatedPart = expression;\n        var matches;\n        while(matches = NESTED_CALC_RE.exec(nonEvaluatedPart)){\n            if (matches[0].index > 0) {\n                evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index);\n            }\n            var balancedExpr = balanced(\"(\", \")\", nonEvaluatedPart.substring([\n                0\n            ].index));\n            if (balancedExpr.body === \"\") {\n                throw new Error(\"'\" + expression + \"' must contain a non-whitespace string\");\n            }\n            var evaluated = evaluateExpression(balancedExpr.body, \"\", call);\n            evaluatedPart += balancedExpr.pre + evaluated;\n            nonEvaluatedPart = balancedExpr.post;\n        }\n        return evaluatedPart + nonEvaluatedPart;\n    }\n    return reduceFunctionCall(value, /((?:\\-[a-z]+\\-)?calc)\\(/, evaluateExpression);\n}\n/**\n * Checks what units are used in an expression\n *\n * @param {String} expression\n * @returns {Array}\n */ function getUnitsInExpression(expression) {\n    var uniqueUnits = [];\n    var uniqueLowerCaseUnits = [];\n    var unitRegEx = /[\\.0-9]([%a-z]+)/gi;\n    var matches = unitRegEx.exec(expression);\n    while(matches){\n        if (!matches || !matches[1]) {\n            continue;\n        }\n        if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {\n            uniqueUnits.push(matches[1]);\n            uniqueLowerCaseUnits.push(matches[1].toLowerCase());\n        }\n        matches = unitRegEx.exec(expression);\n    }\n    return uniqueUnits;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reduce-css-calc/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/reduce-css-calc/node_modules/balanced-match/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/reduce-css-calc/node_modules/balanced-match/index.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n    if (a instanceof RegExp) a = maybeMatch(a, str);\n    if (b instanceof RegExp) b = maybeMatch(b, str);\n    var r = range(a, b, str);\n    return r && {\n        start: r[0],\n        end: r[1],\n        pre: str.slice(0, r[0]),\n        body: str.slice(r[0] + a.length, r[1]),\n        post: str.slice(r[1] + b.length)\n    };\n}\nfunction maybeMatch(reg, str) {\n    var m = str.match(reg);\n    return m ? m[0] : null;\n}\nbalanced.range = range;\nfunction range(a, b, str) {\n    var begs, beg, left, right, result;\n    var ai = str.indexOf(a);\n    var bi = str.indexOf(b, ai + 1);\n    var i = ai;\n    if (ai >= 0 && bi > 0) {\n        begs = [];\n        left = str.length;\n        while(i >= 0 && !result){\n            if (i == ai) {\n                begs.push(i);\n                ai = str.indexOf(a, i + 1);\n            } else if (begs.length == 1) {\n                result = [\n                    begs.pop(),\n                    bi\n                ];\n            } else {\n                beg = begs.pop();\n                if (beg < left) {\n                    left = beg;\n                    right = bi;\n                }\n                bi = str.indexOf(b, i + 1);\n            }\n            i = ai < bi && ai >= 0 ? ai : bi;\n        }\n        if (begs.length) {\n            result = [\n                left,\n                right\n            ];\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVkdWNlLWNzcy1jYWxjL25vZGVfbW9kdWxlcy9iYWxhbmNlZC1tYXRjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFDakIsU0FBU0EsU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEdBQUc7SUFDekIsSUFBSUYsYUFBYUcsUUFBUUgsSUFBSUksV0FBV0osR0FBR0U7SUFDM0MsSUFBSUQsYUFBYUUsUUFBUUYsSUFBSUcsV0FBV0gsR0FBR0M7SUFFM0MsSUFBSUcsSUFBSUMsTUFBTU4sR0FBR0MsR0FBR0M7SUFFcEIsT0FBT0csS0FBSztRQUNWRSxPQUFPRixDQUFDLENBQUMsRUFBRTtRQUNYRyxLQUFLSCxDQUFDLENBQUMsRUFBRTtRQUNUSSxLQUFLUCxJQUFJUSxLQUFLLENBQUMsR0FBR0wsQ0FBQyxDQUFDLEVBQUU7UUFDdEJNLE1BQU1ULElBQUlRLEtBQUssQ0FBQ0wsQ0FBQyxDQUFDLEVBQUUsR0FBR0wsRUFBRVksTUFBTSxFQUFFUCxDQUFDLENBQUMsRUFBRTtRQUNyQ1EsTUFBTVgsSUFBSVEsS0FBSyxDQUFDTCxDQUFDLENBQUMsRUFBRSxHQUFHSixFQUFFVyxNQUFNO0lBQ2pDO0FBQ0Y7QUFFQSxTQUFTUixXQUFXVSxHQUFHLEVBQUVaLEdBQUc7SUFDMUIsSUFBSWEsSUFBSWIsSUFBSWMsS0FBSyxDQUFDRjtJQUNsQixPQUFPQyxJQUFJQSxDQUFDLENBQUMsRUFBRSxHQUFHO0FBQ3BCO0FBRUFoQixTQUFTTyxLQUFLLEdBQUdBO0FBQ2pCLFNBQVNBLE1BQU1OLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxHQUFHO0lBQ3RCLElBQUllLE1BQU1DLEtBQUtDLE1BQU1DLE9BQU9DO0lBQzVCLElBQUlDLEtBQUtwQixJQUFJcUIsT0FBTyxDQUFDdkI7SUFDckIsSUFBSXdCLEtBQUt0QixJQUFJcUIsT0FBTyxDQUFDdEIsR0FBR3FCLEtBQUs7SUFDN0IsSUFBSUcsSUFBSUg7SUFFUixJQUFJQSxNQUFNLEtBQUtFLEtBQUssR0FBRztRQUNyQlAsT0FBTyxFQUFFO1FBQ1RFLE9BQU9qQixJQUFJVSxNQUFNO1FBRWpCLE1BQU9hLEtBQUssS0FBSyxDQUFDSixPQUFRO1lBQ3hCLElBQUlJLEtBQUtILElBQUk7Z0JBQ1hMLEtBQUtTLElBQUksQ0FBQ0Q7Z0JBQ1ZILEtBQUtwQixJQUFJcUIsT0FBTyxDQUFDdkIsR0FBR3lCLElBQUk7WUFDMUIsT0FBTyxJQUFJUixLQUFLTCxNQUFNLElBQUksR0FBRztnQkFDM0JTLFNBQVM7b0JBQUVKLEtBQUtVLEdBQUc7b0JBQUlIO2lCQUFJO1lBQzdCLE9BQU87Z0JBQ0xOLE1BQU1ELEtBQUtVLEdBQUc7Z0JBQ2QsSUFBSVQsTUFBTUMsTUFBTTtvQkFDZEEsT0FBT0Q7b0JBQ1BFLFFBQVFJO2dCQUNWO2dCQUVBQSxLQUFLdEIsSUFBSXFCLE9BQU8sQ0FBQ3RCLEdBQUd3QixJQUFJO1lBQzFCO1lBRUFBLElBQUlILEtBQUtFLE1BQU1GLE1BQU0sSUFBSUEsS0FBS0U7UUFDaEM7UUFFQSxJQUFJUCxLQUFLTCxNQUFNLEVBQUU7WUFDZlMsU0FBUztnQkFBRUY7Z0JBQU1DO2FBQU87UUFDMUI7SUFDRjtJQUVBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wd3JwZXJrcy8uL25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvbm9kZV9tb2R1bGVzL2JhbGFuY2VkLW1hdGNoL2luZGV4LmpzPzg3YmQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBiYWxhbmNlZDtcbmZ1bmN0aW9uIGJhbGFuY2VkKGEsIGIsIHN0cikge1xuICBpZiAoYSBpbnN0YW5jZW9mIFJlZ0V4cCkgYSA9IG1heWJlTWF0Y2goYSwgc3RyKTtcbiAgaWYgKGIgaW5zdGFuY2VvZiBSZWdFeHApIGIgPSBtYXliZU1hdGNoKGIsIHN0cik7XG5cbiAgdmFyIHIgPSByYW5nZShhLCBiLCBzdHIpO1xuXG4gIHJldHVybiByICYmIHtcbiAgICBzdGFydDogclswXSxcbiAgICBlbmQ6IHJbMV0sXG4gICAgcHJlOiBzdHIuc2xpY2UoMCwgclswXSksXG4gICAgYm9keTogc3RyLnNsaWNlKHJbMF0gKyBhLmxlbmd0aCwgclsxXSksXG4gICAgcG9zdDogc3RyLnNsaWNlKHJbMV0gKyBiLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWF5YmVNYXRjaChyZWcsIHN0cikge1xuICB2YXIgbSA9IHN0ci5tYXRjaChyZWcpO1xuICByZXR1cm4gbSA/IG1bMF0gOiBudWxsO1xufVxuXG5iYWxhbmNlZC5yYW5nZSA9IHJhbmdlO1xuZnVuY3Rpb24gcmFuZ2UoYSwgYiwgc3RyKSB7XG4gIHZhciBiZWdzLCBiZWcsIGxlZnQsIHJpZ2h0LCByZXN1bHQ7XG4gIHZhciBhaSA9IHN0ci5pbmRleE9mKGEpO1xuICB2YXIgYmkgPSBzdHIuaW5kZXhPZihiLCBhaSArIDEpO1xuICB2YXIgaSA9IGFpO1xuXG4gIGlmIChhaSA+PSAwICYmIGJpID4gMCkge1xuICAgIGJlZ3MgPSBbXTtcbiAgICBsZWZ0ID0gc3RyLmxlbmd0aDtcblxuICAgIHdoaWxlIChpID49IDAgJiYgIXJlc3VsdCkge1xuICAgICAgaWYgKGkgPT0gYWkpIHtcbiAgICAgICAgYmVncy5wdXNoKGkpO1xuICAgICAgICBhaSA9IHN0ci5pbmRleE9mKGEsIGkgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAoYmVncy5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXN1bHQgPSBbIGJlZ3MucG9wKCksIGJpIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWcgPSBiZWdzLnBvcCgpO1xuICAgICAgICBpZiAoYmVnIDwgbGVmdCkge1xuICAgICAgICAgIGxlZnQgPSBiZWc7XG4gICAgICAgICAgcmlnaHQgPSBiaTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpID0gc3RyLmluZGV4T2YoYiwgaSArIDEpO1xuICAgICAgfVxuXG4gICAgICBpID0gYWkgPCBiaSAmJiBhaSA+PSAwID8gYWkgOiBiaTtcbiAgICB9XG5cbiAgICBpZiAoYmVncy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IFsgbGVmdCwgcmlnaHQgXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJiYWxhbmNlZCIsImEiLCJiIiwic3RyIiwiUmVnRXhwIiwibWF5YmVNYXRjaCIsInIiLCJyYW5nZSIsInN0YXJ0IiwiZW5kIiwicHJlIiwic2xpY2UiLCJib2R5IiwibGVuZ3RoIiwicG9zdCIsInJlZyIsIm0iLCJtYXRjaCIsImJlZ3MiLCJiZWciLCJsZWZ0IiwicmlnaHQiLCJyZXN1bHQiLCJhaSIsImluZGV4T2YiLCJiaSIsImkiLCJwdXNoIiwicG9wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reduce-css-calc/node_modules/balanced-match/index.js\n");

/***/ })

};
;