export type pwrPerksMessage = {
    receiver : address,
    feedback : string
};

export type storage = {
    pwrPerksTraces : map<address, pwrPerksMessage>,
    feedback : string
};

type return_ = [list<operation>, storage];



@entry
const pwrPerks = (_ : unit, store : storage) : return_ => {
    let feedbackMessage = {receiver : Tezos.get_self_address() ,feedback: ""};
    return [  list([]) as list<operation>, {...store,
        pwrPerksTraces : Map.add(Tezos.get_source(), feedbackMessage, store.pwrPerksTraces) }];
};


type returned_feedback = [address, string]; //address that gives feedback and a string message

type oracle_param = contract<returned_feedback>;


@entry
const getFeedback = (contract_callback : contract<returned_feedback>, store : storage): return_ => {
    let op : operation = Tezos.transaction(
            [Tezos.get_self_address(),store.feedback],
            (0 as mutez),
            contract_callback);
    return [list([op]) ,store];
};

@entry
const pokeAndGetFeedback = (oracleAddress: address, store: storage): return_ => {
  //Read the feedback view

  let feedbackOpt: option<string> =
    Tezos.call_view("feedback", unit, oracleAddress);
  match(feedbackOpt) {
    when (Some(feedback)):
      do {
        let feedbackMessage = { receiver: oracleAddress, feedback: feedback };
        return [
          list([]) as list<operation>,
          {
            ...store,
            pwrPerksTraces: Map.add(
              Tezos.get_source(),
              feedbackMessage,
              store.pwrPerksTraces
            )
          }
        ];
      }
    when (None()):
      failwith("Cannot find view feedback on given oracle address")
  };
};

@entry
const pwrPerksAndGetFeedbackCallback = (feedback : returned_feedback, store : storage) : return_ => {
    let feedbackMessage = {receiver : feedback[0] ,feedback: feedback[1]};
    return [  list([]) as list<operation>, {...store,
        pwrPerksTraces : Map.add(Tezos.get_source(), feedbackMessage , store.pwrPerksTraces) }];
};

@view
export const feedback = (_: unit, store: storage): string => { return store.feedback };